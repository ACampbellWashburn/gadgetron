#ifndef __UINTD_HCU
#define __UINTD_HCU

template <int LENGTH> struct uintd
{
  unsigned int d[LENGTH];
};


template <int ASIZE>  __host__ __device__ void idx_to_co(unsigned int& idx, uintd<ASIZE>& dims, uintd<ASIZE>& co)
{
  unsigned int idx_tmp = idx;
  for (unsigned int i = 0; i < ASIZE; i++) {
    co.d[i] = idx_tmp%dims.d[i];
    idx_tmp -= co.d[i];
    idx_tmp /= dims.d[i];
  }
} 

template <int ASIZE>  __host__ __device__ unsigned int co_to_idx(uintd<ASIZE>& dims, uintd<ASIZE>& co)
{
  unsigned int idx = 0;
  unsigned long block_size = 1;
  for (unsigned int i = 0; i < ASIZE; i++) {
    idx += block_size*co.d[i];
     block_size *= dims.d[i];
  }
  return idx;
} 

#endif //__UINTD_HCU
