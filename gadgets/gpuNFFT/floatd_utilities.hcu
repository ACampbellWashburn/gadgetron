#pragma once

#include "floatd_operators.hcu"
#include <cuComplex.h>

//
// Overloaded utilities for 2/3/4-D single precision floating point operations
//

__inline__ __host__ __device__ float prod(float2 f)
{
  return f.x*f.y;
}

__inline__ __host__ __device__ float prod(float3 f)
{
  return f.x*f.y*f.z;
}

__inline__ __host__ __device__ float prod(float4 f)
{
  return f.x*f.y*f.z*f.w;
}

__inline__ __host__ __device__ void get_zero( float &val )
{
  val = 0.0f;
}

__inline__ __host__ __device__ void get_zero( cuFloatComplex &val )
{
  val = make_cuFloatComplex( 0.0f, 0.0f );
}

__inline__ __host__ __device__ void get_one( float &val )
{
  val = 1.0f;
}

__inline__ __host__ __device__ float half( const float real )
{
  return 0.5f*real;
}

__inline__ __host__ __device__ float2 half( const float2 real )
{
  return make_float2( 0.5f*real.x, 0.5f*real.y );
}

__inline__ __host__ __device__ float3 half( const float3 real )
{
  return make_float3( 0.5f*real.x, 0.5f*real.y, 0.5f*real.z );
}

__inline__ __host__ __device__ float4 half( const float4 real )
{
  return make_float4( 0.5f*real.x, 0.5f*real.y, 0.5f*real.z, 0.5f*real.w );
}

__inline__ __host__ __device__ float norm( float v )
{
  return fabsf(v);
}

__inline__ __host__ __device__ float norm( float2 v )
{
  return sqrtf( v.x*v.x + v.y*v.y );
}

__inline__ __host__ __device__ float norm( float3 v )
{
  return sqrtf( v.x*v.x + v.y*v.y + v.z*v.z );
}

__inline__ __host__ __device__ float norm( float4 v )
{
  return sqrtf( v.x*v.x + v.y*v.y + v.z*v.z + v.w*v.w );
}

__inline__ __host__ __device__ float norm_sq( float v )
{
  return v*v;
}

__inline__ __host__ __device__ float norm_sq( float2 v )
{
  return v.x*v.x + v.y*v.y;
}

__inline__ __host__ __device__ float norm_sq( float3 v )
{
  return v.x*v.x + v.y*v.y + v.z*v.z;
}

__inline__ __host__ __device__ float norm_sq( float4 v )
{
  return v.x*v.x + v.y*v.y + v.z*v.z + v.w*v.w;
}

__inline__ __host__ __device__ float reciprocal( const float real )
{
  return 1.0f/real;
}

__inline__ __host__ __device__ cuFloatComplex reciprocal( const cuFloatComplex z )
{
  return cuCmulf( make_cuFloatComplex(1.0f/norm_sq(z),0.0f), cuConjf(z) );
}

__inline__ __host__ __device__ void real_to_reald(const float i, const float fill, float2 &ui)
{
  ui.x = i;
  ui.y = fill;
}

__inline__ __host__ __device__ void real_to_reald(const float i, const float fill, float3 &ui)
{
  ui.x = i;
  ui.y = fill;
  ui.z = fill;
}

__inline__ __host__ __device__ void real_to_reald(const float i, const float fill, float4 &ui)
{
  ui.x = i;
  ui.y = fill;
  ui.z = fill;
  ui.w = fill;
}

__inline__ __host__ __device__ float2 make_reald( const float real1, const float real2 )
{
  return make_float2(real1,real2);
}

__inline__ __host__ __device__ float3 make_reald( const float real1, const float real2, const float real3 )
{
  return make_float3(real1,real2,real3);
}

__inline__ __host__ __device__ float4 make_reald( const float real1, const float real2, const float real3, const float real4 )
{
  return make_float4(real1,real2,real3,real4);
}

__inline__ __host__ __device__ cuFloatComplex make_realComplex( const float real1, const float real2 )
{
  return make_cuFloatComplex(real1,real2);
}
/*
  __inline__ __host__ __device__ float2 floatd_to_float2(float4 f)
  {
  float2 val;
  val.x = f.x;
  val.y = f.y;
  return val;
  }

  __inline__ __host__ __device__ float2 floatd_to_float2(float3 f)
  {
  float2 val;
  val.x = f.x;
  val.y = f.y;
  return val;
  }

  __inline__ __host__ __device__ float2 floatd_to_float2(float2 f)
  {
  return f;
  }

  __inline__ __host__ __device__ float2 float4_to_float2(float4 f)
  {
  float2 val;
  val.x = f.x;
  val.y = f.y;
  return val;
  }

  __inline__ __host__ __device__ float3 float4_to_float3(float4 f)
  {
  float3 val;
  val.x = f.x;
  val.y = f.y;
  val.z = f.z;
  return val;
  }
*/

__inline__ __host__ __device__ float dot( float2 a, float2 b )
{
  return a.x * b.x + a.y * b.y;
}

__inline__ __host__ __device__ float dot( float3 a, float3 b )
{
  return a.x * b.x + a.y * b.y + a.z * b.z;
}

__inline__ __host__ __device__ float dot( float4 a, float4 b )
{
  return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

__inline__ __host__ __device__ float2 normalize( float2 v )
{
  return v * (1.0f/sqrtf(v.x*v.x + v.y*v.y ));
}

__inline__ __host__ __device__ float3 normalize( float3 v )
{
  return v * (1.0f/sqrtf(v.x*v.x + v.y*v.y + v.z*v.z ));
}

__inline__ __host__ __device__ float4 normalize( float4 v )
{
  return v * (1.0f/sqrtf(v.x*v.x + v.y*v.y + v.z*v.z + v.w*v.w));
}

__inline__ __host__ __device__ float2 abs(float2 f)
{
  float2 val;
  val.x = fabsf(f.x);
  val.y = fabsf(f.y);
  return val;
}

__inline__ __host__ __device__ float3 abs(float3 f)
{
  float3 val;
  val.x = fabsf(f.x);
  val.y = fabsf(f.y);
  val.z = fabsf(f.z);
  return val;
}

__inline__ __host__ __device__ float4 abs(float4 f)
{
  float4 val;
  val.x = fabsf(f.x);
  val.y = fabsf(f.y);
  val.z = fabsf(f.z);
  val.w = fabsf(f.w);
  return val;
}


/*
  __inline__ __host__ __device__ float4 float2_to_float4_with_ones(float2 ui)
  {
  float4 val;
  val.x = ui.x;
  val.y = ui.y;
  val.z = 1;
  val.w = 1;
  return val;
  }

  __inline__ __host__ __device__ float3 float2_to_float3_with_ones(float2 ui)
  {
  float3 val;
  val.x = ui.x;
  val.y = ui.y;
  val.z = 1;
  return val;
  }
*/
/*
  __inline__ __host__ __device__ float get_last_dim(float2 ui)
  {
  return ui.y;
  }

  __inline__ __host__ __device__ float get_last_dim(float3 ui)
  {
  return ui.z;
  }

  __inline__ __host__ __device__ float get_last_dim(float4 ui)
  {
  return ui.w;
  }
*/
/*
  __inline__ __host__ __device__ float2 fabs(float2 f)
  {
  float2 val;
  val.x = fabsf(f.x);
  val.y = fabsf(f.y);
  return val;
  }

  __inline__ __host__ __device__ float3 fabs(float3 f)
  {
  float3 val;
  val.x = fabsf(f.x);
  val.y = fabsf(f.y);
  val.z = fabsf(f.z);
  return val;
  }

  __inline__ __host__ __device__ float4 fabs(float4 f)
  {
  float4 val;
  val.x = fabsf(f.x);
  val.y = fabsf(f.y);
  val.z = fabsf(f.z);
  val.w = fabsf(f.w);
  return val;
  }
*/

__inline__ __host__ __device__ float2 floor(float2 f)
{
  float2 val;
  val.x = floorf(f.x);
  val.y = floorf(f.y);
  return val;
}

__inline__ __host__ __device__ float3 floor(float3 f)
{
  float3 val;
  val.x = floorf(f.x);
  val.y = floorf(f.y);
  val.z = floorf(f.z);
  return val;
}

__inline__ __host__ __device__ float4 floor(float4 f)
{
  float4 val;
  val.x = floorf(f.x);
  val.y = floorf(f.y);
  val.z = floorf(f.z);
  val.w = floorf(f.w);
  return val;
}

__inline__ __host__ __device__ float2 ceil(float2 f)
{
  float2 val;
  val.x = ceilf(f.x);
  val.y = ceilf(f.y);
  return val;
}

__inline__ __host__ __device__ float3 ceil(float3 f)
{
  float3 val;
  val.x = ceilf(f.x);
  val.y = ceilf(f.y);
  val.z = ceilf(f.z);
  return val;
}

__inline__ __host__ __device__ float4 ceil(float4 f)
{
  float4 val;
  val.x = ceilf(f.x);
  val.y = ceilf(f.y);
  val.z = ceilf(f.z);
  val.w = ceilf(f.w);
  return val;
}

// operators <, <=, >, >= are "strong" in the sense they require all components to fullfil the scalar operator.
// Here are the corresponding "weak" alternatives

__inline__ __host__ __device__ bool weak_eq(float2 f1, float2 f2)
{
  return f1.x==f2.x || f1.y==f2.y;
}

__inline__ __host__ __device__ bool weak_eq(float3 f1, float3 f2)
{
  return f1.x==f2.x || f1.y==f2.y || f1.z==f2.z;
}

__inline__ __host__ __device__ bool weak_eq(float4 f1, float4 f2)
{
  return f1.x==f2.x || f1.y==f2.y || f1.z==f2.z || f1.w==f2.w;
}

__inline__ __host__ __device__ bool weak_less(float2 f1, float2 f2)
{
  return f1.x<f2.x || f1.y<f2.y;
}

__inline__ __host__ __device__ bool weak_less(float3 f1, float3 f2)
{
  return f1.x<f2.x || f1.y<f2.y || f1.z<f2.z;
}

__inline__ __host__ __device__ bool weak_less(float4 f1, float4 f2)
{
  return f1.x<f2.x || f1.y<f2.y || f1.z<f2.z || f1.w<f2.w;
}

__inline__ __host__ __device__ bool weak_less_equal(float2 f1, float2 f2)
{
  return f1.x<=f2.x || f1.y<=f2.y;
}

__inline__ __host__ __device__ bool weak_less_equal(float3 f1, float3 f2)
{
  return f1.x<=f2.x || f1.y<=f2.y || f1.z<=f2.z;
}

__inline__ __host__ __device__ bool weak_less_equal(float4 f1, float4 f2)
{
  return f1.x<=f2.x || f1.y<=f2.y || f1.z<=f2.z || f1.w<=f2.w;
}

__inline__ __host__ __device__ bool weak_greater(float2 f1, float2 f2)
{
  return f1.x>f2.x || f1.y>f2.y;
}

__inline__ __host__ __device__ bool weak_greater(float3 f1, float3 f2)
{
  return f1.x>f2.x || f1.y>f2.y || f1.z>f2.z;
}

__inline__ __host__ __device__ bool weak_greater(float4 f1, float4 f2)
{
  return f1.x>f2.x || f1.y>f2.y || f1.z>f2.z || f1.w>f2.w;
}

__inline__ __host__ __device__ bool weak_greater_equal(float2 f1, float2 f2)
{
  return f1.x>=f2.x || f1.y>=f2.y;
}

__inline__ __host__ __device__ bool weak_greater_equal(float3 f1, float3 f2)
{
  return f1.x>=f2.x || f1.y>=f2.y || f1.z>=f2.z;
}

__inline__ __host__ __device__ bool weak_greater_equal(float4 f1, float4 f2)
{
  return f1.x>=f2.x || f1.y>=f2.y || f1.z>=f2.z || f1.w>=f2.w;
}

__inline__ __host__ __device__ bool equal(float2 f)
{
  return (f.x==f.y); 
}

__inline__ __host__ __device__ bool equal(float3 f)
{
  return (f.x==f.y) && (f.y==f.z); 
}

__inline__ __host__ __device__ bool equal(float4 f)
{
  return (f.x==f.y) && (f.y==f.z) && (f.z==f.w); 
}

__inline__ __device__ float2 uintd_to_reald( uint2 a )
{
  return make_float2( uint2float(a.x), uint2float(a.y) );
}

__inline__ __device__ float3 uintd_to_reald( uint3 a )
{
  return make_float3( uint2float(a.x), uint2float(a.y), uint2float(a.z) );
}

__inline__ __device__ float4 uintd_to_reald( uint4 a )
{
  return make_float4( uint2float(a.x), uint2float(a.y), uint2float(a.z), uint2float(a.w) );
}

__inline__ __device__ float2 intd_to_reald( int2 a )
{
  return make_float2( int2float(a.x), int2float(a.y) );
}

__inline__ __device__ float3 intd_to_reald( int3 a )
{
  return make_float3( int2float(a.x), int2float(a.y), int2float(a.z) );
}

__inline__ __device__ float4 intd_to_reald( int4 a )
{
  return make_float4( int2float(a.x), int2float(a.y), int2float(a.z), int2float(a.w) );
}

__inline__ __host__ float2 huintd_to_reald( uint2 a )
{
  return make_float2( (float)a.x, (float)a.y );
}

__inline__ __host__ float3 huintd_to_reald( uint3 a )
{
  return make_float3( (float)a.x, (float)a.y, (float)a.z );
}

__inline__ __host__ float4 huintd_to_reald( uint4 a )
{
  return make_float4( (float)a.x, (float)a.y, (float)a.z, (float)a.w );
}

__inline__ __host__ float2 hintd_to_reald( int2 a )
{
  return make_float2( (float)a.x, (float)a.y );
}

__inline__ __host__ float3 hintd_to_reald( int3 a )
{
  return make_float3( (float)a.x, (float)a.y, (float)a.z );
}

__inline__ __host__ float4 hintd_to_reald( int4 a )
{
  return make_float4( (float)a.x, (float)a.y, (float)a.z, (float)a.w );
}
