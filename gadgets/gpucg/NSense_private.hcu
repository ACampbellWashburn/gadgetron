/*

	Cuda iterative Sense
	--------------------

	Implementation interface

*/

#ifndef _NSENSE_PRIVATE_HCU_
#define _NSENSE_PRIVATE_HCU_

#include <cuComplex.h>

// Calculate intensity correction image
__host__ void calculate_intensity_correction_magnitudes_image( unsigned int num_elements, unsigned int num_coils, cuFloatComplex *coilMapsDevPtr, float *out_DevPtr );

// Intensity correct
__host__ void intensity_correct_image( unsigned int num_elements, unsigned int num_elements_os, float kappa, float *intensityMagnitudesImage, float *regularizationImage, cuFloatComplex *image );

// Specialized image "Cssaxpy": y = ax+y where x and y are vectors of complex float, a is float vector.
__host__ void image_Cssaxpy( unsigned int num_elements, float _a, float *a, cuFloatComplex *x, cuFloatComplex *y );

// Specialized image "Caxpy": y = ax+y where _all_ of a,x, and y are vectors of complex float.
__host__ void image_Caxpy( unsigned int num_elements, bool complexConjugate_a, cuFloatComplex *a, cuFloatComplex *x, cuFloatComplex *y, unsigned int number_of_images );

// Image "Cscal": x = ax where both 'a' and 'x' are complex float vectors
__host__ void image_Cscal( unsigned int num_elements, cuFloatComplex *a, cuFloatComplex *x );

// Image "Csscal": x = ax where a is a float vector and x is a complex float vector
__host__ void image_Csscal( unsigned int num_elements, float *a, cuFloatComplex *x );


/*
	Kernels
*/

// Calculate intensity correction image kernel
__global__ void calculate_intensity_correction_magnitudes_image_kernel( unsigned int num_elements, unsigned int num_coils, cuFloatComplex *coilMapsDevPtr, float *out_DevPtr );

// Intensity correct image kernel
__global__ void intensity_correct_image_kernel( unsigned int num_elements, unsigned int num_elements_os, float kappa, float *intensityMagnitudesImage, float *regularizationImage, cuFloatComplex *image );

// Image "Caxpy": y = ax+y where _all_ of a,x, and y are vectors of complex float. 'y' is a single image (accumulation buffer).
__global__ void image_Caxpy_kernel( unsigned int num_elements, bool complexConjugate_a, cuFloatComplex *a, cuFloatComplex *x, cuFloatComplex *y, unsigned int number_of_images );

// Image "Caxpy": y = ax+y where x and y are vectors of complex float, a is float vector.
__global__ void image_Cssaxpy_kernel( unsigned int num_elements, float _a, float *a, cuFloatComplex *x, cuFloatComplex *y );

// Image "Cscal": x = ax where both 'a' and 'x' are complex float vectors
__global__ void image_Cscal_kernel( unsigned int num_elements, cuFloatComplex *a, cuFloatComplex *x );

// Image "Csscal": x = ax where a is a float vector and x is a complex float vector
__global__ void image_Csscal_kernel( unsigned int num_elements, float *a, cuFloatComplex *x );


#endif
