#pragma once

#include "preprocess.hcu"

#include <cuda_runtime_api.h>
#include <cuComplex.h>

// Noise decorrelation (normalization rather)
bool noise_scaling( unsigned int num_points, unsigned int num_coils, cuFloatComplex *dataDevPtr, float4 *coDevPtr, float2 image_center, float shutter_radius_squared );

// Upload CSM from host
template< class UINTd, class FLOATd, char TYPE > bool
upload_csm( mr_recon::NFFT_iteration_plan<UINTd, FLOATd, TYPE> *plan, cuFloatComplex *csmHostPtr );

template< class UINTd, class FLOATd, char TYPE > bool 
upload_regularization_image( mr_recon::NFFT_iteration_plan<UINTd,FLOATd, TYPE> *plan, float *image_HostPtr );

// Rotate CSM 90 degrees
template< class UINTd, class FLOATd, char TYPE > void
rotate_csm( mr_recon::NFFT_iteration_plan<UINTd, FLOATd, TYPE> *plan );

// Extract CSM and regularization (Sense)
template< class UINTd, class FLOATd, char TYPE > bool
extract_csm_and_regularization( mr_recon::NFFT_iteration_plan<UINTd, FLOATd, TYPE> *plan, float shutter_csm, unsigned int num_samples_per_coil, const cuFloatComplex *samples_HostPtr, float noise_decorrelation_shutter_radius, unsigned int projection_offset = 0, unsigned int frames_per_rotation = 1 );

// Update existing CSM and regularization based on existing maps and a new frame
template< class UINTd, class FLOATd, char TYPE > bool
update_csm_and_regularization( mr_recon::NFFT_iteration_plan<UINTd, FLOATd, TYPE> *plan, const cuFloatComplex *samples_DevPtr, float shutter_csm, cuFloatComplex *kspace_coil_images_buffer_os, unsigned int projection_offset, bool do_preprocessing, unsigned int frames_per_rotation = 1, bool reallocate = false );

template< class UINTd, class FLOATd > bool
update_csm_and_regularization( mr_recon::NFFT_iteration_plan<UINTd, FLOATd, 0> *plan, cuFloatComplex *samples_DevPtr, FLOATd *traj_DevPtr, float *dcw_DevPtr, float shutter_csm, cuFloatComplex *kspace_coil_images_buffer_os, cuFloatComplex *kspace_acc_coil_images_os, unsigned int kspace_acc_coil_images_os_size, bool do_preprocessing, bool reallocate = false );

// Extract CSM and training data (kt-Sense)
template< class UINTd, class FLOATd, char TYPE > bool
extract_csm_and_training_data( mr_recon::NFFT_iteration_plan<UINTd, FLOATd, TYPE> *plan, float shutter_csm, unsigned int csm_frames, const cuFloatComplex *samplesDevPtr, float shutter_theta = -1.0f );

// Helpers
void normalize_csm( unsigned int num_coils, unsigned int num_elements, cuFloatComplex *csm );
void expand_csm( unsigned int num_coils, unsigned int num_elements, unsigned int num_frames, const cuFloatComplex *in_csm, cuFloatComplex *out_csm );
void extract_training_data_xt( unsigned int num_coils, unsigned int num_elements, const cuFloatComplex *lowres, const cuFloatComplex *csm, cuFloatComplex *ctraining );
template< char TYPE > float compute_training_data_shutter_radius( unsigned int number_of_projections );

template< class UINTd, class FLOATd, char TYPE > bool
extract_and_combine_current_frame( mr_recon::NFFT_iteration_plan<UINTd, FLOATd, TYPE> *plan, cuFloatComplex *kspace_coil_images_buffer_os,  cuFloatComplex *imageDevPtr);
