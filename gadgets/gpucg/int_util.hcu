#ifndef _INT_UTILS
#define _INT_UTILS

/*******************************************************
 *
 *   Utility functions for int vector types
 *   int2, int3, int4
 *
 ******************************************************/

#include <vector_functions.h>


/*  OPERATORS */

inline __host__ __device__ int2 operator *(int2 a, int2 b)
{
	return make_int2(a.x*b.x, a.y*b.y);
}

inline __host__ __device__ int3 operator *(int3 a, int3 b)
{
	return make_int3(a.x*b.x, a.y*b.y, a.z*b.z);
}

inline __host__ __device__ int4 operator *(int4 a, int4 b)
{
	return make_int4(a.x*b.x, a.y*b.y, a.z*b.z, a.w*b.w);
}

inline __host__ __device__ int2 operator *(int f, int2 v)
{
	return make_int2(v.x*f, v.y*f);
}

inline __host__ __device__ int3 operator *(int f, int3 v)
{
	return make_int3(v.x*f, v.y*f, v.z*f);
}

inline __host__ __device__ int4 operator *(int f, int4 v)
{
	return make_int4(v.x*f, v.y*f, v.z*f, v.w*f);
}

inline __host__ __device__ int2 operator *(int2 v, int f)
{
	return make_int2(v.x*f, v.y*f);
}

inline __host__ __device__ int3 operator *(int3 v, int f)
{
	return make_int3(v.x*f, v.y*f, v.z*f);
}

inline __host__ __device__ int4 operator *(int4 v, int f)
{
	return make_int4(v.x*f, v.y*f, v.z*f, v.w*f);
}

inline __host__ __device__ int2 operator +(int2 a, int2 b)
{
	return make_int2(a.x+b.x, a.y+b.y);
}

inline __host__ __device__ int3 operator +(int3 a, int3 b)
{
	return make_int3(a.x+b.x, a.y+b.y, a.z+b.z);
}

inline __host__ __device__ int4 operator +(int4 a, int4 b)
{
	return make_int4(a.x+b.x, a.y+b.y, a.z+b.z, a.w+b.w);
}

inline __host__ __device__ void operator +=(int2 &b, int2 a)
{
	b.x += a.x;
	b.y += a.y;
}

inline __host__ __device__ void operator +=(int3 &b, int3 a)
{
	b.x += a.x;
	b.y += a.y;
	b.z += a.z;
}

inline __host__ __device__ void operator +=(int4 &b, int4 a)
{
	b.x += a.x;
	b.y += a.y;
	b.z += a.z;
	b.w += a.w;
}

inline __host__ __device__ int2 operator -(int2 a, int2 b)
{
	return make_int2(a.x-b.x, a.y-b.y);
}

inline __host__ __device__ int3 operator -(int3 a, int3 b)
{
	return make_int3(a.x-b.x, a.y-b.y, a.z-b.z);
}

inline __host__ __device__ int4 operator -(int4 a, int4 b)
{
	return make_int4(a.x-b.x, a.y-b.y, a.z-b.z, a.w-b.w);
}

inline __host__ __device__ void operator -=(int2 & b, int2 a)
{
	b.x -= a.x;
	b.y -= a.y;
}

inline __host__ __device__ void operator -=(int3 & b, int3 a)
{
	b.x -= a.x;
	b.y -= a.y;
	b.z -= a.z;
}

inline __host__ __device__ void operator -=(int4 & b, int4 a)
{
	b.x -= a.x;
	b.y -= a.y;
	b.z -= a.z;
	b.w -= a.w;
}

inline __host__ __device__ int2 operator /(int2 a, int f)
{
	return make_int2(a.x/f, a.y/f);
}

inline __host__ __device__ int3 operator /(int3 a, int f)
{
	return make_int3(a.x/f, a.y/f, a.z/f);
}

inline __host__ __device__ int4 operator /(int4 a, int f)
{
	return make_int4(a.x/f, a.y/f, a.z/f, a.w/f);
}

inline __host__ __device__ void operator /=(int2 &b, int f)
{
	b.x /= f;
	b.y /= f;
}

inline __host__ __device__ void operator /=(int3 &b, int f)
{
	b.x /= f;
	b.y /= f;
	b.z /= f;
}

inline __host__ __device__ void operator /=(int4 &b, int f)
{
	b.x /= f;
	b.y /= f;
	b.z /= f;
	b.w /= f;
}

inline __host__ __device__ int2 operator >>(int2 a, int b)
{
	return make_int2(a.x>>b, a.y>>b);
}

inline __host__ __device__ int3 operator >>(int3 a, int b)
{
	return make_int3(a.x>>b, a.y>>b, a.z>>b);
}

inline __host__ __device__ int4 operator >>(int4 a, int b)
{
	return make_int4(a.x>>b, a.y>>b, a.z>>b, a.w>>b );
}

inline __host__ __device__ int2 operator <<(int2 a, int b)
{
	return make_int2(a.x<<b, a.y<<b);
}

inline __host__ __device__ int3 operator <<(int3 a, int b)
{
	return make_int3(a.x<<b, a.y<<b, a.z<<b);
}

inline __host__ __device__ int4 operator <<(int4 a, int b)
{
	return make_int4(a.x<<b, a.y<<b, a.z<<b, a.w<<b);
}

inline __host__ __device__ int2 operator %(int2 ui1, int ui2)
{
  return make_int2(ui1.x%ui2, ui1.y%ui2);
}

inline __host__ __device__ int3 operator %(int3 ui1, int ui2)
{
  return make_int3(ui1.x%ui2, ui1.y%ui2, ui1.z%ui2);
}

inline __host__ __device__ int4 operator %(int4 ui1, int ui2)
{
  return make_int4(ui1.x%ui2, ui1.y%ui2, ui1.z%ui2, ui1.w%ui2);
}

inline __host__ __device__ int2 operator %(int2 ui1, int2 ui2)
{
  return make_int2(ui1.x%ui2.x, ui1.y%ui2.y);
}

inline __host__ __device__ int3 operator %(int3 ui1, int3 ui2)
{
  return make_int3(ui1.x%ui2.x, ui1.y%ui2.y, ui1.z%ui2.z);
}

inline __host__ __device__ int4 operator %(int4 ui1, int4 ui2)
{
  return make_int4(ui1.x%ui2.x, ui1.y%ui2.y, ui1.z%ui2.z, ui1.w%ui2.w);
}

inline __host__ __device__ bool operator <(int2 ui1, int2 ui2)
{
  return ui1.x<ui2.x && ui1.y<ui2.y;
}

inline __host__ __device__ bool operator <(int3 ui1, int3 ui2)
{
  return ui1.x<ui2.x && ui1.y<ui2.y && ui1.z<ui2.z;
}

inline __host__ __device__ bool operator <(int4 ui1, int4 ui2)
{
  return ui1.x<ui2.x && ui1.y<ui2.y && ui1.z<ui2.z && ui1.w<ui2.w;
}

inline __host__ __device__ bool operator <=(int2 ui1, int2 ui2)
{
  return ui1.x<=ui2.x && ui1.y<=ui2.y;
}

inline __host__ __device__ bool operator <=(int3 ui1, int3 ui2)
{
  return ui1.x<=ui2.x && ui1.y<=ui2.y && ui1.z<=ui2.z;
}

inline __host__ __device__ bool operator <=(int4 ui1, int4 ui2)
{
  return ui1.x<=ui2.x && ui1.y<=ui2.y && ui1.z<=ui2.z && ui1.w<=ui2.w;
}

inline __host__ __device__ bool operator >(int2 ui1, int2 ui2)
{
  return ui1.x>ui2.x && ui1.y>ui2.y;
}

inline __host__ __device__ bool operator >(int3 ui1, int3 ui2)
{
  return ui1.x>ui2.x && ui1.y>ui2.y && ui1.z>ui2.z;
}

inline __host__ __device__ bool operator >(int4 ui1, int4 ui2)
{
  return ui1.x>ui2.x && ui1.y>ui2.y && ui1.z>ui2.z && ui1.w>ui2.w;
}

inline __host__ __device__ bool operator >=(int2 ui1, int2 ui2)
{
  return ui1.x>=ui2.x && ui1.y>=ui2.y;
}

inline __host__ __device__ bool operator >=(int3 ui1, int3 ui2)
{
  return ui1.x>=ui2.x && ui1.y>=ui2.y && ui1.z>=ui2.z;
}

inline __host__ __device__ bool operator >=(int4 ui1, int4 ui2)
{
  return ui1.x>=ui2.x && ui1.y>=ui2.y && ui1.z>=ui2.z && ui1.w>=ui2.w;
}

inline __host__ __device__ bool operator ==(int2 a, int2 b)
{
	return (a.x==b.x && a.y==b.y);
}

inline __host__ __device__ bool operator ==(int3 a, int3 b)
{
	return (a.x==b.x && a.y==b.y && a.z==b.z );
}

inline __host__ __device__ bool operator ==(int4 a, int4 b)
{
	return (a.x==b.x && a.y==b.y && a.z==b.z && a.w==b.w );
}

/* OPERATORS END */

// operators <, <=, >, >= are "strong" in the sense they require all components to fullfil the scalar operator.
// Here are the corresponding "weak" alternatives

inline __host__ __device__ bool weak_less(int2 ui1, int2 ui2)
{
  return ui1.x<ui2.x || ui1.y<ui2.y;
}

inline __host__ __device__ bool weak_less(int3 ui1, int3 ui2)
{
  return ui1.x<ui2.x || ui1.y<ui2.y || ui1.z<ui2.z;
}

inline __host__ __device__ bool weak_less(int4 ui1, int4 ui2)
{
  return ui1.x<ui2.x || ui1.y<ui2.y || ui1.z<ui2.z || ui1.w<ui2.w;
}

inline __host__ __device__ bool weak_less_equal(int2 ui1, int2 ui2)
{
  return ui1.x<=ui2.x || ui1.y<=ui2.y;
}

inline __host__ __device__ bool weak_less_equal(int3 ui1, int3 ui2)
{
  return ui1.x<=ui2.x || ui1.y<=ui2.y || ui1.z<=ui2.z;
}

inline __host__ __device__ bool weak_less_equal(int4 ui1, int4 ui2)
{
  return ui1.x<=ui2.x || ui1.y<=ui2.y || ui1.z<=ui2.z || ui1.w<=ui2.w;
}

inline __host__ __device__ bool weak_greater(int2 ui1, int2 ui2)
{
  return ui1.x>ui2.x || ui1.y>ui2.y;
}

inline __host__ __device__ bool weak_greater(int3 ui1, int3 ui2)
{
  return ui1.x>ui2.x || ui1.y>ui2.y || ui1.z>ui2.z;
}

inline __host__ __device__ bool weak_greater(int4 ui1, int4 ui2)
{
  return ui1.x>ui2.x || ui1.y>ui2.y || ui1.z>ui2.z || ui1.w>ui2.w;
}

inline __host__ __device__ bool weak_greater_equal(int2 ui1, int2 ui2)
{
  return ui1.x>=ui2.x || ui1.y>=ui2.y;
}

inline __host__ __device__ bool weak_greater_equal(int3 ui1, int3 ui2)
{
  return ui1.x>=ui2.x || ui1.y>=ui2.y || ui1.z>=ui2.z;
}

inline __host__ __device__ bool weak_greater_equal(int4 ui1, int4 ui2)
{
  return ui1.x>=ui2.x || ui1.y>=ui2.y || ui1.z>=ui2.z || ui1.w>=ui2.w;
}


/* Coordinate transformation functions */

inline __host__ __device__ int co_to_idx(int2 co, int2 dim)
{
  return co.y*dim.x + co.x;
}

inline __host__ __device__ int co_to_idx(int3 co, int3 dim)
{
  return co.z*dim.x*dim.y + co.y*dim.x + co.x;
}

inline __host__ __device__ int co_to_idx(int4 co, int4 dim)
{
  return co.w*dim.x*dim.y*dim.z + co.z*dim.x*dim.y + co.y*dim.x + co.x;
}

inline __host__ __device__ int2 idx_to_co(int idx, int2 dim)
{
  int2 co;
  int temp = idx;
  co.x = temp%dim.x;temp -= co.x;
  co.y = temp/(dim.x);
  
  return co;
}

inline __host__ __device__ int3 idx_to_co(int idx, int3 dim)
{
  int3 co;
  int temp = idx;
  co.x = temp%dim.x;temp -= co.x;
  co.y = (temp/(dim.x))%dim.y; temp -= co.y*dim.x;
  co.z = temp/(dim.x*dim.y);
  return co;
}

inline __host__ __device__ int4 idx_to_co(int idx, int4 dim)
{
  int4 co;
  int temp = idx;
  co.x = temp%dim.x;temp -= co.x;
  co.y = (temp/(dim.x))%dim.y; temp -= co.y*dim.x;
  co.z = (temp/(dim.x*dim.y))%dim.z; temp -= co.z*dim.x*dim.y;
  co.w = temp/(dim.x*dim.y*dim.z);
  
  return co;
}

inline __host__ __device__ int prod(int2 ui)
{
  return ui.x*ui.y;
}

inline __host__ __device__ int prod(int3 ui)
{
  return ui.x*ui.y*ui.z;
}

inline __host__ __device__ int prod(int4 ui)
{
  return ui.x*ui.y*ui.z*ui.w;
}

inline __host__ __device__ int2 int4_to_int2(int4 ui)
{
  int2 val;
  val.x = ui.x;
  val.y = ui.y;
  return val;
}

inline __host__ __device__ int3 int4_to_int3(int4 ui)
{
  int3 val;
  val.x = ui.x;
  val.y = ui.y;
  val.z = ui.z;
  return val;
}

inline __host__ __device__ int2 int3_to_int2(int3 ui)
{
  int2 val;
  val.x = ui.x;
  val.y = ui.y;
  return val;
}

inline __host__ __device__ int2 shift_down(int2 ui)
{
  return make_int2(ui.y, ui.x);
}

inline __host__ __device__ int3 shift_down(int3 ui)
{
  return make_int3(ui.y, ui.z, ui.x);
}

inline __host__ __device__ int4 shift_down(int4 ui)
{
  return make_int4(ui.y, ui.z, ui.w, ui.x);
}

template<class T> inline __host__ __device__ T shift_down(T ui, int steps)
{
   T temp = ui;
   for (int i = 0; i < steps; i++)
   {
      temp = shift_down(temp);
   }   
   return temp;
}

inline __host__ __device__ int2 shift_up(int2 ui)
{
  return make_int2(ui.y, ui.x);
}

inline __host__ __device__ int3 shift_up(int3 ui)
{
  return make_int3(ui.z, ui.x, ui.y);
}

inline __host__ __device__ int4 shift_up(int4 ui)
{
  return make_int4(ui.w, ui.x, ui.y, ui.z);
}

template<class T> inline __host__ __device__ T shift_up(T ui, int steps)
{
   T temp = ui;
   for (int i = 0; i < steps; i++)
   {
      temp = shift_up(temp);
   }   
   return temp;
}

inline __device__ int dot( int2 a, int2 b )
{
	return a.x * b.x + a.y * b.y;
}

inline __device__ int dot( int3 a, int3 b )
{
	return a.x * b.x + a.y * b.y + a.z * b.z;
}

inline __device__ int dot( int4 a, int4 b )
{
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

inline __host__ __device__ int2 uint_to_int(uint2 ui)
{
  return make_int2(ui.x, ui.y);
}

inline __host__ __device__ int3 uint_to_int(uint3 ui)
{
  return make_int3(ui.x, ui.y, ui.z);
}

inline __host__ __device__ int4 uint_to_int(uint4 ui)
{
  return make_int4(ui.x, ui.y, ui.z, ui.w);
}

inline __device__ int4 uintd_to_intd( uint4 a )
{
	return make_int4( a.x, a.y, a.z, a.w );
}

inline __device__ int3 uintd_to_intd( uint3 a )
{
	return make_int3( a.x, a.y, a.z );
}

inline __device__ int2 uintd_to_intd( uint2 a )
{
	return make_int2( a.x, a.y );
}

#endif
