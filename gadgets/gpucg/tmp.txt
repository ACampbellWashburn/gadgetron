# 1 "GPUCGGadget.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "GPUCGGadget.cpp"
# 1 "GPUCGGadget.h" 1



# 1 "/usr/include/c++/4.4/complex" 1 3
# 41 "/usr/include/c++/4.4/complex" 3
       
# 42 "/usr/include/c++/4.4/complex" 3

# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 1 3
# 243 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/os_defines.h" 1 3
# 39 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 322 "/usr/include/features.h" 3 4
# 1 "/usr/include/bits/predefs.h" 1 3 4
# 323 "/usr/include/features.h" 2 3 4
# 355 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 353 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 354 "/usr/include/sys/cdefs.h" 2 3 4
# 356 "/usr/include/features.h" 2 3 4
# 387 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4




# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 2 3 4
# 388 "/usr/include/features.h" 2 3 4
# 40 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/os_defines.h" 2 3
# 244 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 2 3


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/cpu_defines.h" 1 3
# 247 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 2 3
# 44 "/usr/include/c++/4.4/complex" 2 3
# 1 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 1 3
# 36 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
       
# 37 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
# 69 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {

  template<typename _Iterator, typename _Container>
    class __normal_iterator;

}

namespace std __attribute__ ((__visibility__ ("default"))) {

  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 194 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 417 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 45 "/usr/include/c++/4.4/complex" 2 3
# 1 "/usr/include/c++/4.4/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/4.4/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/4.4/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {


  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  template<typename _Tp>
    struct __promote<_Tp, false>
    { typedef _Tp __type; };

  template<typename _Tp, typename _Up>
    struct __promote_2
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;

    public:
      typedef __typeof__(__type1() + __type2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp>
    struct __promote_3
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;

    public:
      typedef __typeof__(__type1() + __type2() + __type3()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>
    struct __promote_4
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;
      typedef typename __promote<_Wp>::__type __type4;

    public:
      typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;
    };

}
# 46 "/usr/include/c++/4.4/complex" 2 3
# 1 "/usr/include/c++/4.4/cmath" 1 3
# 41 "/usr/include/c++/4.4/cmath" 3
       
# 42 "/usr/include/c++/4.4/cmath" 3




# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 26 "/usr/include/bits/mathdef.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/mathdef.h" 2 3 4




typedef float float_t;
typedef double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ();




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ();




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 145 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ();




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 146 "/usr/include/math.h" 2 3 4
# 161 "/usr/include/math.h" 3 4
extern int signgam;
# 202 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 295 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 318 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 476 "/usr/include/math.h" 3 4
}
# 47 "/usr/include/c++/4.4/cmath" 2 3
# 77 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__ ((__visibility__ ("default"))) {



  template<typename _Tp>
    _Tp __cmath_power(_Tp, unsigned int);

  template<typename _Tp>
    inline _Tp
    __pow_helper(_Tp __x, int __n)
    {
      return __n < 0
        ? _Tp(1)/__cmath_power(__x, -__n)
        : __cmath_power(__x, __n);
    }

  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<
    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value
        && __is_arithmetic<_Up>::__value,
        _Tp>::__type, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<
    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value
        && __is_arithmetic<_Up>::__value,
        _Tp>::__type, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }

}
# 492 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }

}





# 1 "/usr/include/c++/4.4/bits/cmath.tcc" 1 3
# 35 "/usr/include/c++/4.4/bits/cmath.tcc" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp>
    inline _Tp
    __cmath_power(_Tp __x, unsigned int __n)
    {
      _Tp __y = __n % 2 ? __x : _Tp(1);

      while (__n >>= 1)
        {
          __x = __x * __x;
          if (__n % 2)
            __y = __y * __x;
        }

      return __y;
    }

}
# 610 "/usr/include/c++/4.4/cmath" 2 3
# 47 "/usr/include/c++/4.4/complex" 2 3
# 1 "/usr/include/c++/4.4/sstream" 1 3
# 37 "/usr/include/c++/4.4/sstream" 3
       
# 38 "/usr/include/c++/4.4/sstream" 3

# 1 "/usr/include/c++/4.4/istream" 1 3
# 38 "/usr/include/c++/4.4/istream" 3
       
# 39 "/usr/include/c++/4.4/istream" 3

# 1 "/usr/include/c++/4.4/ios" 1 3
# 37 "/usr/include/c++/4.4/ios" 3
       
# 38 "/usr/include/c++/4.4/ios" 3

# 1 "/usr/include/c++/4.4/iosfwd" 1 3
# 38 "/usr/include/c++/4.4/iosfwd" 3
       
# 39 "/usr/include/c++/4.4/iosfwd" 3


# 1 "/usr/include/c++/4.4/bits/stringfwd.h" 1 3
# 38 "/usr/include/c++/4.4/bits/stringfwd.h" 3
       
# 39 "/usr/include/c++/4.4/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Alloc>
    class allocator;

  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 75 "/usr/include/c++/4.4/bits/stringfwd.h" 3
}
# 42 "/usr/include/c++/4.4/iosfwd" 2 3
# 1 "/usr/include/c++/4.4/bits/postypes.h" 1 3
# 40 "/usr/include/c++/4.4/bits/postypes.h" 3
       
# 41 "/usr/include/c++/4.4/bits/postypes.h" 3

# 1 "/usr/include/c++/4.4/cwchar" 1 3
# 41 "/usr/include/c++/4.4/cwchar" 3
       
# 42 "/usr/include/c++/4.4/cwchar" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 45 "/usr/include/c++/4.4/cstddef" 2 3




namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::ptrdiff_t;
  using ::size_t;

}
# 45 "/usr/include/c++/4.4/cwchar" 2 3


# 1 "/usr/include/wchar.h" 1 3 4
# 37 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/stdio.h" 1 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 38 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 43 "/usr/include/wchar.h" 2 3 4
# 52 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 352 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 53 "/usr/include/wchar.h" 2 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 104 "/usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;



# 129 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (__const wchar_t *__s1, __const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (__const wchar_t *__s1, __const wchar_t *__s2) throw ();


extern int wcsncasecmp (__const wchar_t *__s1, __const wchar_t *__s2,
   size_t __n) throw ();



# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 178 "/usr/include/wchar.h" 2 3 4

extern int wcscasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (__const wchar_t *__s1, __const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         __const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (__const wchar_t *__s1, __const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, __const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (__const wchar_t *__s) throw () __attribute__ ((__malloc__));





extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcschr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsrchr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));









extern wchar_t *wcschrnul (__const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (__const wchar_t *__wcs, __const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (__const wchar_t *__wcs, __const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcspbrk (__const wchar_t *__wcs,
           __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsstr (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   __const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (__const wchar_t *__s) throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wcswcs (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcswcs (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 303 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (__const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));






extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wmemchr (__const wchar_t *__s, wchar_t __c,
           size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (__const wchar_t *__restrict __s1,
      __const wchar_t *__restrict __s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    __const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     __const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (__const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         __const char *__restrict __s, size_t __n,
         mbstate_t *__p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (__const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (__const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();

# 403 "/usr/include/wchar.h" 3 4



extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    __const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    __const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     __const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     __const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (__const wchar_t *__s, size_t __n) throw ();






extern double wcstod (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (__const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (__const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 528 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (__const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__dest, __const wchar_t *__src) throw ();



extern wchar_t *wcpncpy (wchar_t *__dest, __const wchar_t *__src, size_t __n)
     throw ();
# 578 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       __const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (__const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       __const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (__const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      __const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (__const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (__const wchar_t *__restrict __s,
      __const wchar_t *__restrict __format, ...)
     throw () ;
# 678 "/usr/include/wchar.h" 3 4









extern int vfwscanf (__FILE *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (__const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (__const wchar_t *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 734 "/usr/include/wchar.h" 3 4









extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (__const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 799 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 825 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 835 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (__const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   __const wchar_t *__restrict __format,
   __const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     __const wchar_t *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 889 "/usr/include/wchar.h" 3 4
}
# 48 "/usr/include/c++/4.4/cwchar" 2 3
# 65 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::mbstate_t;

}
# 139 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 234 "/usr/include/c++/4.4/cwchar" 3
}







namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {






  using ::wcstold;
# 258 "/usr/include/c++/4.4/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;


}

namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;

}
# 43 "/usr/include/c++/4.4/bits/postypes.h" 2 3
# 70 "/usr/include/c++/4.4/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 88 "/usr/include/c++/4.4/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/4.4/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/4.4/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/4.4/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 239 "/usr/include/c++/4.4/bits/postypes.h" 3
}
# 43 "/usr/include/c++/4.4/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  class ios_base;
# 127 "/usr/include/c++/4.4/iosfwd" 3
  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;


  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;



}
# 40 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/exception" 1 3
# 35 "/usr/include/c++/4.4/exception" 3
#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 59 "/usr/include/c++/4.4/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 115 "/usr/include/c++/4.4/exception" 3
  bool uncaught_exception() throw();


}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 138 "/usr/include/c++/4.4/exception" 3
  void __verbose_terminate_handler();

}

}

#pragma GCC visibility pop
# 41 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/bits/char_traits.h" 1 3
# 39 "/usr/include/c++/4.4/bits/char_traits.h" 3
       
# 40 "/usr/include/c++/4.4/bits/char_traits.h" 3

# 1 "/usr/include/c++/4.4/bits/stl_algobase.h" 1 3
# 61 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 62 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/functexcept.h" 1 3
# 37 "/usr/include/c++/4.4/bits/functexcept.h" 3
# 1 "/usr/include/c++/4.4/exception_defines.h" 1 3
# 38 "/usr/include/c++/4.4/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {


  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

}
# 63 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3


# 1 "/usr/include/c++/4.4/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/4.4/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 52 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 97 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 3010 / 10000);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };

}
# 66 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_pair.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_pair.h" 3
# 1 "/usr/include/c++/4.4/bits/move.h" 1 3
# 34 "/usr/include/c++/4.4/bits/move.h" 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 35 "/usr/include/c++/4.4/bits/move.h" 2 3
# 1 "/usr/include/c++/4.4/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/4.4/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/4.4/bits/concept_check.h" 3
# 36 "/usr/include/c++/4.4/bits/move.h" 2 3
# 66 "/usr/include/c++/4.4/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {







  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {

     

      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }

}
# 61 "/usr/include/c++/4.4/bits/stl_pair.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {


  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 98 "/usr/include/c++/4.4/bits/stl_pair.h" 3
      template<class _U1, class _U2>
        pair(const pair<_U1, _U2>& __p)
 : first(__p.first),
   second(__p.second) { }
# 141 "/usr/include/c++/4.4/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 213 "/usr/include/c++/4.4/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }
# 259 "/usr/include/c++/4.4/bits/stl_pair.h" 3
}
# 67 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 1 3
# 63 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
       
# 64 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 67 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 79 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };

  struct output_iterator_tag { };

  struct forward_iterator_tag : public input_iterator_tag { };


  struct bidirectional_iterator_tag : public forward_iterator_tag { };


  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 102 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };







  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };

  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }



}
# 68 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
       
# 64 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3


namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }
# 108 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 166 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 195 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
}
# 69 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_iterator.h" 1 3
# 68 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 89 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

    public:
      typedef _Iterator iterator_type;
      typedef typename iterator_traits<_Iterator>::difference_type
              difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

    public:






      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 276 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 388 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 414 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 431 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 457 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 472 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 497 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 514 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 540 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 559 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 601 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 620 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 646 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }

}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 665 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

    public:
      typedef _Iterator iterator_type;
      typedef typename iterator_traits<_Iterator>::iterator_category
                                                             iterator_category;
      typedef typename iterator_traits<_Iterator>::value_type value_type;
      typedef typename iterator_traits<_Iterator>::difference_type
                                                             difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 763 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }

}
# 70 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/4.4/debug/debug.h" 1 3
# 47 "/usr/include/c++/4.4/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 72 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {




  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 115 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;


     

     

     

     


      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 156 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 184 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 207 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 230 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }




  template<typename _Iterator,
    bool _IsNormal = __is_normal_iterator<_Iterator>::__value>
    struct __niter_base
    {
      static _Iterator
      __b(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct __niter_base<_Iterator, true>
    {
      static typename _Iterator::iterator_type
      __b(_Iterator __it)
      { return __it.base(); }
    };


  template<typename _Iterator,
    bool _IsMove = __is_move_iterator<_Iterator>::__value>
    struct __miter_base
    {
      static _Iterator
      __b(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct __miter_base<_Iterator, true>
    {
      static typename _Iterator::iterator_type
      __b(_Iterator __it)
      { return __it.base(); }
    };







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 333 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 371 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   __builtin_memmove(__result, __first,
       sizeof(_Tp) * (__last - __first));
   return __result + (__last - __first);
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>
   (std::__niter_base<_II>::__b(__first),
    std::__niter_base<_II>::__b(__last),
    std::__niter_base<_OI>::__b(__result)));
    }
# 456 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base<_II>::__b(__first),
        std::__miter_base<_II>::__b(__last), __result));
    }
# 509 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 537 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 567 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base<_BI1>::__b(__first),
     std::__niter_base<_BI1>::__b(__last),
     std::__niter_base<_BI2>::__b(__result)));
    }
# 626 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base<_BI1>::__b(__first),
        std::__miter_base<_BI1>::__b(__last), __result));
    }
# 684 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 728 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base<_ForwardIterator>::__b(__first),
      std::__niter_base<_ForwardIterator>::__b(__last), __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 783 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base<_OI>::__b(__first),
     __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

}

namespace std __attribute__ ((__visibility__ ("default"))) {
# 950 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base<_II1>::__b(__first1),
         std::__niter_base<_II1>::__b(__last1),
         std::__niter_base<_II2>::__b(__first2));
    }
# 982 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1013 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux
 (std::__niter_base<_II1>::__b(__first1),
  std::__niter_base<_II1>::__b(__last1),
  std::__niter_base<_II2>::__b(__first2),
  std::__niter_base<_II2>::__b(__last2));
    }
# 1048 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;


     
     
      ;
      ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1088 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1125 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }

}
# 42 "/usr/include/c++/4.4/bits/char_traits.h" 2 3

# 1 "/usr/include/c++/4.4/cwchar" 1 3
# 41 "/usr/include/c++/4.4/cwchar" 3
       
# 42 "/usr/include/c++/4.4/cwchar" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cwchar" 2 3


# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/c++/4.4/cwchar" 2 3
# 44 "/usr/include/c++/4.4/bits/char_traits.h" 2 3
# 52 "/usr/include/c++/4.4/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 64 "/usr/include/c++/4.4/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 89 "/usr/include/c++/4.4/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }

}

namespace std __attribute__ ((__visibility__ ("default"))) {
# 230 "/usr/include/c++/4.4/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };


}
# 42 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/bits/localefwd.h" 1 3
# 39 "/usr/include/c++/4.4/bits/localefwd.h" 3
       
# 40 "/usr/include/c++/4.4/bits/localefwd.h" 3


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 1 3
# 40 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
       
# 41 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3

# 1 "/usr/include/c++/4.4/clocale" 1 3
# 41 "/usr/include/c++/4.4/clocale" 3
       
# 42 "/usr/include/c++/4.4/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 29 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 27 "/usr/include/bits/locale.h" 3 4
enum
{
  __LC_CTYPE = 0,
  __LC_NUMERIC = 1,
  __LC_TIME = 2,
  __LC_COLLATE = 3,
  __LC_MONETARY = 4,
  __LC_MESSAGES = 5,
  __LC_ALL = 6,
  __LC_PAPER = 7,
  __LC_NAME = 8,
  __LC_ADDRESS = 9,
  __LC_TELEPHONE = 10,
  __LC_MEASUREMENT = 11,
  __LC_IDENTIFICATION = 12
};
# 31 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, __const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();


# 152 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, __const char *__locale,
        __locale_t __base) throw ();
# 187 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 45 "/usr/include/c++/4.4/clocale" 2 3
# 53 "/usr/include/c++/4.4/clocale" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::lconv;
  using ::setlocale;
  using ::localeconv;

}
# 43 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 2 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 44 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {

  extern "C" __typeof(uselocale) __uselocale;

}


namespace std __attribute__ ((__visibility__ ("default"))) {

  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 85 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }

}
# 43 "/usr/include/c++/4.4/bits/localefwd.h" 2 3

# 1 "/usr/include/c++/4.4/cctype" 1 3
# 41 "/usr/include/c++/4.4/cctype" 3
       
# 42 "/usr/include/c++/4.4/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 29 "/usr/include/ctype.h" 2 3 4

extern "C" {
# 41 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 42 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 81 "/usr/include/ctype.h" 3 4
extern __const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const));
# 96 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 247 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 323 "/usr/include/ctype.h" 3 4
}
# 45 "/usr/include/c++/4.4/cctype" 2 3
# 64 "/usr/include/c++/4.4/cctype" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;

}
# 45 "/usr/include/c++/4.4/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {


  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;

}
# 43 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/bits/ios_base.h" 1 3
# 39 "/usr/include/c++/4.4/bits/ios_base.h" 3
       
# 40 "/usr/include/c++/4.4/bits/ios_base.h" 3

# 1 "/usr/include/c++/4.4/ext/atomicity.h" 1 3
# 34 "/usr/include/c++/4.4/ext/atomicity.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 1 3
# 30 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 162 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 1 3
# 41 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 25 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 30 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 31 "/usr/include/sched.h" 2 3 4



# 1 "/usr/include/time.h" 1 3 4
# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 35 "/usr/include/sched.h" 2 3 4


typedef __pid_t pid_t;





# 1 "/usr/include/bits/sched.h" 1 3 4
# 74 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


}







struct __sched_param
  {
    int __sched_priority;
  };
# 116 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 199 "/usr/include/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 44 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         __const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 26 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 43 "/usr/include/time.h" 2 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 27 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 29 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 30 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 31 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 147 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 182 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 220 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     __const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ();







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (__const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, __const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 478 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 490 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 524 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 726 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        __const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 790 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (__const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (__const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 872 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 984 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1028 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1095 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1129 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1143 "/usr/include/pthread.h" 3 4
}
# 42 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4
extern "C" {
# 203 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 204 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/environments.h" 2 3 4
# 208 "/usr/include/unistd.h" 2 3 4
# 221 "/usr/include/unistd.h" 3 4
typedef __ssize_t ssize_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 228 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __useconds_t useconds_t;
# 268 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 331 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 342 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 373 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 401 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 429 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 441 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 466 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 508 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (__const char *__file, char *__const __argv[],
      char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 607 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();




extern __pid_t getpgrp (void) throw ();
# 643 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 669 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();
# 686 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw ();




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();




extern int seteuid (__uid_t __uid) throw ();






extern int setgid (__gid_t __gid) throw ();




extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();




extern int setegid (__gid_t __gid) throw ();





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 890 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 50 "/usr/include/getopt.h" 3 4
extern "C" {
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 187 "/usr/include/getopt.h" 3 4
}
# 891 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 976 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 1007 "/usr/include/unistd.h" 3 4
extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1036 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1047 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1068 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1091 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1101 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1122 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__libc_block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) throw ();
# 1160 "/usr/include/unistd.h" 3 4
}
# 43 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));
static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));
static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 237 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;
  return __gthread_active_ptr != 0;
}
# 675 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 818 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 163 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/usr/include/c++/4.4/ext/atomicity.h" 2 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/usr/include/c++/4.4/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {






  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 61 "/usr/include/c++/4.4/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }

}
# 42 "/usr/include/c++/4.4/bits/ios_base.h" 2 3

# 1 "/usr/include/c++/4.4/bits/locale_classes.h" 1 3
# 39 "/usr/include/c++/4.4/bits/locale_classes.h" 3
       
# 40 "/usr/include/c++/4.4/bits/locale_classes.h" 3


# 1 "/usr/include/c++/4.4/string" 1 3
# 38 "/usr/include/c++/4.4/string" 3
       
# 39 "/usr/include/c++/4.4/string" 3




# 1 "/usr/include/c++/4.4/bits/allocator.h" 1 3
# 48 "/usr/include/c++/4.4/bits/allocator.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++allocator.h" 3
# 1 "/usr/include/c++/4.4/ext/new_allocator.h" 1 3
# 33 "/usr/include/c++/4.4/ext/new_allocator.h" 3
# 1 "/usr/include/c++/4.4/new" 1 3
# 39 "/usr/include/c++/4.4/new" 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 40 "/usr/include/c++/4.4/new" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 91 "/usr/include/c++/4.4/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 34 "/usr/include/c++/4.4/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {

  using std::size_t;
  using std::ptrdiff_t;
# 50 "/usr/include/c++/4.4/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return &__x; }

      const_pointer
      address(const_reference __x) const { return &__x; }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__builtin_expect(__n > this->max_size(), false))
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 114 "/usr/include/c++/4.4/ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }

}
# 35 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++allocator.h" 2 3
# 49 "/usr/include/c++/4.4/bits/allocator.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 59 "/usr/include/c++/4.4/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 85 "/usr/include/c++/4.4/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }





  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };

}
# 44 "/usr/include/c++/4.4/string" 2 3


# 1 "/usr/include/c++/4.4/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/4.4/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/4.4/cxxabi-forced.h" 1 3
# 29 "/usr/include/c++/4.4/cxxabi-forced.h" 3
#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();
    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/4.4/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }





  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);



}
# 47 "/usr/include/c++/4.4/string" 2 3



# 1 "/usr/include/c++/4.4/bits/stl_function.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 99 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {
      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {
      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;
      typedef _Result result_type;
    };
# 134 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 198 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 262 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 345 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 416 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 523 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }



}


# 1 "/usr/include/c++/4.4/backward/binders.h" 1 3
# 60 "/usr/include/c++/4.4/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 96 "/usr/include/c++/4.4/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }


}
# 713 "/usr/include/c++/4.4/bits/stl_function.h" 2 3
# 51 "/usr/include/c++/4.4/string" 2 3


# 1 "/usr/include/c++/4.4/bits/basic_string.h" 1 3
# 39 "/usr/include/c++/4.4/bits/basic_string.h" 3
       
# 40 "/usr/include/c++/4.4/bits/basic_string.h" 3



# 1 "/usr/include/c++/4.4/initializer_list" 1 3
# 44 "/usr/include/c++/4.4/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 103 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 140 "/usr/include/c++/4.4/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 165 "/usr/include/c++/4.4/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
             -1) <= 0)
       _M_destroy(__a);
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      inline
      basic_string();




      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 464 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 495 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 528 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 553 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }

    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 652 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 665 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }





      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 694 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }




      bool
      empty() const
      { return this->size() == 0; }
# 722 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
 ;
 return _M_data()[__pos];
      }
# 739 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

 ;

 ;
 _M_leak();
 return _M_data()[__pos];
      }
# 760 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 779 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 835 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 850 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
 ;
 return this->append(__s, traits_type::length(__s));
      }
# 882 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 904 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 943 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 959 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 971 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return this->assign(__s, traits_type::length(__s));
      }
# 987 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 999 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1027 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1042 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1070 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1092 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1115 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1133 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1156 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1173 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1197 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1213 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {
 ;

 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1233 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1252 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1274 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1298 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1317 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1340 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1358 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1376 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {
 ;

 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1397 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1418 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {
 ;

 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1440 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
   ;

   ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1515 "/usr/include/c++/4.4/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct(static_cast<size_type>(__beg), __end, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1591 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1601 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1611 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1643 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1656 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1670 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1687 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1700 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1715 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1728 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1745 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1758 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1773 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1786 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1805 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1819 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1834 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1847 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 1866 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 1880 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 1895 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 1909 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 1926 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 1939 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 1955 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 1968 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 1985 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2000 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2018 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2048 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2072 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2090 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2113 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2138 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>::
    basic_string()

    : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
# 2159 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2230 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2276 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2313 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2350 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2387 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2424 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2461 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2478 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2496 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2519 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2536 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);


}
# 54 "/usr/include/c++/4.4/string" 2 3


# 1 "/usr/include/c++/4.4/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/4.4/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__builtin_expect(__gnu_cxx::__is_null_pointer(__beg)
        && __beg != __end, 0))
   __throw_logic_error(("basic_string::_S_construct NULL not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 241 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
      ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
      ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
       ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {
       ;





       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
       ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 578 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }





  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);



}
# 57 "/usr/include/c++/4.4/string" 2 3
# 43 "/usr/include/c++/4.4/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {
# 61 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 97 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 116 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale() throw();
# 125 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 135 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 150 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 163 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 175 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 189 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 204 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 223 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw ();







    bool
    operator!=(const locale& __other) const throw ()
    { return !(this->operator==(__other)); }
# 251 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 267 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 302 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 335 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 366 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc);

    static void
    _S_destroy_c_locale(__c_locale& __cloc);



    static __c_locale
    _S_get_c_locale();

    static const char*
    _S_get_c_name();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 426 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw ();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const;
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 569 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 586 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 603 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 630 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 644 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 661 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 680 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 694 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const;

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const;

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 723 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 739 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 752 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const;

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const;


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };

}


# 1 "/usr/include/c++/4.4/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }





  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);



}
# 810 "/usr/include/c++/4.4/bits/locale_classes.h" 2 3
# 44 "/usr/include/c++/4.4/bits/ios_base.h" 2 3
# 54 "/usr/include/c++/4.4/bits/ios_base.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {





  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 207 "/usr/include/c++/4.4/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 263 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 338 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 369 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 401 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 427 "/usr/include/c++/4.4/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 444 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 456 "/usr/include/c++/4.4/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:




    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;




    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      { return __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1); }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void);


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 565 "/usr/include/c++/4.4/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 581 "/usr/include/c++/4.4/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 598 "/usr/include/c++/4.4/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 624 "/usr/include/c++/4.4/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 675 "/usr/include/c++/4.4/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 687 "/usr/include/c++/4.4/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc);
# 698 "/usr/include/c++/4.4/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 709 "/usr/include/c++/4.4/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 728 "/usr/include/c++/4.4/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 744 "/usr/include/c++/4.4/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 765 "/usr/include/c++/4.4/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 782 "/usr/include/c++/4.4/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }

}
# 44 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/streambuf" 1 3
# 37 "/usr/include/c++/4.4/streambuf" 3
       
# 38 "/usr/include/c++/4.4/streambuf" 3
# 46 "/usr/include/c++/4.4/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 113 "/usr/include/c++/4.4/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 179 "/usr/include/c++/4.4/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 203 "/usr/include/c++/4.4/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 220 "/usr/include/c++/4.4/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 233 "/usr/include/c++/4.4/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 260 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 274 "/usr/include/c++/4.4/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 292 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 314 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 333 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 347 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 372 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 399 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 425 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 439 "/usr/include/c++/4.4/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 457 "/usr/include/c++/4.4/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 473 "/usr/include/c++/4.4/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 484 "/usr/include/c++/4.4/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 504 "/usr/include/c++/4.4/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 520 "/usr/include/c++/4.4/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 530 "/usr/include/c++/4.4/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 551 "/usr/include/c++/4.4/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 566 "/usr/include/c++/4.4/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 577 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 589 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 602 "/usr/include/c++/4.4/streambuf" 3
      virtual int
      sync() { return 0; }
# 624 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 640 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 662 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 675 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 699 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 717 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 742 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 757 "/usr/include/c++/4.4/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }


    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);


}


# 1 "/usr/include/c++/4.4/bits/streambuf.tcc" 1 3
# 38 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
       
# 39 "/usr/include/c++/4.4/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }





  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);



}
# 797 "/usr/include/c++/4.4/streambuf" 2 3
# 45 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/bits/basic_ios.h" 1 3
# 35 "/usr/include/c++/4.4/bits/basic_ios.h" 3
       
# 36 "/usr/include/c++/4.4/bits/basic_ios.h" 3



# 1 "/usr/include/c++/4.4/bits/locale_facets.h" 1 3
# 39 "/usr/include/c++/4.4/bits/locale_facets.h" 3
       
# 40 "/usr/include/c++/4.4/bits/locale_facets.h" 3

# 1 "/usr/include/c++/4.4/cwctype" 1 3
# 41 "/usr/include/c++/4.4/cwctype" 3
       
# 42 "/usr/include/c++/4.4/cwctype" 3




# 1 "/usr/include/wctype.h" 1 3 4
# 34 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 35 "/usr/include/wctype.h" 2 3 4
# 50 "/usr/include/wctype.h" 3 4



typedef unsigned long int wctype_t;

# 72 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {








extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 172 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (__const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();










typedef __const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 214 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (__const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();








extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (__const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (__const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 47 "/usr/include/c++/4.4/cwctype" 2 3
# 76 "/usr/include/c++/4.4/cwctype" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;

}
# 42 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.4/cctype" 1 3
# 41 "/usr/include/c++/4.4/cctype" 3
       
# 42 "/usr/include/c++/4.4/cctype" 3
# 43 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 1 3
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {


  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };

}
# 44 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 1 3
# 35 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
       
# 36 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default"))) {



  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {
 ;


 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {
 ;



 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }

}
# 51 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 64 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _Tv>
    void
    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err,
     const __c_locale& __cloc);


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&);

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&);

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&);



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 143 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 462 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 495 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 535 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 557 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 581 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 604 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1021 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1054 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1149 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const;


      virtual
      ~ctype();
# 1242 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1331 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1364 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1406 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1429 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1455 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


}


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }

}
# 1511 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {


  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod);
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false),
      _M_truename(__null), _M_truename_size(0), _M_falsename(__null),
      _M_falsename_size(0), _M_decimal_point(_CharT()),
      _M_thousands_sep(_CharT()), _M_allocated(false)
      { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1635 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0) : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(); }
# 1672 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1686 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(__cloc); }
# 1700 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1713 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1744 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1757 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1770 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1787 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1799 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1812 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1825 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1838 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = __null);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };


# 1907 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1928 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1954 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1990 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2049 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2162 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2227 "/usr/include/c++/4.4/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2244 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2265 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2283 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2325 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2388 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2413 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2461 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }

}


# 1 "/usr/include/c++/4.4/bits/locale_facets.tcc" 1 3
# 35 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
       
# 36 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {



  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      _M_grouping_size = __np.grouping().size();
      char* __grouping = new char[_M_grouping_size];
      __np.grouping().copy(__grouping, _M_grouping_size);
      _M_grouping = __grouping;
      _M_use_grouping = (_M_grouping_size
    && static_cast<signed char>(_M_grouping[0]) > 0
    && (_M_grouping[0]
        != __gnu_cxx::__numeric_traits<char>::__max));

      _M_truename_size = __np.truename().size();
      _CharT* __truename = new _CharT[_M_truename_size];
      __np.truename().copy(__truename, _M_truename_size);
      _M_truename = __truename;

      _M_falsename_size = __np.falsename().size();
      _CharT* __falsename = new _CharT[_M_falsename_size];
      __np.falsename().copy(__falsename, _M_falsename_size);
      _M_falsename = __falsename;

      _M_decimal_point = __np.decimal_point();
      _M_thousands_sep = __np.thousands_sep();

      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
      __ct.widen(__num_base::_S_atoms_out,
   __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);
      __ct.widen(__num_base::_S_atoms_in,
   __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);
    }
# 121 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp);



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 715 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 951 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1012 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1137 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1174 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }





  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);



}
# 2600 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3
# 40 "/usr/include/c++/4.4/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 61 "/usr/include/c++/4.4/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 126 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 137 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 190 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 211 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 246 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 284 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 296 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 336 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 350 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 379 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 399 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 419 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 438 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };

}


# 1 "/usr/include/c++/4.4/bits/basic_ios.tcc" 1 3
# 34 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
       
# 35 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 145 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }





  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;



}
# 472 "/usr/include/c++/4.4/bits/basic_ios.h" 2 3
# 46 "/usr/include/c++/4.4/ios" 2 3
# 41 "/usr/include/c++/4.4/istream" 2 3
# 1 "/usr/include/c++/4.4/ostream" 1 3
# 38 "/usr/include/c++/4.4/ostream" 3
       
# 39 "/usr/include/c++/4.4/ostream" 3




namespace std __attribute__ ((__visibility__ ("default"))) {
# 54 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 81 "/usr/include/c++/4.4/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 164 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 249 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 282 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 310 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 323 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      flush();
# 334 "/usr/include/c++/4.4/ostream" 3
      pos_type
      tellp();
# 345 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 357 "/usr/include/c++/4.4/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 376 "/usr/include/c++/4.4/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 395 "/usr/include/c++/4.4/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 405 "/usr/include/c++/4.4/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 423 "/usr/include/c++/4.4/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 444 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 486 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 536 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }

}


# 1 "/usr/include/c++/4.4/bits/ostream.tcc" 1 3
# 39 "/usr/include/c++/4.4/bits/ostream.tcc" 3
       
# 40 "/usr/include/c++/4.4/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }





  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);



}
# 566 "/usr/include/c++/4.4/ostream" 2 3
# 42 "/usr/include/c++/4.4/istream" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 54 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 90 "/usr/include/c++/4.4/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 118 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 165 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 237 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 247 "/usr/include/c++/4.4/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 279 "/usr/include/c++/4.4/istream" 3
      int_type
      get();
# 293 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(char_type& __c);
# 320 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 331 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 354 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 364 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 393 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 404 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 428 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 445 "/usr/include/c++/4.4/istream" 3
      int_type
      peek();
# 463 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 482 "/usr/include/c++/4.4/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 498 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      putback(char_type __c);
# 513 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      unget();
# 531 "/usr/include/c++/4.4/istream" 3
      int
      sync();
# 545 "/usr/include/c++/4.4/istream" 3
      pos_type
      tellg();
# 560 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      seekg(pos_type);
# 576 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 631 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {
    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 663 "/usr/include/c++/4.4/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 673 "/usr/include/c++/4.4/istream" 3
      operator bool() const
      { return _M_ok; }

    private:
      bool _M_ok;
    };
# 693 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 734 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 762 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 823 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);

}


# 1 "/usr/include/c++/4.4/bits/istream.tcc" 1 3
# 39 "/usr/include/c++/4.4/bits/istream.tcc" 3
       
# 40 "/usr/include/c++/4.4/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      long __l;
      _M_extract(__l);
      if (!this->fail())
 {
   if (__gnu_cxx::__numeric_traits<short>::__min <= __l
       && __l <= __gnu_cxx::__numeric_traits<short>::__max)
     __n = short(__l);
   else
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      long __l;
      _M_extract(__l);
      if (!this->fail())
 {
   if (__gnu_cxx::__numeric_traits<int>::__min <= __l
       && __l <= __gnu_cxx::__numeric_traits<int>::__max)
     __n = int(__l);
   else
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 463 "/usr/include/c++/4.4/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
           ios_base::in);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {


      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {


      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }





  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;



}
# 831 "/usr/include/c++/4.4/istream" 2 3
# 40 "/usr/include/c++/4.4/sstream" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {
# 57 "/usr/include/c++/4.4/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 91 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 104 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }
# 119 "/usr/include/c++/4.4/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 143 "/usr/include/c++/4.4/sstream" 3
      void
      str(const __string_type& __s)
      {

 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 195 "/usr/include/c++/4.4/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }
    };
# 255 "/usr/include/c++/4.4/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 291 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 309 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }
# 331 "/usr/include/c++/4.4/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 365 "/usr/include/c++/4.4/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 401 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 419 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }
# 441 "/usr/include/c++/4.4/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 475 "/usr/include/c++/4.4/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 509 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 525 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }
# 547 "/usr/include/c++/4.4/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };

}


# 1 "/usr/include/c++/4.4/bits/sstream.tcc" 1 3
# 39 "/usr/include/c++/4.4/bits/sstream.tcc" 3
       
# 40 "/usr/include/c++/4.4/bits/sstream.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();
      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 110 "/usr/include/c++/4.4/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->gbump((__beg + __newoffi) - this->gptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       this->pbump((__beg + __newoffo) - this->pptr());
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->gbump((__beg + __pos) - this->gptr());
       if (__testout)
                this->pbump((__beg + __pos) - this->pptr());
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   this->setp(__base, __endp);
   this->pbump(__o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }





  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;



}
# 574 "/usr/include/c++/4.4/sstream" 2 3
# 48 "/usr/include/c++/4.4/complex" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 60 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp> class complex;
  template<> class complex<float>;
  template<> class complex<double>;
  template<> class complex<long double>;


  template<typename _Tp> _Tp abs(const complex<_Tp>&);

  template<typename _Tp> _Tp arg(const complex<_Tp>&);

  template<typename _Tp> _Tp norm(const complex<_Tp>&);


  template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp& = 0);



  template<typename _Tp> complex<_Tp> cos(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> cosh(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> exp(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);



  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);


  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);

  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&,
                                          const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> pow(const _Tp&, const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sin(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sinh(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> sqrt(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);

  template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);
# 121 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    struct complex
    {

      typedef _Tp value_type;



      complex(const _Tp& __r = _Tp(), const _Tp& __i = _Tp())
      : _M_real(__r), _M_imag(__i) { }




      template<typename _Up>
        complex(const complex<_Up>& __z)
 : _M_real(__z.real()), _M_imag(__z.imag()) { }
# 149 "/usr/include/c++/4.4/complex" 3
      _Tp& real()
      { return _M_real; }


      const _Tp& real() const
      { return _M_real; }


      _Tp& imag()
      { return _M_imag; }


      const _Tp& imag() const
      { return _M_imag; }




      void real(_Tp __val)
      { _M_real = __val; }

      void imag(_Tp __val)
      { _M_imag = __val; }


      complex<_Tp>& operator=(const _Tp&);



      complex<_Tp>&
      operator+=(const _Tp& __t)
      {
 _M_real += __t;
 return *this;
      }



      complex<_Tp>&
      operator-=(const _Tp& __t)
      {
 _M_real -= __t;
 return *this;
      }


      complex<_Tp>& operator*=(const _Tp&);

      complex<_Tp>& operator/=(const _Tp&);





      template<typename _Up>
        complex<_Tp>& operator=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator+=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator-=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator*=(const complex<_Up>&);

      template<typename _Up>
        complex<_Tp>& operator/=(const complex<_Up>&);

      const complex& __rep() const
      { return *this; }

    private:
      _Tp _M_real;
      _Tp _M_imag;
    };

  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator=(const _Tp& __t)
    {
     _M_real = __t;
     _M_imag = _Tp();
     return *this;
    }


  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator*=(const _Tp& __t)
    {
      _M_real *= __t;
      _M_imag *= __t;
      return *this;
    }


  template<typename _Tp>
    complex<_Tp>&
    complex<_Tp>::operator/=(const _Tp& __t)
    {
      _M_real /= __t;
      _M_imag /= __t;
      return *this;
    }

  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator=(const complex<_Up>& __z)
    {
      _M_real = __z.real();
      _M_imag = __z.imag();
      return *this;
    }


  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator+=(const complex<_Up>& __z)
    {
      _M_real += __z.real();
      _M_imag += __z.imag();
      return *this;
    }


  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator-=(const complex<_Up>& __z)
    {
      _M_real -= __z.real();
      _M_imag -= __z.imag();
      return *this;
    }



  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator*=(const complex<_Up>& __z)
    {
      const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
      _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
      _M_real = __r;
      return *this;
    }



  template<typename _Tp>
    template<typename _Up>
    complex<_Tp>&
    complex<_Tp>::operator/=(const complex<_Up>& __z)
    {
      const _Tp __r = _M_real * __z.real() + _M_imag * __z.imag();
      const _Tp __n = std::norm(__z);
      _M_imag = (_M_imag * __z.real() - _M_real * __z.imag()) / __n;
      _M_real = __r / __n;
      return *this;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r += __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r += __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator+(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __y;
      __r += __x;
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r -= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r -= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator-(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r(__x, -__y.imag());
      __r -= __y.real();
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r *= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator*(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r *= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator*(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __y;
      __r *= __x;
      return __r;
    }




  template<typename _Tp>
    inline complex<_Tp>
    operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator/(const complex<_Tp>& __x, const _Tp& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }

  template<typename _Tp>
    inline complex<_Tp>
    operator/(const _Tp& __x, const complex<_Tp>& __y)
    {
      complex<_Tp> __r = __x;
      __r /= __y;
      return __r;
    }



  template<typename _Tp>
    inline complex<_Tp>
    operator+(const complex<_Tp>& __x)
    { return __x; }


  template<typename _Tp>
    inline complex<_Tp>
    operator-(const complex<_Tp>& __x)
    { return complex<_Tp>(-__x.real(), -__x.imag()); }



  template<typename _Tp>
    inline bool
    operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x.real() == __y.real() && __x.imag() == __y.imag(); }

  template<typename _Tp>
    inline bool
    operator==(const complex<_Tp>& __x, const _Tp& __y)
    { return __x.real() == __y && __x.imag() == _Tp(); }

  template<typename _Tp>
    inline bool
    operator==(const _Tp& __x, const complex<_Tp>& __y)
    { return __x == __y.real() && _Tp() == __y.imag(); }




  template<typename _Tp>
    inline bool
    operator!=(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x.real() != __y.real() || __x.imag() != __y.imag(); }

  template<typename _Tp>
    inline bool
    operator!=(const complex<_Tp>& __x, const _Tp& __y)
    { return __x.real() != __y || __x.imag() != _Tp(); }

  template<typename _Tp>
    inline bool
    operator!=(const _Tp& __x, const complex<_Tp>& __y)
    { return __x != __y.real() || _Tp() != __y.imag(); }



  template<typename _Tp, typename _CharT, class _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)
    {
      _Tp __re_x, __im_x;
      _CharT __ch;
      __is >> __ch;
      if (__ch == '(')
 {
   __is >> __re_x >> __ch;
   if (__ch == ',')
     {
       __is >> __im_x >> __ch;
       if (__ch == ')')
  __x = complex<_Tp>(__re_x, __im_x);
       else
  __is.setstate(ios_base::failbit);
     }
   else if (__ch == ')')
     __x = __re_x;
   else
     __is.setstate(ios_base::failbit);
 }
      else
 {
   __is.putback(__ch);
   __is >> __re_x;
   __x = __re_x;
 }
      return __is;
    }


  template<typename _Tp, typename _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)
    {
      basic_ostringstream<_CharT, _Traits> __s;
      __s.flags(__os.flags());
      __s.imbue(__os.getloc());
      __s.precision(__os.precision());
      __s << '(' << __x.real() << ',' << __x.imag() << ')';
      return __os << __s.str();
    }
# 541 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    inline _Tp&
    real(complex<_Tp>& __z)
    { return __z.real(); }

  template<typename _Tp>
    inline const _Tp&
    real(const complex<_Tp>& __z)
    { return __z.real(); }

  template<typename _Tp>
    inline _Tp&
    imag(complex<_Tp>& __z)
    { return __z.imag(); }

  template<typename _Tp>
    inline const _Tp&
    imag(const complex<_Tp>& __z)
    { return __z.imag(); }



  template<typename _Tp>
    inline _Tp
    __complex_abs(const complex<_Tp>& __z)
    {
      _Tp __x = __z.real();
      _Tp __y = __z.imag();
      const _Tp __s = std::max(abs(__x), abs(__y));
      if (__s == _Tp())
        return __s;
      __x /= __s;
      __y /= __s;
      return __s * sqrt(__x * __x + __y * __y);
    }


  inline float
  __complex_abs(__complex__ float __z) { return __builtin_cabsf(__z); }

  inline double
  __complex_abs(__complex__ double __z) { return __builtin_cabs(__z); }

  inline long double
  __complex_abs(const __complex__ long double& __z)
  { return __builtin_cabsl(__z); }

  template<typename _Tp>
    inline _Tp
    abs(const complex<_Tp>& __z) { return __complex_abs(__z.__rep()); }
# 599 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    inline _Tp
    __complex_arg(const complex<_Tp>& __z)
    { return atan2(__z.imag(), __z.real()); }


  inline float
  __complex_arg(__complex__ float __z) { return __builtin_cargf(__z); }

  inline double
  __complex_arg(__complex__ double __z) { return __builtin_carg(__z); }

  inline long double
  __complex_arg(const __complex__ long double& __z)
  { return __builtin_cargl(__z); }

  template<typename _Tp>
    inline _Tp
    arg(const complex<_Tp>& __z) { return __complex_arg(__z.__rep()); }
# 629 "/usr/include/c++/4.4/complex" 3
  template<bool>
    struct _Norm_helper
    {
      template<typename _Tp>
        static inline _Tp _S_do_it(const complex<_Tp>& __z)
        {
          const _Tp __x = __z.real();
          const _Tp __y = __z.imag();
          return __x * __x + __y * __y;
        }
    };

  template<>
    struct _Norm_helper<true>
    {
      template<typename _Tp>
        static inline _Tp _S_do_it(const complex<_Tp>& __z)
        {
          _Tp __res = std::abs(__z);
          return __res * __res;
        }
    };

  template<typename _Tp>
    inline _Tp
    norm(const complex<_Tp>& __z)
    {
      return _Norm_helper<__is_floating<_Tp>::__value
 && !0>::_S_do_it(__z);
    }

  template<typename _Tp>
    inline complex<_Tp>
    polar(const _Tp& __rho, const _Tp& __theta)
    { return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta)); }

  template<typename _Tp>
    inline complex<_Tp>
    conj(const complex<_Tp>& __z)
    { return complex<_Tp>(__z.real(), -__z.imag()); }




  template<typename _Tp>
    inline complex<_Tp>
    __complex_cos(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));
    }


  inline __complex__ float
  __complex_cos(__complex__ float __z) { return __builtin_ccosf(__z); }

  inline __complex__ double
  __complex_cos(__complex__ double __z) { return __builtin_ccos(__z); }

  inline __complex__ long double
  __complex_cos(const __complex__ long double& __z)
  { return __builtin_ccosl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    cos(const complex<_Tp>& __z) { return __complex_cos(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_cosh(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));
    }


  inline __complex__ float
  __complex_cosh(__complex__ float __z) { return __builtin_ccoshf(__z); }

  inline __complex__ double
  __complex_cosh(__complex__ double __z) { return __builtin_ccosh(__z); }

  inline __complex__ long double
  __complex_cosh(const __complex__ long double& __z)
  { return __builtin_ccoshl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    cosh(const complex<_Tp>& __z) { return __complex_cosh(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_exp(const complex<_Tp>& __z)
    { return std::polar(exp(__z.real()), __z.imag()); }


  inline __complex__ float
  __complex_exp(__complex__ float __z) { return __builtin_cexpf(__z); }

  inline __complex__ double
  __complex_exp(__complex__ double __z) { return __builtin_cexp(__z); }

  inline __complex__ long double
  __complex_exp(const __complex__ long double& __z)
  { return __builtin_cexpl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    exp(const complex<_Tp>& __z) { return __complex_exp(__z.__rep()); }
# 760 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_log(const complex<_Tp>& __z)
    { return complex<_Tp>(log(std::abs(__z)), std::arg(__z)); }


  inline __complex__ float
  __complex_log(__complex__ float __z) { return __builtin_clogf(__z); }

  inline __complex__ double
  __complex_log(__complex__ double __z) { return __builtin_clog(__z); }

  inline __complex__ long double
  __complex_log(const __complex__ long double& __z)
  { return __builtin_clogl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    log(const complex<_Tp>& __z) { return __complex_log(__z.__rep()); }






  template<typename _Tp>
    inline complex<_Tp>
    log10(const complex<_Tp>& __z)
    { return std::log(__z) / log(_Tp(10.0)); }


  template<typename _Tp>
    inline complex<_Tp>
    __complex_sin(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y));
    }


  inline __complex__ float
  __complex_sin(__complex__ float __z) { return __builtin_csinf(__z); }

  inline __complex__ double
  __complex_sin(__complex__ double __z) { return __builtin_csin(__z); }

  inline __complex__ long double
  __complex_sin(const __complex__ long double& __z)
  { return __builtin_csinl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sin(const complex<_Tp>& __z) { return __complex_sin(__z.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    __complex_sinh(const complex<_Tp>& __z)
    {
      const _Tp __x = __z.real();
      const _Tp __y = __z.imag();
      return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));
    }


  inline __complex__ float
  __complex_sinh(__complex__ float __z) { return __builtin_csinhf(__z); }

  inline __complex__ double
  __complex_sinh(__complex__ double __z) { return __builtin_csinh(__z); }

  inline __complex__ long double
  __complex_sinh(const __complex__ long double& __z)
  { return __builtin_csinhl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sinh(const complex<_Tp>& __z) { return __complex_sinh(__z.__rep()); }
# 852 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    complex<_Tp>
    __complex_sqrt(const complex<_Tp>& __z)
    {
      _Tp __x = __z.real();
      _Tp __y = __z.imag();

      if (__x == _Tp())
        {
          _Tp __t = sqrt(abs(__y) / 2);
          return complex<_Tp>(__t, __y < _Tp() ? -__t : __t);
        }
      else
        {
          _Tp __t = sqrt(2 * (std::abs(__z) + abs(__x)));
          _Tp __u = __t / 2;
          return __x > _Tp()
            ? complex<_Tp>(__u, __y / __t)
            : complex<_Tp>(abs(__y) / __t, __y < _Tp() ? -__u : __u);
        }
    }


  inline __complex__ float
  __complex_sqrt(__complex__ float __z) { return __builtin_csqrtf(__z); }

  inline __complex__ double
  __complex_sqrt(__complex__ double __z) { return __builtin_csqrt(__z); }

  inline __complex__ long double
  __complex_sqrt(const __complex__ long double& __z)
  { return __builtin_csqrtl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    sqrt(const complex<_Tp>& __z) { return __complex_sqrt(__z.__rep()); }
# 896 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_tan(const complex<_Tp>& __z)
    { return std::sin(__z) / std::cos(__z); }


  inline __complex__ float
  __complex_tan(__complex__ float __z) { return __builtin_ctanf(__z); }

  inline __complex__ double
  __complex_tan(__complex__ double __z) { return __builtin_ctan(__z); }

  inline __complex__ long double
  __complex_tan(const __complex__ long double& __z)
  { return __builtin_ctanl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    tan(const complex<_Tp>& __z) { return __complex_tan(__z.__rep()); }
# 924 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    __complex_tanh(const complex<_Tp>& __z)
    { return std::sinh(__z) / std::cosh(__z); }


  inline __complex__ float
  __complex_tanh(__complex__ float __z) { return __builtin_ctanhf(__z); }

  inline __complex__ double
  __complex_tanh(__complex__ double __z) { return __builtin_ctanh(__z); }

  inline __complex__ long double
  __complex_tanh(const __complex__ long double& __z)
  { return __builtin_ctanhl(__z); }

  template<typename _Tp>
    inline complex<_Tp>
    tanh(const complex<_Tp>& __z) { return __complex_tanh(__z.__rep()); }
# 956 "/usr/include/c++/4.4/complex" 3
  template<typename _Tp>
    inline complex<_Tp>
    pow(const complex<_Tp>& __z, int __n)
    { return std::__pow_helper(__z, __n); }


  template<typename _Tp>
    complex<_Tp>
    pow(const complex<_Tp>& __x, const _Tp& __y)
    {




      if (__x.imag() == _Tp() && __x.real() > _Tp())
        return pow(__x.real(), __y);

      complex<_Tp> __t = std::log(__x);
      return std::polar(exp(__y * __t.real()), __y * __t.imag());
    }

  template<typename _Tp>
    inline complex<_Tp>
    __complex_pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __x == _Tp() ? _Tp() : std::exp(__y * std::log(__x)); }


  inline __complex__ float
  __complex_pow(__complex__ float __x, __complex__ float __y)
  { return __builtin_cpowf(__x, __y); }

  inline __complex__ double
  __complex_pow(__complex__ double __x, __complex__ double __y)
  { return __builtin_cpow(__x, __y); }

  inline __complex__ long double
  __complex_pow(const __complex__ long double& __x,
  const __complex__ long double& __y)
  { return __builtin_cpowl(__x, __y); }

  template<typename _Tp>
    inline complex<_Tp>
    pow(const complex<_Tp>& __x, const complex<_Tp>& __y)
    { return __complex_pow(__x.__rep(), __y.__rep()); }







  template<typename _Tp>
    inline complex<_Tp>
    pow(const _Tp& __x, const complex<_Tp>& __y)
    {
      return __x > _Tp() ? std::polar(pow(__x, __y.real()),
          __y.imag() * log(__x))
                  : std::pow(complex<_Tp>(__x), __y);
    }



  template<>
    struct complex<float>
    {
      typedef float value_type;
      typedef __complex__ float _ComplexT;

      complex(_ComplexT __z) : _M_value(__z) { }

      complex(float __r = 0.0f, float __i = 0.0f)
      {
 __real__ _M_value = __r;
 __imag__ _M_value = __i;
      }

      explicit complex(const complex<double>&);
      explicit complex(const complex<long double>&);
# 1044 "/usr/include/c++/4.4/complex" 3
      float& real()
      { return __real__ _M_value; }

      const float& real() const
      { return __real__ _M_value; }

      float& imag()
      { return __imag__ _M_value; }

      const float& imag() const
      { return __imag__ _M_value; }




      void real(float __val)
      { __real__ _M_value = __val; }

      void imag(float __val)
      { __imag__ _M_value = __val; }

      complex<float>&
      operator=(float __f)
      {
 __real__ _M_value = __f;
 __imag__ _M_value = 0.0f;
 return *this;
      }

      complex<float>&
      operator+=(float __f)
      {
 __real__ _M_value += __f;
 return *this;
      }

      complex<float>&
      operator-=(float __f)
      {
 __real__ _M_value -= __f;
 return *this;
      }

      complex<float>&
      operator*=(float __f)
      {
 _M_value *= __f;
 return *this;
      }

      complex<float>&
      operator/=(float __f)
      {
 _M_value /= __f;
 return *this;
      }





      template<typename _Tp>
        complex<float>&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex<float>&
        operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<class _Tp>
        complex<float>&
        operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<class _Tp>
        complex<float>&
        operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<class _Tp>
        complex<float>&
        operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      const _ComplexT& __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  template<>
    struct complex<double>
    {
      typedef double value_type;
      typedef __complex__ double _ComplexT;

      complex(_ComplexT __z) : _M_value(__z) { }

      complex(double __r = 0.0, double __i = 0.0)
      {
 __real__ _M_value = __r;
 __imag__ _M_value = __i;
      }

      complex(const complex<float>& __z)
      : _M_value(__z.__rep()) { }

      explicit complex(const complex<long double>&);
# 1190 "/usr/include/c++/4.4/complex" 3
      double& real()
      { return __real__ _M_value; }

      const double& real() const
      { return __real__ _M_value; }

      double& imag()
      { return __imag__ _M_value; }

      const double& imag() const
      { return __imag__ _M_value; }




      void real(double __val)
      { __real__ _M_value = __val; }

      void imag(double __val)
      { __imag__ _M_value = __val; }

      complex<double>&
      operator=(double __d)
      {
 __real__ _M_value = __d;
 __imag__ _M_value = 0.0;
 return *this;
      }

      complex<double>&
      operator+=(double __d)
      {
 __real__ _M_value += __d;
 return *this;
      }

      complex<double>&
      operator-=(double __d)
      {
 __real__ _M_value -= __d;
 return *this;
      }

      complex<double>&
      operator*=(double __d)
      {
 _M_value *= __d;
 return *this;
      }

      complex<double>&
      operator/=(double __d)
      {
 _M_value /= __d;
 return *this;
      }




      template<typename _Tp>
        complex<double>&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex<double>&
        operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex<double>&
        operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex<double>&
        operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<typename _Tp>
        complex<double>&
        operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      const _ComplexT& __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  template<>
    struct complex<long double>
    {
      typedef long double value_type;
      typedef __complex__ long double _ComplexT;

      complex(_ComplexT __z) : _M_value(__z) { }

      complex(long double __r = 0.0L, long double __i = 0.0L)
      {
 __real__ _M_value = __r;
 __imag__ _M_value = __i;
      }

      complex(const complex<float>& __z)
      : _M_value(__z.__rep()) { }

      complex(const complex<double>& __z)
      : _M_value(__z.__rep()) { }
# 1336 "/usr/include/c++/4.4/complex" 3
      long double& real()
      { return __real__ _M_value; }

      const long double& real() const
      { return __real__ _M_value; }

      long double& imag()
      { return __imag__ _M_value; }

      const long double& imag() const
      { return __imag__ _M_value; }




      void real(long double __val)
      { __real__ _M_value = __val; }

      void imag(long double __val)
      { __imag__ _M_value = __val; }

      complex<long double>&
      operator=(long double __r)
      {
 __real__ _M_value = __r;
 __imag__ _M_value = 0.0L;
 return *this;
      }

      complex<long double>&
      operator+=(long double __r)
      {
 __real__ _M_value += __r;
 return *this;
      }

      complex<long double>&
      operator-=(long double __r)
      {
 __real__ _M_value -= __r;
 return *this;
      }

      complex<long double>&
      operator*=(long double __r)
      {
 _M_value *= __r;
 return *this;
      }

      complex<long double>&
      operator/=(long double __r)
      {
 _M_value /= __r;
 return *this;
      }




      template<typename _Tp>
        complex<long double>&
        operator=(const complex<_Tp>& __z)
 {
   __real__ _M_value = __z.real();
   __imag__ _M_value = __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex<long double>&
 operator+=(const complex<_Tp>& __z)
 {
   __real__ _M_value += __z.real();
   __imag__ _M_value += __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex<long double>&
 operator-=(const complex<_Tp>& __z)
 {
   __real__ _M_value -= __z.real();
   __imag__ _M_value -= __z.imag();
   return *this;
 }

      template<typename _Tp>
        complex<long double>&
 operator*=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value *= __t;
   return *this;
 }

      template<typename _Tp>
        complex<long double>&
 operator/=(const complex<_Tp>& __z)
 {
   _ComplexT __t;
   __real__ __t = __z.real();
   __imag__ __t = __z.imag();
   _M_value /= __t;
   return *this;
 }

      const _ComplexT& __rep() const { return _M_value; }

    private:
      _ComplexT _M_value;
    };



  inline
  complex<float>::complex(const complex<double>& __z)
  : _M_value(__z.__rep()) { }

  inline
  complex<float>::complex(const complex<long double>& __z)
  : _M_value(__z.__rep()) { }

  inline
  complex<double>::complex(const complex<long double>& __z)
  : _M_value(__z.__rep()) { }





  extern template istream& operator>>(istream&, complex<float>&);
  extern template ostream& operator<<(ostream&, const complex<float>&);
  extern template istream& operator>>(istream&, complex<double>&);
  extern template ostream& operator<<(ostream&, const complex<double>&);
  extern template istream& operator>>(istream&, complex<long double>&);
  extern template ostream& operator<<(ostream&, const complex<long double>&);


  extern template wistream& operator>>(wistream&, complex<float>&);
  extern template wostream& operator<<(wostream&, const complex<float>&);
  extern template wistream& operator>>(wistream&, complex<double>&);
  extern template wostream& operator<<(wostream&, const complex<double>&);
  extern template wistream& operator>>(wistream&, complex<long double>&);
  extern template wostream& operator<<(wostream&, const complex<long double>&);





}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {


  template<typename _Tp, typename _Up>
    struct __promote_2<std::complex<_Tp>, _Up>
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };

  template<typename _Tp, typename _Up>
    struct __promote_2<_Tp, std::complex<_Up> >
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };

  template<typename _Tp, typename _Up>
    struct __promote_2<std::complex<_Tp>, std::complex<_Up> >
    {
    public:
      typedef std::complex<typename __promote_2<_Tp, _Up>::__type> __type;
    };

}
# 5 "GPUCGGadget.h" 2

# 1 "../../Gadgetron.h" 1



# 1 "/usr/local/include/ace/Log_Msg.h" 1 3
# 15 "/usr/local/include/ace/Log_Msg.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Log_Msg.h" 2 3





# 1 "/usr/local/include/ace/config-all.h" 1 3
# 18 "/usr/local/include/ace/config-all.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/config-all.h" 2 3

# 1 "/usr/local/include/ace/config-lite.h" 1 3
# 22 "/usr/local/include/ace/config-lite.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 23 "/usr/local/include/ace/config-lite.h" 2 3

# 1 "/usr/local/include/ace/config-macros.h" 1 3
# 24 "/usr/local/include/ace/config-macros.h" 3
# 1 "/usr/local/include/ace/config.h" 1 3
# 25 "/usr/local/include/ace/config-macros.h" 2 3

# 1 "/usr/local/include/ace/Version.h" 1 3
# 27 "/usr/local/include/ace/config-macros.h" 2 3
# 1 "/usr/local/include/ace/Versioned_Namespace.h" 1 3
# 28 "/usr/local/include/ace/config-macros.h" 2 3
# 494 "/usr/local/include/ace/config-macros.h" 3
typedef int ACE_HANDLE;
typedef ACE_HANDLE ACE_SOCKET;
# 515 "/usr/local/include/ace/config-macros.h" 3
typedef void* ACE_THR_FUNC_RETURN;

typedef ACE_THR_FUNC_RETURN (*ACE_THR_FUNC)(void *);


extern "C" {

typedef void (*ACE_THR_C_DEST)(void *);

}

typedef void (*ACE_THR_DEST)(void *);





typedef ACE_THR_FUNC ACE_THR_FUNC_INTERNAL;



extern "C"
{




typedef ACE_THR_FUNC_RETURN (*ACE_THR_C_FUNC)(void *);


}
# 25 "/usr/local/include/ace/config-lite.h" 2 3








namespace ACE_OS {}







# 1 "/usr/local/include/ace/ace_wchar.h" 1 3
# 58 "/usr/local/include/ace/ace_wchar.h" 3
# 1 "/usr/include/wchar.h" 1 3 4
# 59 "/usr/local/include/ace/ace_wchar.h" 2 3
# 77 "/usr/local/include/ace/ace_wchar.h" 3
# 1 "/usr/include/c++/4.4/cwchar" 1 3
# 41 "/usr/include/c++/4.4/cwchar" 3
       
# 42 "/usr/include/c++/4.4/cwchar" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cwchar" 2 3


# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/c++/4.4/cwchar" 2 3
# 78 "/usr/local/include/ace/ace_wchar.h" 2 3
# 1 "/usr/include/c++/4.4/cwctype" 1 3
# 41 "/usr/include/c++/4.4/cwctype" 3
       
# 42 "/usr/include/c++/4.4/cwctype" 3
# 79 "/usr/local/include/ace/ace_wchar.h" 2 3
# 135 "/usr/local/include/ace/ace_wchar.h" 3
typedef char ACE_TCHAR;
typedef wchar_t ACE_ANTI_TCHAR;
# 175 "/usr/local/include/ace/ace_wchar.h" 3

# 186 "/usr/local/include/ace/ace_wchar.h" 3
class ACE_Wide_To_Ascii
{
public:

  ACE_Wide_To_Ascii (const wchar_t *s);


  ~ACE_Wide_To_Ascii (void);


  char *char_rep (void);


  static char *convert (const wchar_t *wstr);

private:

  char *s_;






  ACE_Wide_To_Ascii (void);
  ACE_Wide_To_Ascii (ACE_Wide_To_Ascii &);
  ACE_Wide_To_Ascii& operator= (ACE_Wide_To_Ascii &);
};
# 224 "/usr/local/include/ace/ace_wchar.h" 3
class ACE_Ascii_To_Wide
{
public:

  ACE_Ascii_To_Wide (const char *s);


  ~ACE_Ascii_To_Wide (void);


  wchar_t *wchar_rep (void);


  static wchar_t *convert (const char *str);

private:

  wchar_t *s_;






  ACE_Ascii_To_Wide (void);
  ACE_Ascii_To_Wide (ACE_Ascii_To_Wide &);
  ACE_Ascii_To_Wide operator= (ACE_Ascii_To_Wide &);
};







# 383 "/usr/local/include/ace/ace_wchar.h" 3
# 1 "/usr/local/include/ace/ace_wchar.inl" 1 3
# 11 "/usr/local/include/ace/ace_wchar.inl" 3
# 1 "/usr/include/string.h" 1 3 4
# 29 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 165 "/usr/include/string.h" 3 4
extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 646 "/usr/include/string.h" 3 4
}
# 12 "/usr/local/include/ace/ace_wchar.inl" 2 3




inline
ACE_Wide_To_Ascii::~ACE_Wide_To_Ascii (void)
{
  delete [] this->s_;
}

inline char *
ACE_Wide_To_Ascii::char_rep (void)
{
  return this->s_;
}

inline char *
ACE_Wide_To_Ascii::convert (const wchar_t *wstr)
{

  if (wstr == 0)
    return 0;
# 52 "/usr/local/include/ace/ace_wchar.inl" 3
  size_t const len = ::wcslen (wstr) + 1;



  char *str = new char[len];
# 85 "/usr/local/include/ace/ace_wchar.inl" 3
  for (size_t i = 0; i < len; ++i)
    {
      wchar_t *t = const_cast <wchar_t *> (wstr);
      str[i] = static_cast<char> (*(t + i));
    }

  return str;
}

inline
ACE_Wide_To_Ascii::ACE_Wide_To_Ascii (const wchar_t *s)
{






  s_ = ACE_Wide_To_Ascii::convert (s);
}

inline
ACE_Ascii_To_Wide::~ACE_Ascii_To_Wide (void)
{
  delete [] this->s_;
}

inline wchar_t *
ACE_Ascii_To_Wide::wchar_rep (void)
{
  return this->s_;
}

inline wchar_t *
ACE_Ascii_To_Wide::convert (const char *str)
{

  if (str == 0)
    return 0;





  size_t const len = strlen (str) + 1;



  wchar_t *wstr = new wchar_t[len];
# 160 "/usr/local/include/ace/ace_wchar.inl" 3
  for (size_t i = 0; i < len; ++i)
    {
      char *t = const_cast<char *> (str);
      wstr[i] = static_cast<wchar_t> (*((unsigned char*)(t + i)));
    }

  return wstr;
}

inline
ACE_Ascii_To_Wide::ACE_Ascii_To_Wide (const char *s)
{






  s_ = ACE_Ascii_To_Wide::convert (s);
}


# 384 "/usr/local/include/ace/ace_wchar.h" 2 3
# 42 "/usr/local/include/ace/config-lite.h" 2 3








extern int ace_exit_hook_marker;




extern "C"
{
  typedef void (*ACE_EXIT_HOOK) (void);
}




extern "C" {

typedef void (*ACE_CLEANUP_FUNC)(void *object, void *param) ;

}







# 83 "/usr/local/include/ace/config-lite.h" 3
class ACE_OS_Thread_Descriptor;
class ACE_OS_Log_Msg_Attributes;
typedef void (*ACE_INIT_LOG_MSG_HOOK) (ACE_OS_Log_Msg_Attributes &attr




                                       );
typedef void (*ACE_INHERIT_LOG_MSG_HOOK) (ACE_OS_Thread_Descriptor*,
                                          ACE_OS_Log_Msg_Attributes &);

typedef void (*ACE_CLOSE_LOG_MSG_HOOK) (void);

typedef void (*ACE_SYNC_LOG_MSG_HOOK) (const ACE_TCHAR *prog_name);

typedef ACE_OS_Thread_Descriptor *(*ACE_THR_DESC_LOG_MSG_HOOK) (void);


# 162 "/usr/local/include/ace/config-lite.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 163 "/usr/local/include/ace/config-lite.h" 2 3
# 21 "/usr/local/include/ace/config-all.h" 2 3
# 89 "/usr/local/include/ace/config-all.h" 3
# 1 "/usr/local/include/ace/OS_main.h" 1 3
# 17 "/usr/local/include/ace/OS_main.h" 3
# 1 "/usr/local/include/ace/ACE_export.h" 1 3
# 18 "/usr/local/include/ace/OS_main.h" 2 3




# 1 "/usr/local/include/ace/pre.h" 1 3
# 23 "/usr/local/include/ace/OS_main.h" 2 3
# 308 "/usr/local/include/ace/OS_main.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 309 "/usr/local/include/ace/OS_main.h" 2 3
# 90 "/usr/local/include/ace/config-all.h" 2 3

# 1 "/usr/local/include/ace/post.h" 1 3
# 92 "/usr/local/include/ace/config-all.h" 2 3
# 22 "/usr/local/include/ace/Log_Msg.h" 2 3

# 1 "/usr/local/include/ace/Global_Macros.h" 1 3
# 20 "/usr/local/include/ace/Global_Macros.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/Global_Macros.h" 2 3
# 31 "/usr/local/include/ace/Global_Macros.h" 3
# 1 "/usr/local/include/ace/Assert.h" 1 3
# 16 "/usr/local/include/ace/Assert.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Assert.h" 2 3






 void __ace_assert(const char *file, int line, const ACE_TCHAR *expression);

# 38 "/usr/local/include/ace/Assert.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 39 "/usr/local/include/ace/Assert.h" 2 3
# 32 "/usr/local/include/ace/Global_Macros.h" 2 3
# 471 "/usr/local/include/ace/Global_Macros.h" 3
typedef void (*ACE_Service_Object_Exterminator)(void *);
# 846 "/usr/local/include/ace/Global_Macros.h" 3
# 1 "/usr/local/include/ace/OS_Errno.h" 1 3
# 15 "/usr/local/include/ace/OS_Errno.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/OS_Errno.h" 2 3







# 1 "/usr/local/include/ace/OS_NS_errno.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_errno.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_errno.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_errno.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_errno.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_errno.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_errno.h" 3
# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4
extern "C" {



# 1 "/usr/include/bits/errno.h" 1 3 4
# 25 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/bits/errno.h" 2 3 4
# 47 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 55 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 69 "/usr/include/errno.h" 3 4
typedef int error_t;
# 29 "/usr/local/include/ace/os_include/os_errno.h" 2 3
# 38 "/usr/local/include/ace/os_include/os_errno.h" 3
extern "C"
{
# 339 "/usr/local/include/ace/os_include/os_errno.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 343 "/usr/local/include/ace/os_include/os_errno.h" 2 3
# 29 "/usr/local/include/ace/OS_NS_errno.h" 2 3









namespace ACE_OS {

  extern inline
  int last_error (void);

  extern inline
  void last_error (int error);

  extern inline
  int set_errno_to_last_error (void);

  extern inline
  int set_errno_to_wsa_last_error (void);

}
# 91 "/usr/local/include/ace/OS_NS_errno.h" 3







# 1 "/usr/local/include/ace/OS_NS_errno.inl" 1 3








inline int
ACE_OS::last_error (void)
{
# 24 "/usr/local/include/ace/OS_NS_errno.inl" 3
  return (*__errno_location ());

}

inline void
ACE_OS::last_error (int error)
{
  ;



  (*__errno_location ()) = error;
}

inline int
ACE_OS::set_errno_to_last_error (void)
{



  return (*__errno_location ());

}

inline int
ACE_OS::set_errno_to_wsa_last_error (void)
{



  return (*__errno_location ());

}
# 83 "/usr/local/include/ace/OS_NS_errno.inl" 3

# 99 "/usr/local/include/ace/OS_NS_errno.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 102 "/usr/local/include/ace/OS_NS_errno.h" 2 3
# 24 "/usr/local/include/ace/OS_Errno.h" 2 3


# 46 "/usr/local/include/ace/OS_Errno.h" 3
class ACE_Errno_Guard
{
public:


  ACE_Errno_Guard (int &errno_ref,
                   int error);


  ACE_Errno_Guard (int &errno_ref);


  ~ACE_Errno_Guard (void);







  int operator= (int error);


  bool operator== (int error);


  bool operator!= (int error);

private:

  ACE_Errno_Guard (const ACE_Errno_Guard &);
  ACE_Errno_Guard &operator= (const ACE_Errno_Guard &);


  int *errno_ptr_;

  int error_;
};


# 96 "/usr/local/include/ace/OS_Errno.h" 3
# 1 "/usr/local/include/ace/OS_Errno.inl" 1 3






inline
ACE_Errno_Guard::ACE_Errno_Guard (int &errno_ref,
                                  int error)
  :

    errno_ptr_ (&errno_ref),

    error_ (error)
{



}

inline
ACE_Errno_Guard::ACE_Errno_Guard (int &errno_ref)
  :

    errno_ptr_ (&errno_ref),

    error_ (errno_ref)
{
}

inline
ACE_Errno_Guard::~ACE_Errno_Guard (void)
{

  *errno_ptr_ = this->error_;



}
# 49 "/usr/local/include/ace/OS_Errno.inl" 3
inline int
ACE_Errno_Guard::operator= (int error)
{
  return this->error_ = error;
}

inline bool
ACE_Errno_Guard::operator== (int error)
{
  return this->error_ == error;
}

inline bool
ACE_Errno_Guard::operator!= (int error)
{
  return this->error_ != error;
}


# 97 "/usr/local/include/ace/OS_Errno.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 100 "/usr/local/include/ace/OS_Errno.h" 2 3
# 847 "/usr/local/include/ace/Global_Macros.h" 2 3
# 1119 "/usr/local/include/ace/Global_Macros.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 1120 "/usr/local/include/ace/Global_Macros.h" 2 3
# 24 "/usr/local/include/ace/Log_Msg.h" 2 3
# 1 "/usr/local/include/ace/Default_Constants.h" 1 3
# 19 "/usr/local/include/ace/Default_Constants.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/Default_Constants.h" 2 3
# 30 "/usr/local/include/ace/Default_Constants.h" 3
# 1 "/usr/local/include/ace/os_include/os_limits.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_limits.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_limits.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_unistd.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_unistd.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_unistd.h" 2 3







# 1 "/usr/local/include/ace/os_include/sys/os_types.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_types.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_types.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_stddef.h" 1 3
# 21 "/usr/local/include/ace/os_include/os_stddef.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 22 "/usr/local/include/ace/os_include/os_stddef.h" 2 3
# 30 "/usr/local/include/ace/os_include/os_stddef.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 31 "/usr/local/include/ace/os_include/os_stddef.h" 2 3




extern "C"
{
# 71 "/usr/local/include/ace/os_include/os_stddef.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 75 "/usr/local/include/ace/os_include/os_stddef.h" 2 3
# 28 "/usr/local/include/ace/os_include/sys/os_types.h" 2 3


# 1 "/usr/include/sys/types.h" 1 3 4
# 28 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;
# 71 "/usr/include/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 105 "/usr/include/sys/types.h" 3 4
typedef __id_t id_t;
# 116 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 141 "/usr/include/sys/types.h" 3 4
typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "/usr/include/bits/time.h" 1 3 4
# 75 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4
# 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4
extern "C" {
# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);


}
# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw ();
# 224 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 263 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 274 "/usr/include/sys/types.h" 3 4
}
# 31 "/usr/local/include/ace/os_include/sys/os_types.h" 2 3
# 44 "/usr/local/include/ace/os_include/sys/os_types.h" 3
extern "C"
{


typedef double ACE_timer_t;
# 69 "/usr/local/include/ace/os_include/sys/os_types.h" 3
  typedef off_t ACE_OFF_T;



   typedef off_t ACE_LOFF_T;
# 133 "/usr/local/include/ace/os_include/sys/os_types.h" 3
   typedef int ACE_exitcode;
# 153 "/usr/local/include/ace/os_include/sys/os_types.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 157 "/usr/local/include/ace/os_include/sys/os_types.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_unistd.h" 2 3
# 1 "/usr/local/include/ace/os_include/os_inttypes.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_inttypes.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_inttypes.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_stdint.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_stdint.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_stdint.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 28 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 123 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 29 "/usr/local/include/ace/os_include/os_stdint.h" 2 3




extern "C"
{
# 137 "/usr/local/include/ace/os_include/os_stdint.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 141 "/usr/local/include/ace/os_include/os_stdint.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_inttypes.h" 2 3


# 1 "/usr/include/inttypes.h" 1 3 4
# 274 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 298 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (__const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (__const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (__const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();
# 442 "/usr/include/inttypes.h" 3 4
}
# 31 "/usr/local/include/ace/os_include/os_inttypes.h" 2 3




extern "C"
{





}


# 1 "/usr/local/include/ace/post.h" 1 3
# 46 "/usr/local/include/ace/os_include/os_inttypes.h" 2 3
# 29 "/usr/local/include/ace/os_include/os_unistd.h" 2 3
# 58 "/usr/local/include/ace/os_include/os_unistd.h" 3
extern "C"
{
# 171 "/usr/local/include/ace/os_include/os_unistd.h" 3
  ssize_t read_timedwait (ACE_HANDLE handle,
                          char *buf,
                          size_t n,
                          struct timespec *timeout);

  ssize_t write_timedwait (ACE_HANDLE handle,
                           const void *buf,
                           size_t n,
                           struct timespec *timeout);
# 192 "/usr/local/include/ace/os_include/os_unistd.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 196 "/usr/local/include/ace/os_include/os_unistd.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_limits.h" 2 3
# 1 "/usr/local/include/ace/os_include/os_stdio.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_stdio.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_stdio.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_stdio.h" 3
# 1 "/usr/local/include/ace/os_include/os_stdarg.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_stdarg.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_stdarg.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_stdarg.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stdarg.h" 1 3 4
# 102 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 29 "/usr/local/include/ace/os_include/os_stdarg.h" 2 3
# 41 "/usr/local/include/ace/os_include/os_stdarg.h" 3
extern "C"
{



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 50 "/usr/local/include/ace/os_include/os_stdarg.h" 2 3
# 29 "/usr/local/include/ace/os_include/os_stdio.h" 2 3



# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 460 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 490 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 552 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4
# 109 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 161 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 162 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 202 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 224 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 249 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 259 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 292 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 414 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 465 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 524 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 552 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 563 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 596 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 642 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 658 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 719 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 730 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 766 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 785 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 808 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 847 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 866 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 936 "/usr/include/stdio.h" 3 4
}
# 33 "/usr/local/include/ace/os_include/os_stdio.h" 2 3
# 47 "/usr/local/include/ace/os_include/os_stdio.h" 3
extern "C"
{
# 72 "/usr/local/include/ace/os_include/os_stdio.h" 3
  struct ACE_OVERLAPPED
  {
    unsigned long Internal;
    unsigned long InternalHigh;
    unsigned long Offset;
    unsigned long OffsetHigh;
    ACE_HANDLE hEvent;
  };



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 87 "/usr/local/include/ace/os_include/os_stdio.h" 2 3
# 29 "/usr/local/include/ace/os_include/os_limits.h" 2 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/limits.h" 1 3 4
# 11 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/limits.h" 1 3 4
# 122 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/bits/local_lim.h" 2 3 4
# 158 "/usr/include/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/syslimits.h" 2 3 4
# 12 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/limits.h" 2 3 4
# 32 "/usr/local/include/ace/os_include/os_limits.h" 2 3



# 1 "/usr/include/sys/param.h" 1 3 4
# 26 "/usr/include/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include-fixed/limits.h" 1 3 4
# 27 "/usr/include/sys/param.h" 2 3 4

# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/asm/param.h" 2 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/sys/param.h" 2 3 4
# 36 "/usr/local/include/ace/os_include/os_limits.h" 2 3
# 45 "/usr/local/include/ace/os_include/os_limits.h" 3
extern "C"
{
# 139 "/usr/local/include/ace/os_include/os_limits.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 143 "/usr/local/include/ace/os_include/os_limits.h" 2 3
# 31 "/usr/local/include/ace/Default_Constants.h" 2 3
# 604 "/usr/local/include/ace/Default_Constants.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 605 "/usr/local/include/ace/Default_Constants.h" 2 3
# 25 "/usr/local/include/ace/Log_Msg.h" 2 3
# 1 "/usr/local/include/ace/Log_Priority.h" 1 3
# 16 "/usr/local/include/ace/Log_Priority.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Log_Priority.h" 2 3




# 33 "/usr/local/include/ace/Log_Priority.h" 3
enum ACE_Log_Priority
{



  LM_SHUTDOWN = 01,


  LM_TRACE = 02,



  LM_DEBUG = 04,


  LM_INFO = 010,



  LM_NOTICE = 020,


  LM_WARNING = 040,


  LM_STARTUP = 0100,


  LM_ERROR = 0200,


  LM_CRITICAL = 0400,



  LM_ALERT = 01000,



  LM_EMERGENCY = 02000,


  LM_MAX = LM_EMERGENCY,



  LM_ENSURE_32_BITS = 0x7FFFFFFF
};



# 1 "/usr/local/include/ace/post.h" 1 3
# 85 "/usr/local/include/ace/Log_Priority.h" 2 3
# 26 "/usr/local/include/ace/Log_Msg.h" 2 3

# 1 "/usr/local/include/ace/Atomic_Op.h" 1 3
# 15 "/usr/local/include/ace/Atomic_Op.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Atomic_Op.h" 2 3







# 1 "/usr/local/include/ace/Thread_Mutex.h" 1 3
# 17 "/usr/local/include/ace/Thread_Mutex.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Thread_Mutex.h" 2 3
# 31 "/usr/local/include/ace/Thread_Mutex.h" 3
# 1 "/usr/local/include/ace/OS_NS_Thread.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_Thread.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 29 "/usr/local/include/ace/OS_NS_Thread.h" 3
# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 51 "/usr/local/include/ace/Basic_Types.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 52 "/usr/local/include/ace/Basic_Types.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_float.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_float.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_float.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_float.h" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/float.h" 1 3 4
# 29 "/usr/local/include/ace/os_include/os_float.h" 2 3




extern "C"
{



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 42 "/usr/local/include/ace/os_include/os_float.h" 2 3
# 60 "/usr/local/include/ace/Basic_Types.h" 2 3
# 1 "/usr/local/include/ace/os_include/os_stdlib.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_stdlib.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_stdlib.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_stdlib.h" 3
# 1 "/usr/local/include/ace/os_include/sys/os_wait.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_wait.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_wait.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_signal.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_signal.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_signal.h" 2 3
# 30 "/usr/local/include/ace/os_include/os_signal.h" 3
   extern "C" {
# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4
extern "C" {

# 1 "/usr/include/bits/sigset.h" 1 3 4
# 104 "/usr/include/bits/sigset.h" 3 4
extern int __sigismember (__const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 34 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 58 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/signum.h" 1 3 4
# 59 "/usr/include/signal.h" 2 3 4
# 79 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 51 "/usr/include/bits/siginfo.h" 3 4
typedef struct siginfo
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
      } _sifields;
  } siginfo_t;
# 129 "/usr/include/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};



enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR

};


enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};


enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 273 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     void *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 80 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();







extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 113 "/usr/include/signal.h" 3 4





extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     throw ();






extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();




extern int raise (int __sig) throw ();




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, __const char *__s);




extern void psiginfo (__const siginfo_t *__pinfo, __const char *__s);
# 168 "/usr/include/signal.h" 3 4
extern int __sigpause (int __sig_or_mask, int __is_sig);
# 177 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 196 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 211 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (__const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (__const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, __const sigset_t *__left,
        __const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, __const sigset_t *__left,
       __const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 25 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 253 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, __const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (__const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, __const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));






extern int sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (__const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (__const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    __const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, __const union sigval __val)
     throw ();
# 310 "/usr/include/signal.h" 3 4
extern __const char *__const _sys_siglist[65];
extern __const char *__const sys_siglist[65];


struct sigvec
  {
    __sighandler_t sv_handler;
    int sv_mask;

    int sv_flags;

  };
# 334 "/usr/include/signal.h" 3 4
extern int sigvec (int __sig, __const struct sigvec *__vec,
     struct sigvec *__ovec) throw ();



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 26 "/usr/include/bits/sigcontext.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/sigcontext.h" 2 3 4

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 109 "/usr/include/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  unsigned long r8;
  unsigned long r9;
  unsigned long r10;
  unsigned long r11;
  unsigned long r12;
  unsigned long r13;
  unsigned long r14;
  unsigned long r15;
  unsigned long rdi;
  unsigned long rsi;
  unsigned long rbp;
  unsigned long rbx;
  unsigned long rdx;
  unsigned long rax;
  unsigned long rcx;
  unsigned long rsp;
  unsigned long rip;
  unsigned long eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  unsigned long err;
  unsigned long trapno;
  unsigned long oldmask;
  unsigned long cr2;
  struct _fpstate * fpstate;
  unsigned long __reserved1 [8];
};
# 340 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 350 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 26 "/usr/include/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 50 "/usr/include/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 357 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 23 "/usr/include/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 24 "/usr/include/sys/ucontext.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 25 "/usr/include/sys/ucontext.h" 2 3 4
# 33 "/usr/include/sys/ucontext.h" 3 4
typedef long int greg_t;





typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    unsigned long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 360 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));



extern int sigaltstack (__const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) throw ();







extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       __const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 396 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();



}
# 32 "/usr/local/include/ace/os_include/os_signal.h" 2 3
   }
# 57 "/usr/local/include/ace/os_include/os_signal.h" 3
extern "C"
{
# 166 "/usr/local/include/ace/os_include/os_signal.h" 3
  typedef void (*ACE_SignalHandler)(int);
  typedef void (*ACE_SignalHandlerV)(int);
# 243 "/usr/local/include/ace/os_include/os_signal.h" 3
}


# 1 "/usr/local/include/ace/os_include/os_ucontext.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_ucontext.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_ucontext.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_signal.h" 1 3
# 28 "/usr/local/include/ace/os_include/os_ucontext.h" 2 3


# 1 "/usr/include/ucontext.h" 1 3 4
# 29 "/usr/include/ucontext.h" 3 4
extern "C" {


extern int getcontext (ucontext_t *__ucp) throw ();


extern int setcontext (__const ucontext_t *__ucp) throw ();



extern int swapcontext (ucontext_t *__restrict __oucp,
   __const ucontext_t *__restrict __ucp) throw ();







extern void makecontext (ucontext_t *__ucp, void (*__func) (void),
    int __argc, ...) throw ();

}
# 31 "/usr/local/include/ace/os_include/os_ucontext.h" 2 3




extern "C"
{







}


# 1 "/usr/local/include/ace/post.h" 1 3
# 48 "/usr/local/include/ace/os_include/os_ucontext.h" 2 3
# 247 "/usr/local/include/ace/os_include/os_signal.h" 2 3

# 1 "/usr/local/include/ace/post.h" 1 3
# 249 "/usr/local/include/ace/os_include/os_signal.h" 2 3
# 28 "/usr/local/include/ace/os_include/sys/os_wait.h" 2 3
# 1 "/usr/local/include/ace/os_include/sys/os_resource.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_resource.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_resource.h" 2 3







# 1 "/usr/local/include/ace/os_include/sys/os_time.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_time.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_time.h" 2 3
# 30 "/usr/local/include/ace/os_include/sys/os_time.h" 3
# 1 "/usr/include/sys/time.h" 1 3 4
# 29 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/sys/time.h" 2 3 4
# 39 "/usr/include/sys/time.h" 3 4
extern "C" {
# 57 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     throw () __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, __const char *__file,
        __const struct timeval __tvp[2]) throw ();
# 191 "/usr/include/sys/time.h" 3 4
}
# 31 "/usr/local/include/ace/os_include/sys/os_time.h" 2 3
# 39 "/usr/local/include/ace/os_include/sys/os_time.h" 3
extern "C"
{
# 52 "/usr/local/include/ace/os_include/sys/os_time.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 56 "/usr/local/include/ace/os_include/sys/os_time.h" 2 3
# 28 "/usr/local/include/ace/os_include/sys/os_resource.h" 2 3



# 1 "/usr/include/sys/resource.h" 1 3 4
# 25 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/bits/resource.h" 1 3 4
# 33 "/usr/include/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,


  __RLIMIT_NLIMITS = 15,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 127 "/usr/include/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/bits/time.h" 1 3 4
# 176 "/usr/include/bits/resource.h" 2 3 4


struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    long int ru_maxrss;


    long int ru_ixrss;

    long int ru_idrss;

    long int ru_isrss;


    long int ru_minflt;

    long int ru_majflt;

    long int ru_nswap;


    long int ru_inblock;

    long int ru_oublock;

    long int ru_msgsnd;

    long int ru_msgrcv;

    long int ru_nsignals;



    long int ru_nvcsw;


    long int ru_nivcsw;
  };







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};
# 26 "/usr/include/sys/resource.h" 2 3 4






extern "C" {
# 43 "/usr/include/sys/resource.h" 3 4
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;





extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) throw ();
# 62 "/usr/include/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) throw ();






extern int setrlimit (__rlimit_resource_t __resource,
        __const struct rlimit *__rlimits) throw ();
# 82 "/usr/include/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   __const struct rlimit64 *__rlimits) throw ();




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) throw ();





extern int getpriority (__priority_which_t __which, id_t __who) throw ();



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     throw ();

}
# 32 "/usr/local/include/ace/os_include/sys/os_resource.h" 2 3







# 1 "/usr/include/sys/syscall.h" 1 3 4
# 25 "/usr/include/sys/syscall.h" 3 4
# 1 "/usr/include/asm/unistd.h" 1 3 4



# 1 "/usr/include/asm/unistd_64.h" 1 3 4
# 16 "/usr/include/asm/unistd_64.h" 3 4










































































































































































































































































































































































































































































































































































































































































# 5 "/usr/include/asm/unistd.h" 2 3 4
# 26 "/usr/include/sys/syscall.h" 2 3 4






# 1 "/usr/include/bits/syscall.h" 1 3 4






# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 8 "/usr/include/bits/syscall.h" 2 3 4
# 33 "/usr/include/sys/syscall.h" 2 3 4
# 40 "/usr/local/include/ace/os_include/sys/os_resource.h" 2 3




# 1 "/usr/include/sys/procfs.h" 1 3 4
# 34 "/usr/include/sys/procfs.h" 3 4
# 1 "/usr/include/sys/user.h" 1 3 4
# 26 "/usr/include/sys/user.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/sys/user.h" 2 3 4




struct user_fpregs_struct
{
  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  __uint32_t st_space[32];
  __uint32_t xmm_space[64];
  __uint32_t padding[24];
};

struct user_regs_struct
{
  unsigned long r15;
  unsigned long r14;
  unsigned long r13;
  unsigned long r12;
  unsigned long rbp;
  unsigned long rbx;
  unsigned long r11;
  unsigned long r10;
  unsigned long r9;
  unsigned long r8;
  unsigned long rax;
  unsigned long rcx;
  unsigned long rdx;
  unsigned long rsi;
  unsigned long rdi;
  unsigned long orig_rax;
  unsigned long rip;
  unsigned long cs;
  unsigned long eflags;
  unsigned long rsp;
  unsigned long ss;
  unsigned long fs_base;
  unsigned long gs_base;
  unsigned long ds;
  unsigned long es;
  unsigned long fs;
  unsigned long gs;
};

struct user
{
  struct user_regs_struct regs;
  int u_fpvalid;
  struct user_fpregs_struct i387;
  unsigned long int u_tsize;
  unsigned long int u_dsize;
  unsigned long int u_ssize;
  unsigned long start_code;
  unsigned long start_stack;
  long int signal;
  int reserved;
  struct user_regs_struct* u_ar0;
  struct user_fpregs_struct* u_fpstate;
  unsigned long int magic;
  char u_comm [32];
  unsigned long int u_debugreg [8];
};
# 35 "/usr/include/sys/procfs.h" 2 3 4

extern "C" {


typedef unsigned long elf_greg_t;






typedef elf_greg_t elf_gregset_t[(sizeof (struct user_regs_struct) / sizeof(elf_greg_t))];
# 60 "/usr/include/sys/procfs.h" 3 4
typedef struct user_fpregs_struct elf_fpregset_t;



struct elf_siginfo
  {
    int si_signo;
    int si_code;
    int si_errno;
  };
# 79 "/usr/include/sys/procfs.h" 3 4
struct elf_prstatus
  {
    struct elf_siginfo pr_info;
    short int pr_cursig;
    unsigned long int pr_sigpend;
    unsigned long int pr_sighold;
    __pid_t pr_pid;
    __pid_t pr_ppid;
    __pid_t pr_pgrp;
    __pid_t pr_sid;
    struct timeval pr_utime;
    struct timeval pr_stime;
    struct timeval pr_cutime;
    struct timeval pr_cstime;
    elf_gregset_t pr_reg;
    int pr_fpvalid;
  };




struct elf_prpsinfo
  {
    char pr_state;
    char pr_sname;
    char pr_zomb;
    char pr_nice;
    unsigned long int pr_flag;




    unsigned int pr_uid;
    unsigned int pr_gid;

    int pr_pid, pr_ppid, pr_pgrp, pr_sid;

    char pr_fname[16];
    char pr_psargs[(80)];
  };







typedef void *psaddr_t;


typedef elf_gregset_t prgregset_t;
typedef elf_fpregset_t prfpregset_t;



typedef __pid_t lwpid_t;


typedef struct elf_prstatus prstatus_t;
typedef struct elf_prpsinfo prpsinfo_t;

}
# 45 "/usr/local/include/ace/os_include/sys/os_resource.h" 2 3




extern "C"
{
# 83 "/usr/local/include/ace/os_include/sys/os_resource.h" 3
   typedef rusage ACE_Rusage;
# 100 "/usr/local/include/ace/os_include/sys/os_resource.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 104 "/usr/local/include/ace/os_include/sys/os_resource.h" 2 3
# 29 "/usr/local/include/ace/os_include/sys/os_wait.h" 2 3


# 1 "/usr/include/sys/wait.h" 1 3 4
# 29 "/usr/include/sys/wait.h" 3 4
extern "C" {
# 38 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 39 "/usr/include/sys/wait.h" 2 3 4
# 80 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 67 "/usr/include/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 81 "/usr/include/sys/wait.h" 2 3 4
# 102 "/usr/include/sys/wait.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 116 "/usr/include/sys/wait.h" 3 4
extern __pid_t wait (void * __stat_loc);
# 139 "/usr/include/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);



# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4
# 144 "/usr/include/sys/wait.h" 2 3 4
# 155 "/usr/include/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);





struct rusage;






extern __pid_t wait3 (void * __stat_loc, int __options,
        struct rusage * __usage) throw ();




extern __pid_t wait4 (__pid_t __pid, void * __stat_loc, int __options,
        struct rusage *__usage) throw ();



}
# 32 "/usr/local/include/ace/os_include/sys/os_wait.h" 2 3




extern "C"
{
# 93 "/usr/local/include/ace/os_include/sys/os_wait.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 97 "/usr/local/include/ace/os_include/sys/os_wait.h" 2 3
# 29 "/usr/local/include/ace/os_include/os_stdlib.h" 2 3






# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 240 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 327 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4
}
# 36 "/usr/local/include/ace/os_include/os_stdlib.h" 2 3
# 44 "/usr/local/include/ace/os_include/os_stdlib.h" 3
extern "C"
{


   typedef u_int ACE_RANDR_TYPE;
# 81 "/usr/local/include/ace/os_include/os_stdlib.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 85 "/usr/local/include/ace/os_include/os_stdlib.h" 2 3
# 61 "/usr/local/include/ace/Basic_Types.h" 2 3
# 224 "/usr/local/include/ace/Basic_Types.h" 3

# 233 "/usr/local/include/ace/Basic_Types.h" 3
  typedef int8_t ACE_INT8;
# 243 "/usr/local/include/ace/Basic_Types.h" 3
  typedef uint8_t ACE_UINT8;







  typedef int16_t ACE_INT16;
# 263 "/usr/local/include/ace/Basic_Types.h" 3
  typedef uint16_t ACE_UINT16;
# 275 "/usr/local/include/ace/Basic_Types.h" 3
  typedef int32_t ACE_INT32;
# 287 "/usr/local/include/ace/Basic_Types.h" 3
  typedef uint32_t ACE_UINT32;
# 297 "/usr/local/include/ace/Basic_Types.h" 3
  typedef signed long ACE_INT64;
# 315 "/usr/local/include/ace/Basic_Types.h" 3
  typedef unsigned long ACE_UINT64;
# 331 "/usr/local/include/ace/Basic_Types.h" 3
typedef ACE_UINT16 ACE_USHORT16;


typedef unsigned char ACE_Byte;
# 352 "/usr/local/include/ace/Basic_Types.h" 3

# 643 "/usr/local/include/ace/Basic_Types.h" 3

# 665 "/usr/local/include/ace/Basic_Types.h" 3
inline ACE_UINT32
ACE_U64_TO_U32 (ACE_UINT64 n)
{
  return static_cast<ACE_UINT32> (n);
}

inline ACE_UINT32
ACE_CU64_TO_CU32 (ACE_UINT64 n)
{
  return static_cast<ACE_UINT32> (n);
}



# 958 "/usr/local/include/ace/Basic_Types.h" 3
# 1 "/usr/local/include/ace/Basic_Types.inl" 1 3
# 959 "/usr/local/include/ace/Basic_Types.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 962 "/usr/local/include/ace/Basic_Types.h" 2 3
# 30 "/usr/local/include/ace/OS_NS_Thread.h" 2 3

# 1 "/usr/local/include/ace/os_include/os_pthread.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_pthread.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_pthread.h" 2 3
# 54 "/usr/local/include/ace/os_include/os_pthread.h" 3
   extern "C" {





   }
# 222 "/usr/local/include/ace/os_include/os_pthread.h" 3
   typedef pthread_t ACE_hthread_t;
   typedef pthread_t ACE_thread_t;


   typedef pthread_key_t ACE_OS_thread_key_t;




     typedef ACE_OS_thread_key_t ACE_thread_key_t;



     typedef pthread_mutex_t ACE_mutex_t;
     typedef pthread_cond_t ACE_cond_t;
     typedef pthread_condattr_t ACE_condattr_t;
     typedef pthread_mutexattr_t ACE_mutexattr_t;

   typedef pthread_mutex_t ACE_thread_mutex_t;
# 377 "/usr/local/include/ace/os_include/os_pthread.h" 3
     typedef pthread_rwlock_t ACE_rwlock_t;
# 423 "/usr/local/include/ace/os_include/os_pthread.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 424 "/usr/local/include/ace/os_include/os_pthread.h" 2 3
# 32 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 1 "/usr/local/include/ace/os_include/os_sched.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_sched.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_sched.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_time.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_time.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_time.h" 2 3
# 75 "/usr/local/include/ace/os_include/os_time.h" 3
typedef struct timespec timespec_t;




extern "C"
{
# 104 "/usr/local/include/ace/os_include/os_time.h" 3
typedef const struct timespec * ACE_TIMESPEC_PTR;
# 115 "/usr/local/include/ace/os_include/os_time.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 119 "/usr/local/include/ace/os_include/os_time.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_sched.h" 2 3







extern "C"
{
# 52 "/usr/local/include/ace/os_include/os_sched.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 56 "/usr/local/include/ace/os_include/os_sched.h" 2 3
# 33 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 1 "/usr/local/include/ace/Base_Thread_Adapter.h" 1 3
# 15 "/usr/local/include/ace/Base_Thread_Adapter.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Base_Thread_Adapter.h" 2 3

# 1 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 1 3
# 17 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 2 3







# 1 "/usr/local/include/ace/iosfwd.h" 1 3
# 26 "/usr/local/include/ace/iosfwd.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 27 "/usr/local/include/ace/iosfwd.h" 2 3
# 69 "/usr/local/include/ace/iosfwd.h" 3
      using std::ios;
      using std::streambuf;
      using std::istream;
      using std::ostream;
      using std::iostream;
      using std::filebuf;
      using std::ifstream;
      using std::ofstream;
      using std::fstream;
# 96 "/usr/local/include/ace/iosfwd.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 97 "/usr/local/include/ace/iosfwd.h" 2 3
# 26 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 2 3


# 42 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 3
class ACE_OS_Log_Msg_Attributes
{
public:

  ACE_OS_Log_Msg_Attributes (void);

protected:
  friend class ACE_Log_Msg;


  ostream *ostream_;
  void *ostream_refcount_;


  unsigned long priority_mask_;


  int tracing_enabled_;



  bool restart_;


  int trace_depth_;







private:

  ACE_OS_Log_Msg_Attributes (const ACE_OS_Log_Msg_Attributes &);
  ACE_OS_Log_Msg_Attributes &operator= (const ACE_OS_Log_Msg_Attributes &);
};








# 1 "/usr/local/include/ace/OS_Log_Msg_Attributes.inl" 1 3






inline
ACE_OS_Log_Msg_Attributes::ACE_OS_Log_Msg_Attributes (void) :
  ostream_ (0),
  ostream_refcount_ (0),
  priority_mask_ (0),
  tracing_enabled_ (0),
  restart_ (true),
  trace_depth_ (0)




{
}


# 88 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 91 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 2 3
# 18 "/usr/local/include/ace/Base_Thread_Adapter.h" 2 3






# 1 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 1 3
# 25 "/usr/local/include/ace/Base_Thread_Adapter.h" 2 3
# 39 "/usr/local/include/ace/Base_Thread_Adapter.h" 3
extern "C" ACE_THR_FUNC_RETURN ace_thread_adapter (void *args);


# 51 "/usr/local/include/ace/Base_Thread_Adapter.h" 3
class ACE_OS_Thread_Descriptor
{
public:

  long flags (void) const;

protected:

  ACE_OS_Thread_Descriptor (long flags = 0);







  long flags_;
};



class ACE_Service_Gestalt;
# 91 "/usr/local/include/ace/Base_Thread_Adapter.h" 3
class ACE_Base_Thread_Adapter
{
public:

  virtual ~ACE_Base_Thread_Adapter (void);


  virtual ACE_THR_FUNC_RETURN invoke (void) = 0;



  ACE_THR_C_FUNC entry_point (void);
# 111 "/usr/local/include/ace/Base_Thread_Adapter.h" 3
  static void close_log_msg (void);


  static void sync_log_msg (const ACE_TCHAR *prog_name);


  static ACE_OS_Thread_Descriptor *thr_desc_log_msg (void);

protected:

  ACE_Base_Thread_Adapter (ACE_THR_FUNC user_func,
                           void *arg,
                           ACE_THR_C_FUNC entry_point = (ACE_THR_C_FUNC) ace_thread_adapter,
                           ACE_OS_Thread_Descriptor *td = 0




                      );


  void inherit_log_msg (void);

private:

  static ACE_INIT_LOG_MSG_HOOK init_log_msg_hook_;
  static ACE_INHERIT_LOG_MSG_HOOK inherit_log_msg_hook_;
  static ACE_CLOSE_LOG_MSG_HOOK close_log_msg_hook_;
  static ACE_SYNC_LOG_MSG_HOOK sync_log_msg_hook_;
  static ACE_THR_DESC_LOG_MSG_HOOK thr_desc_log_msg_hook_;


  static void set_log_msg_hooks (ACE_INIT_LOG_MSG_HOOK init_hook,
                                 ACE_INHERIT_LOG_MSG_HOOK inherit_hook,
                                 ACE_CLOSE_LOG_MSG_HOOK close_hook,
                                 ACE_SYNC_LOG_MSG_HOOK sync_hook,
                                 ACE_THR_DESC_LOG_MSG_HOOK thr_desc);


  friend class ACE_Log_Msg;

protected:

  ACE_THR_FUNC user_func_;


  void *arg_;



  ACE_THR_C_FUNC entry_point_;







  ACE_OS_Thread_Descriptor *thr_desc_;


  ACE_OS_Log_Msg_Attributes log_msg_attributes_;
# 181 "/usr/local/include/ace/Base_Thread_Adapter.h" 3
  ACE_Service_Gestalt * const ctx_;
};








# 1 "/usr/local/include/ace/Base_Thread_Adapter.inl" 1 3






inline long
ACE_OS_Thread_Descriptor::flags (void) const
{
  return flags_;
}

inline
ACE_OS_Thread_Descriptor::ACE_OS_Thread_Descriptor (long flags)
  : flags_ (flags)
{
}

inline void
ACE_Base_Thread_Adapter::set_log_msg_hooks (
    ACE_INIT_LOG_MSG_HOOK init_hook,
    ACE_INHERIT_LOG_MSG_HOOK inherit_hook,
    ACE_CLOSE_LOG_MSG_HOOK close_hook,
    ACE_SYNC_LOG_MSG_HOOK sync_hook,
    ACE_THR_DESC_LOG_MSG_HOOK thr_desc_hook)
{
  ACE_Base_Thread_Adapter::init_log_msg_hook_ = init_hook;
  ACE_Base_Thread_Adapter::inherit_log_msg_hook_ = inherit_hook;
  ACE_Base_Thread_Adapter::close_log_msg_hook_ = close_hook;
  ACE_Base_Thread_Adapter::sync_log_msg_hook_ = sync_hook;
  ACE_Base_Thread_Adapter::thr_desc_log_msg_hook_ = thr_desc_hook;
}

inline ACE_THR_C_FUNC
ACE_Base_Thread_Adapter::entry_point (void)
{
  return this->entry_point_;
}
# 48 "/usr/local/include/ace/Base_Thread_Adapter.inl" 3

# 192 "/usr/local/include/ace/Base_Thread_Adapter.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 195 "/usr/local/include/ace/Base_Thread_Adapter.h" 2 3
# 34 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 1 "/usr/local/include/ace/os_include/sys/os_sem.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_sem.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_sem.h" 2 3







# 1 "/usr/local/include/ace/os_include/sys/os_ipc.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_ipc.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_ipc.h" 2 3
# 30 "/usr/local/include/ace/os_include/sys/os_ipc.h" 3
# 1 "/usr/include/sys/ipc.h" 1 3 4
# 29 "/usr/include/sys/ipc.h" 3 4
# 1 "/usr/include/bits/ipctypes.h" 1 3 4
# 33 "/usr/include/bits/ipctypes.h" 3 4
typedef int __ipc_pid_t;
# 30 "/usr/include/sys/ipc.h" 2 3 4
# 1 "/usr/include/bits/ipc.h" 1 3 4
# 43 "/usr/include/bits/ipc.h" 3 4
struct ipc_perm
  {
    __key_t __key;
    __uid_t uid;
    __gid_t gid;
    __uid_t cuid;
    __gid_t cgid;
    unsigned short int mode;
    unsigned short int __pad1;
    unsigned short int __seq;
    unsigned short int __pad2;
    unsigned long int __unused1;
    unsigned long int __unused2;
  };
# 31 "/usr/include/sys/ipc.h" 2 3 4
# 52 "/usr/include/sys/ipc.h" 3 4
extern "C" {


extern key_t ftok (__const char *__pathname, int __proj_id) throw ();

}
# 31 "/usr/local/include/ace/os_include/sys/os_ipc.h" 2 3




extern "C"
{
# 70 "/usr/local/include/ace/os_include/sys/os_ipc.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 74 "/usr/local/include/ace/os_include/sys/os_ipc.h" 2 3
# 28 "/usr/local/include/ace/os_include/sys/os_sem.h" 2 3


# 1 "/usr/include/sys/sem.h" 1 3 4
# 25 "/usr/include/sys/sem.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 26 "/usr/include/sys/sem.h" 2 3 4





# 1 "/usr/include/bits/sem.h" 1 3 4
# 39 "/usr/include/bits/sem.h" 3 4
struct semid_ds
{
  struct ipc_perm sem_perm;
  __time_t sem_otime;
  unsigned long int __unused1;
  __time_t sem_ctime;
  unsigned long int __unused2;
  unsigned long int sem_nsems;
  unsigned long int __unused3;
  unsigned long int __unused4;
};
# 73 "/usr/include/bits/sem.h" 3 4
struct seminfo
{
  int semmap;
  int semmni;
  int semmns;
  int semmnu;
  int semmsl;
  int semopm;
  int semume;
  int semusz;
  int semvmx;
  int semaem;
};
# 32 "/usr/include/sys/sem.h" 2 3 4
# 42 "/usr/include/sys/sem.h" 3 4
struct sembuf
{
  unsigned short int sem_num;
  short int sem_op;
  short int sem_flg;
};


extern "C" {


extern int semctl (int __semid, int __semnum, int __cmd, ...) throw ();


extern int semget (key_t __key, int __nsems, int __semflg) throw ();


extern int semop (int __semid, struct sembuf *__sops, size_t __nsops) throw ();



extern int semtimedop (int __semid, struct sembuf *__sops, size_t __nsops,
         __const struct timespec *__timeout) throw ();


}
# 31 "/usr/local/include/ace/os_include/sys/os_sem.h" 2 3




extern "C"
{
# 74 "/usr/local/include/ace/os_include/sys/os_sem.h" 3
   union semun
   {

     int val;

     struct semid_ds *buf;

     u_short *array;
   };



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 90 "/usr/local/include/ace/os_include/sys/os_sem.h" 2 3
# 35 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 1 "/usr/local/include/ace/os_include/os_semaphore.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_semaphore.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_semaphore.h" 2 3
# 30 "/usr/local/include/ace/os_include/os_semaphore.h" 3
# 1 "/usr/include/semaphore.h" 1 3 4
# 30 "/usr/include/semaphore.h" 3 4
# 1 "/usr/include/bits/semaphore.h" 1 3 4
# 24 "/usr/include/bits/semaphore.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 25 "/usr/include/bits/semaphore.h" 2 3 4
# 37 "/usr/include/bits/semaphore.h" 3 4
typedef union
{
  char __size[32];
  long int __align;
} sem_t;
# 31 "/usr/include/semaphore.h" 2 3 4


extern "C" {



extern int sem_init (sem_t *__sem, int __pshared, unsigned int __value)
     throw ();

extern int sem_destroy (sem_t *__sem) throw ();


extern sem_t *sem_open (__const char *__name, int __oflag, ...) throw ();


extern int sem_close (sem_t *__sem) throw ();


extern int sem_unlink (__const char *__name) throw ();





extern int sem_wait (sem_t *__sem);






extern int sem_timedwait (sem_t *__restrict __sem,
     __const struct timespec *__restrict __abstime);



extern int sem_trywait (sem_t *__sem) throw ();


extern int sem_post (sem_t *__sem) throw ();


extern int sem_getvalue (sem_t *__restrict __sem, int *__restrict __sval)
     throw ();


}
# 31 "/usr/local/include/ace/os_include/os_semaphore.h" 2 3




extern "C"
{







   typedef struct
   {



     sem_t *sema_;



     char *name_;
# 69 "/usr/local/include/ace/os_include/os_semaphore.h" 3
   } ACE_sema_t;



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 77 "/usr/local/include/ace/os_include/os_semaphore.h" 2 3
# 36 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 1 "/usr/local/include/ace/OS_Memory.h" 1 3
# 17 "/usr/local/include/ace/OS_Memory.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/OS_Memory.h" 2 3
# 26 "/usr/local/include/ace/OS_Memory.h" 3
# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 27 "/usr/local/include/ace/OS_Memory.h" 2 3
# 59 "/usr/local/include/ace/OS_Memory.h" 3





typedef void * ACE_MALLOC_T;



# 246 "/usr/local/include/ace/OS_Memory.h" 3

# 295 "/usr/local/include/ace/OS_Memory.h" 3
inline uintptr_t
ACE_align_binary (uintptr_t ptr, uintptr_t alignment)
{
  uintptr_t const tmp = alignment - 1;
  return (ptr + tmp) & (~tmp);
}
# 322 "/usr/local/include/ace/OS_Memory.h" 3
inline char *
ACE_ptr_align_binary (char const * ptr, uintptr_t alignment)
{
  return
    reinterpret_cast<char *> (
      ACE_align_binary (reinterpret_cast<uintptr_t> (ptr), alignment));
}


inline char *
ACE_ptr_align_binary (unsigned char const * ptr, uintptr_t alignment)
{
  return
    ACE_ptr_align_binary (reinterpret_cast<char const *> (ptr), alignment);
}




# 1 "/usr/local/include/ace/OS_NS_stdlib.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_stdlib.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_stdlib.h" 2 3
# 31 "/usr/local/include/ace/OS_NS_stdlib.h" 3
# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 32 "/usr/local/include/ace/OS_NS_stdlib.h" 2 3
# 46 "/usr/local/include/ace/OS_NS_stdlib.h" 3
extern "C" {
  typedef int (*ACE_COMPARE_FUNC)(const void *, const void *);
}
# 64 "/usr/local/include/ace/OS_NS_stdlib.h" 3
inline ACE_INT64 ace_strtoll_helper (const char *s, char **ptr, int base)
{




  return ::strtoll (s, ptr, base);

}



inline ACE_INT64 ace_strtoull_helper (const char *s, char **ptr, int base)
{




  return ::strtoull (s, ptr, base);

}




namespace ACE_OS {







  extern inline
  void _exit (int status = 0);

  extern inline
  void abort (void);





  extern inline
  int atexit (ACE_EXIT_HOOK func, const char* name = 0);




  extern inline
  int atoi (const char *s);





  extern inline
  int atoi (const wchar_t *s);





  extern inline
  long atol (const char *s);





  extern inline
  long atol (const wchar_t *s);





  extern inline
  double atof (const char *s);





  extern inline
  double atof (const wchar_t *s);






  extern inline
  void *atop (const char *s);





  extern inline
  void *atop (const wchar_t *s);


  extern inline
  void *bsearch (const void *key,
                 const void *base,
                 size_t nel,
                 size_t size,
                 ACE_COMPARE_FUNC);

  extern
  void *calloc (size_t elements, size_t sizeof_elements);

  extern
  void exit (int status = 0);

  extern
  void free (void *);

  extern inline
  char *getenv (const char *symbol);







  extern
  ACE_TCHAR *getenvstrings (void);



  extern inline
  char *itoa (int value, char *string, int radix);



  extern inline
  wchar_t *itoa (int value, wchar_t *string, int radix);




  extern
  char *itoa_emulation (int value, char *string, int radix);




  extern
  wchar_t *itow_emulation (int value, wchar_t *string, int radix);


  extern
  void *malloc (size_t);

  extern inline
  ACE_HANDLE mkstemp (char *s);


  extern inline
  ACE_HANDLE mkstemp (wchar_t *s);
# 235 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  char *mktemp (char *s);


  extern inline
  wchar_t *mktemp (wchar_t *s);






  extern inline
  int putenv (const char *string);
# 259 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  void qsort (void *base,
              size_t nel,
              size_t width,
              ACE_COMPARE_FUNC);

  extern inline
  int setenv(const char *envname, const char *envval, int overwrite);

  extern inline
  int unsetenv(const char *name);

  extern inline
  int rand (void);

  extern inline
  int rand_r (ACE_RANDR_TYPE &seed);

  extern
  void *realloc (void *, size_t);


  extern inline



  char *realpath (const char *file_name, char *resolved_name);


  extern inline
  wchar_t *realpath (const wchar_t *file_name, wchar_t *resolved_name);




  extern ACE_EXIT_HOOK exit_hook_;


  extern inline
  ACE_EXIT_HOOK set_exit_hook (ACE_EXIT_HOOK hook);

  extern inline
  void srand (u_int seed);


  extern
  ACE_TCHAR *strenvdup (const ACE_TCHAR *str);



  extern inline
  double strtod (const char *s, char **endptr);




  extern inline
  double strtod (const wchar_t *s, wchar_t **endptr);



  extern inline
  long strtol (const char *s, char **ptr, int base);
# 330 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  long strtol (const wchar_t *s, wchar_t **ptr, int base);
# 341 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  unsigned long strtoul (const char *s, char **ptr, int base);
# 353 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  unsigned long strtoul (const wchar_t *s, wchar_t **ptr, int base);
# 366 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  ACE_INT64 strtoll (const char *s, char **ptr, int base);
# 378 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  ACE_INT64 strtoll (const wchar_t *s, wchar_t **ptr, int base);
# 391 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  ACE_UINT64 strtoull (const char *s, char **ptr, int base);
# 403 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  ACE_UINT64 strtoull (const wchar_t *s, wchar_t **ptr, int base);
# 415 "/usr/local/include/ace/OS_NS_stdlib.h" 3
  extern inline
  int system (const ACE_TCHAR *s);




  extern inline
  const char *getprogname ();


  extern
  const char *getprogname_emulation ();





  extern inline
  void setprogname (const char* name);


  extern
  void setprogname_emulation (const char* name);


}








# 1 "/usr/local/include/ace/OS_NS_stdlib.inl" 1 3





# 1 "/usr/local/include/ace/Object_Manager_Base.h" 1 3
# 19 "/usr/local/include/ace/Object_Manager_Base.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/Object_Manager_Base.h" 2 3
# 28 "/usr/local/include/ace/Object_Manager_Base.h" 3
# 1 "/usr/local/include/ace/Cleanup.h" 1 3
# 20 "/usr/local/include/ace/Cleanup.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/Cleanup.h" 2 3
# 30 "/usr/local/include/ace/Cleanup.h" 3
# 1 "/usr/local/include/ace/Intrusive_List.h" 1 3
# 15 "/usr/local/include/ace/Intrusive_List.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Intrusive_List.h" 2 3








# 57 "/usr/local/include/ace/Intrusive_List.h" 3
template <class T>
class ACE_Intrusive_List
{
public:



  ACE_Intrusive_List (void);


  ~ACE_Intrusive_List (void);




  bool is_empty (void) const;



  bool empty (void) const;


  void push_front (T *node);


  void push_back (T *node);


  T *pop_front (void);


  T *pop_back (void);


  T *head (void) const;


  T *tail (void) const;





  void remove (T *node);


  void swap(ACE_Intrusive_List<T> & rhs);






  void unsafe_remove (T *node);

private:




  ACE_Intrusive_List (const ACE_Intrusive_List<T> &);
  ACE_Intrusive_List<T>& operator= (const ACE_Intrusive_List<T> &);


private:

  T *head_;


  T *tail_;
};




# 1 "/usr/local/include/ace/Intrusive_List.inl" 1 3




# 1 "/usr/include/c++/4.4/algorithm" 1 3
# 59 "/usr/include/c++/4.4/algorithm" 3
       
# 60 "/usr/include/c++/4.4/algorithm" 3


# 1 "/usr/include/c++/4.4/bits/stl_algo.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_algo.h" 3
# 1 "/usr/include/c++/4.4/cstdlib" 1 3
# 41 "/usr/include/c++/4.4/cstdlib" 3
       
# 42 "/usr/include/c++/4.4/cstdlib" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cstdlib" 2 3
# 100 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }

}
# 157 "/usr/include/c++/4.4/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {


  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 190 "/usr/include/c++/4.4/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;

}

namespace std __attribute__ ((__visibility__ ("default"))) {


  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;

}
# 61 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.4/bits/algorithmfwd.h" 1 3
# 33 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
       
# 34 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3






namespace std __attribute__ ((__visibility__ ("default"))) {
# 198 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);
# 227 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);
# 246 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 273 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);
# 327 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);
# 412 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);
# 429 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);
# 450 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 527 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&);

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);

}

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);
# 630 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter, _Generator&);

  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);

}
# 62 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_heap.h" 1 3
# 62 "/usr/include/c++/4.4/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {






  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 152 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 201 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value));
    }
# 274 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      --__last;
      std::__pop_heap(__first, __last, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value), __comp);
    }
# 348 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;

      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
# 371 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 411 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 450 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 479 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 576 "/usr/include/c++/4.4/bits/stl_heap.h" 3
}
# 63 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 1 3
# 61 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
# 1 "/usr/include/c++/4.4/bits/stl_construct.h" 1 3
# 62 "/usr/include/c++/4.4/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {





  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }




  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(&*__first);
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(&*__first);
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }

}
# 62 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<bool>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        uninitialized_copy(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  ::new(static_cast<void*>(&*__cur)) typename
      iterator_traits<_ForwardIterator>::value_type(*__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        uninitialized_copy(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_pod(_ValueType1)
     && __is_pod(_ValueType2))>::
 uninitialized_copy(__first, __last, __result);
    }


  template<bool>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        uninitialized_fill(_ForwardIterator __first,
      _ForwardIterator __last, const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(&*__cur, __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        uninitialized_fill(_ForwardIterator __first,
      _ForwardIterator __last, const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 162 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_pod(_ValueType)>::
 uninitialized_fill(__first, __last, __x);
    }


  template<bool>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        uninitialized_fill_n(_ForwardIterator __first, _Size __n,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(&*__cur, __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        uninitialized_fill_n(_ForwardIterator __first, _Size __n,
        const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 216 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_pod(_ValueType)>::
 uninitialized_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(&*__cur, *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a((__first),
      (__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 330 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }
# 476 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
}
# 63 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (!__is_pod(_Tp) && _M_len > 0)
     std::uninitialized_fill_n(_M_buffer, _M_len, *__first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }

}
# 64 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3





namespace std __attribute__ ((__visibility__ ("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _Tp>
    inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)
    {

     
      if (__a < __b)
 if (__b < __c)
   return __b;
 else if (__a < __c)
   return __c;
 else
   return __a;
      else if (__a < __c)
 return __a;
      else if (__b < __c)
 return __c;
      else
 return __b;
    }
# 117 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
    {

     

      if (__comp(__a, __b))
 if (__comp(__b, __c))
   return __b;
 else if (__comp(__a, __c))
   return __c;
 else
   return __a;
      else if (__comp(__a, __c))
 return __a;
      else if (__comp(__b, __c))
 return __c;
      else
 return __b;
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 338 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 423 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!bool(__binary_pred(*__lookAhead, __val)))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 661 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 707 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 923 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 1098 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1141 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1181 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = (*__first);
      return ++__dest;
    }
# 1221 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {

     

     


      ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = (*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     



      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1449 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1476 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      const _Distance __n = __last - __first;
      const _Distance __k = __middle - __first;
      const _Distance __l = __n - __k;

      if (__k == __l)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      const _Distance __d = std::__gcd(__n, __k);

      for (_Distance __i = 0; __i < __d; __i++)
 {
   _ValueType __tmp = (*__first);
   _RandomAccessIterator __p = __first;

   if (__k < __l)
     {
       for (_Distance __j = 0; __j < __l / __d; __j++)
  {
    if (__p > __first + __l)
      {
        *__p = (*(__p - __l));
        __p -= __l;
      }

    *__p = (*(__p + __k));
    __p += __k;
  }
     }
   else
     {
       for (_Distance __j = 0; __j < __k / __d - 1; __j ++)
  {
    if (__p < __last - __k)
      {
        *__p = (*(__p + __k));
        __p += __k;
      }
    *__p = (*(__p - __l));
    __p -= __l;
  }
     }

   *__p = (__tmp);
   ++__first;
 }
    }
# 1669 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1703 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }




  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }


  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = *__first;
  ++__result1;
       }
     else
       {
  *__result2 = *__first;
  ++__result2;
       }
   std::copy(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 1861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1943 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     
      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2009 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     

     

      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)
    {
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = *__next;
   __last = __next;
   --__next;
 }
      *__last = __val;
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,
         _Compare __comp)
    {
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = *__next;
   __last = __next;
   --__next;
 }
      *__last = __val;
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   typename iterator_traits<_RandomAccessIterator>::value_type
     __val = *__i;
   if (__val < *__first)
     {
       std::copy_backward(__first, __i, __i + 1);
       *__first = __val;
     }
   else
     std::__unguarded_linear_insert(__i, __val);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   typename iterator_traits<_RandomAccessIterator>::value_type
     __val = *__i;
   if (__comp(__val, *__first))
     {
       std::copy_backward(__first, __i, __i + 1);
       *__first = __val;
     }
   else
     std::__unguarded_linear_insert(__i, __val, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, _ValueType(*__i));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, _ValueType(*__i), __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Tp __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _Tp __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last
          - 1))));
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last - 1),
        __comp)),
           __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }


  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last
          - 1))));
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last - 1),
        __comp)),
           __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2418 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2469 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

      ;


      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2518 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2569 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

      ;


      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2624 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
     
      ;
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       __left = std::lower_bound(__first, __middle, __val);
       std::advance(__first, __len);
       __right = std::upper_bound(++__middle, __first, __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2686 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val,
  _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

     

      ;

      ;


      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __left = std::lower_bound(__first, __middle, __val, __comp);
       std::advance(__first, __len);
       __right = std::upper_bound(++__middle, __first, __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2747 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     
      ;
      ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2780 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     

      ;

      ;


      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    _BidirectionalIterator3
    __merge_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 return std::copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
 return std::copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = *__last1;
       if (__first1 == __last1)
  return std::copy_backward(__first2, ++__last2, __result);
       --__last1;
     }
   else
     {
       *--__result = *__last2;
       if (__first2 == __last2)
  return std::copy_backward(__first1, ++__last1, __result);
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    _BidirectionalIterator3
    __merge_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 return std::copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
 return std::copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = *__last1;
       if (__first1 == __last1)
  return std::copy_backward(__first2, ++__last2, __result);
       --__last1;
     }
   else
     {
       *--__result = *__last2;
       if (__first2 == __last2)
  return std::copy_backward(__first1, ++__last1, __result);
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   __buffer_end = std::copy(__middle, __last, __buffer);
   std::copy_backward(__first, __middle, __last);
   return std::copy(__buffer, __buffer_end, __first);
 }
      else if (__len1 <= __buffer_size)
 {
   __buffer_end = std::copy(__first, __middle, __buffer);
   std::copy(__middle, __last, __first);
   return std::copy_backward(__buffer, __buffer_end, __last);
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::merge(__buffer, __buffer_end, __middle, __last,
    __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__merge_backward(__first, __middle, __buffer,
    __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::merge(__buffer, __buffer_end, __middle, __last,
    __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__merge_backward(__first, __middle, __buffer, __buffer_end,
    __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     
      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3183 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     

      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::merge(__first, __first + __step_size,
        __first + __step_size,
        __first + __two_step,
        __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::merge(__first, __first + __step_size,
       __first + __step_size, __last,
       __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::merge(__first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result,
    __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::merge(__first, __first + __step_size,
       __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3468 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3517 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3572 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3629 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3685 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3802 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3839 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 4176 "/usr/include/c++/4.4/bits/stl_algo.h" 3
}

namespace std __attribute__ ((__visibility__ ("default"))) {
# 4192 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }
# 4213 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {

     
     

      ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4237 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4266 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4305 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4337 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4369 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4401 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4426 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4466 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4537 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4611 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4647 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4689 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4725 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4758 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4790 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4822 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4850 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      for (; __n > 0; --__n, ++__first)
 *__first = __gen();
      return __first;
    }
# 4886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4925 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4957 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 4985 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _RandomNumberGenerator& __rand)
    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }
# 5017 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5051 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5090 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5167 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5205 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5241 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5282 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5345 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5405 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     
      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5447 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     


      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5493 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5560 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5627 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5684 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5803 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 5927 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5984 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6012 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6040 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6068 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }

}
# 63 "/usr/include/c++/4.4/algorithm" 2 3
# 6 "/usr/local/include/ace/Intrusive_List.inl" 2 3



template<class T> inline bool
ACE_Intrusive_List<T>::is_empty (void) const
{
  return this->head_ == 0;
}

template<class T> inline bool
ACE_Intrusive_List<T>::empty (void) const
{
  return this->is_empty ();
}

template<class T> inline T *
ACE_Intrusive_List<T>::head (void) const
{
  return this->head_;
}

template<class T> inline T *
ACE_Intrusive_List<T>::tail (void) const
{
  return this->tail_;
}

template<class T> inline void
ACE_Intrusive_List<T>::swap(ACE_Intrusive_List<T> & rhs)
{
  std::swap(head_, rhs.head_);
  std::swap(tail_, rhs.tail_);
}


# 133 "/usr/local/include/ace/Intrusive_List.h" 2 3



# 1 "/usr/local/include/ace/Intrusive_List.cpp" 1 3





# 1 "/usr/local/include/ace/Intrusive_List.h" 1 3
# 7 "/usr/local/include/ace/Intrusive_List.cpp" 2 3
# 16 "/usr/local/include/ace/Intrusive_List.cpp" 3


template <class T>
ACE_Intrusive_List<T>::ACE_Intrusive_List (void)
  : head_ (0)
  , tail_ (0)
{
}

template<class T>
ACE_Intrusive_List<T>::~ACE_Intrusive_List (void)
{
}

template<class T> void
ACE_Intrusive_List<T>::push_back (T *node)
{
  if (this->tail_ == 0)
    {
      this->tail_ = node;
      this->head_ = node;
      node->next (0);
      node->prev (0);
    }
  else
    {
      this->tail_->next (node);
      node->prev (this->tail_);
      node->next (0);
      this->tail_ = node;
    }
}

template<class T> void
ACE_Intrusive_List<T>::push_front (T *node)
{
  if (this->head_ == 0)
    {
      this->tail_ = node;
      this->head_ = node;
      node->next (0);
      node->prev (0);
    }
  else
    {
      this->head_->prev (node);
      node->next (this->head_);
      node->prev (0);
      this->head_ = node;
    }
}

template<class T> T *
ACE_Intrusive_List<T>::pop_front (void)
{
  T *node = this->head_;
  if (node != 0)
    {
      this->unsafe_remove (node);
    }
  return node;
}

template<class T> T *
ACE_Intrusive_List<T>::pop_back (void)
{
  T *node = this->tail_;
  if (node != 0)
    {
      this->unsafe_remove (node);
    }
  return node;
}

template<class T> void
ACE_Intrusive_List<T>::remove (T *node)
{
  for (T *i = this->head_; i != 0; i = i->next ())
    {
      if (node == i)
        {
          this->unsafe_remove (node);
          return;
        }
    }
}

template<class T> void
ACE_Intrusive_List<T>::unsafe_remove (T *node)
{
  if (node->prev () != 0)
    node->prev ()->next (node->next ());
  else
    this->head_ = node->next ();

  if (node->next () != 0)
    node->next ()->prev (node->prev ());
  else
    this->tail_ = node->prev ();

  node->next (0);
  node->prev (0);
}
# 155 "/usr/local/include/ace/Intrusive_List.cpp" 3

# 137 "/usr/local/include/ace/Intrusive_List.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 144 "/usr/local/include/ace/Intrusive_List.h" 2 3
# 31 "/usr/local/include/ace/Cleanup.h" 2 3
# 1 "/usr/local/include/ace/Intrusive_List_Node.h" 1 3
# 15 "/usr/local/include/ace/Intrusive_List_Node.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Intrusive_List_Node.h" 2 3








# 41 "/usr/local/include/ace/Intrusive_List_Node.h" 3
template <class T>
class ACE_Intrusive_List_Node
{
public:




  T *prev (void) const;
  void prev (T *);
  T *next (void) const;
  void next (T *);


protected:





  ACE_Intrusive_List_Node (void);

private:

  T *prev_;
  T *next_;
};




# 1 "/usr/local/include/ace/Intrusive_List_Node.inl" 1 3






template<class T> inline T*
ACE_Intrusive_List_Node<T>::prev (void) const
{
  return this->prev_;
}

template<class T> inline void
ACE_Intrusive_List_Node<T>::prev (T *x)
{
  this->prev_ = x;
}

template<class T> inline T*
ACE_Intrusive_List_Node<T>::next (void) const
{
  return this->next_;
}

template<class T> inline void
ACE_Intrusive_List_Node<T>::next (T *x)
{
  this->next_ = x;
}


# 73 "/usr/local/include/ace/Intrusive_List_Node.h" 2 3



# 1 "/usr/local/include/ace/Intrusive_List_Node.cpp" 1 3





# 1 "/usr/local/include/ace/Intrusive_List_Node.h" 1 3
# 7 "/usr/local/include/ace/Intrusive_List_Node.cpp" 2 3
# 16 "/usr/local/include/ace/Intrusive_List_Node.cpp" 3


template<class T>
ACE_Intrusive_List_Node<T>::ACE_Intrusive_List_Node (void)
  : prev_ (0)
  , next_ (0)
{
}


# 77 "/usr/local/include/ace/Intrusive_List_Node.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 84 "/usr/local/include/ace/Intrusive_List_Node.h" 2 3
# 32 "/usr/local/include/ace/Cleanup.h" 2 3
# 40 "/usr/local/include/ace/Cleanup.h" 3







class ACE_Cleanup
{
public:

  ACE_Cleanup (void);


  virtual ~ACE_Cleanup (void);


  virtual void cleanup (void *param = 0);
};


extern "C"
void ace_cleanup_destroyer (ACE_Cleanup *, void *param = 0);
# 71 "/usr/local/include/ace/Cleanup.h" 3
class ACE_Cleanup_Info_Node : public ACE_Intrusive_List_Node<ACE_Cleanup_Info_Node>
{
public:
  ACE_Cleanup_Info_Node (void);
  ACE_Cleanup_Info_Node (void *object,
                         ACE_CLEANUP_FUNC cleanup_hook,
                         void *param,
                         const char *name);
  ~ACE_Cleanup_Info_Node (void);


  bool operator== (const ACE_Cleanup_Info_Node &o) const;


  bool operator!= (const ACE_Cleanup_Info_Node &o) const;

  void* object(void);

  ACE_CLEANUP_FUNC cleanup_hook (void);

  void *param (void);
private:

  void *object_;


  ACE_CLEANUP_FUNC cleanup_hook_;


  void *param_;


  const char *name_;
};

typedef ACE_Intrusive_List<ACE_Cleanup_Info_Node> ACE_Cleanup_Info_Node_List;
# 117 "/usr/local/include/ace/Cleanup.h" 3
class ACE_OS_Exit_Info
{
public:

  ACE_OS_Exit_Info (void);


  ~ACE_OS_Exit_Info (void);


  int at_exit_i (void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param, const char* name = 0);



  bool find (void *object);



  bool remove (void *object);



  void call_hooks ();

private:



  ACE_Cleanup_Info_Node_List registered_objects_;
};









# 1 "/usr/local/include/ace/Cleanup.inl" 1 3






inline
ACE_Cleanup::ACE_Cleanup (void)
{
}

inline void*
ACE_Cleanup_Info_Node::object(void)
{
  return this->object_;
}

inline ACE_CLEANUP_FUNC
ACE_Cleanup_Info_Node::cleanup_hook (void)
{
  return this->cleanup_hook_;
}

inline void *
ACE_Cleanup_Info_Node::param (void)
{
  return this->param_;
}


# 157 "/usr/local/include/ace/Cleanup.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 160 "/usr/local/include/ace/Cleanup.h" 2 3
# 29 "/usr/local/include/ace/Object_Manager_Base.h" 2 3





class ACE_Object_Manager;
class ACE_OS_Object_Manager_Manager;
class ACE_TSS_Cleanup;
class ACE_TSS_Emulation;
class ACE_Log_Msg;
class ACE_Thread_Hook;
# 48 "/usr/local/include/ace/Object_Manager_Base.h" 3
class ACE_Object_Manager_Base
{
protected:

  ACE_Object_Manager_Base (void);


  virtual ~ACE_Object_Manager_Base (void);

public:





  virtual int init (void) = 0;






  virtual int fini (void) = 0;

  enum Object_Manager_State
    {
      OBJ_MAN_UNINITIALIZED = 0,
      OBJ_MAN_INITIALIZING,
      OBJ_MAN_INITIALIZED,
      OBJ_MAN_SHUTTING_DOWN,
      OBJ_MAN_SHUT_DOWN
    };

protected:
# 91 "/usr/local/include/ace/Object_Manager_Base.h" 3
  int starting_up_i (void);
# 100 "/usr/local/include/ace/Object_Manager_Base.h" 3
  int shutting_down_i (void);


  Object_Manager_State object_manager_state_;







  bool dynamically_allocated_;


  ACE_Object_Manager_Base *next_;
private:

  ACE_Object_Manager_Base (const ACE_Object_Manager_Base &);
  ACE_Object_Manager_Base &operator= (const ACE_Object_Manager_Base &);
};

extern "C"
void
ACE_OS_Object_Manager_Internal_Exit_Hook (void);



class ACE_Log_Msg;

class ACE_OS_Object_Manager : public ACE_Object_Manager_Base
{
public:

  virtual int init (void);


  virtual int fini (void);






  static int starting_up (void);



  static int shutting_down (void);


  enum Preallocated_Object
    {

      ACE_OS_MONITOR_LOCK,
      ACE_TSS_CLEANUP_LOCK,
      ACE_LOG_MSG_INSTANCE_LOCK,
# 170 "/usr/local/include/ace/Object_Manager_Base.h" 3
      ACE_OS_PREALLOCATED_OBJECTS
    };



  static sigset_t *default_mask (void);


  static ACE_Thread_Hook *thread_hook (void);


  static ACE_Thread_Hook *thread_hook (ACE_Thread_Hook *new_thread_hook);
# 192 "/usr/local/include/ace/Object_Manager_Base.h" 3
public:






  ACE_OS_Object_Manager (void);


  ~ACE_OS_Object_Manager (void);


  static ACE_OS_Object_Manager *instance (void);


  int at_exit (ACE_EXIT_HOOK func, const char* name = 0);



  static ACE_OS_Object_Manager *instance_;


  static void *preallocated_object[ACE_OS_PREALLOCATED_OBJECTS];


  sigset_t *default_mask_;


  ACE_Thread_Hook *thread_hook_;


  ACE_OS_Exit_Info exit_info_;
# 234 "/usr/local/include/ace/Object_Manager_Base.h" 3
  static void print_error_message (unsigned int line_number, const ACE_TCHAR *message);


  friend class ACE_Object_Manager;
  friend class ACE_OS_Object_Manager_Manager;
  friend class ACE_TSS_Cleanup;
  friend class ACE_TSS_Emulation;
  friend class ACE_Log_Msg;
  friend void ACE_OS_Object_Manager_Internal_Exit_Hook ();
};



# 1 "/usr/local/include/ace/post.h" 1 3
# 248 "/usr/local/include/ace/Object_Manager_Base.h" 2 3
# 7 "/usr/local/include/ace/OS_NS_stdlib.inl" 2 3
# 1 "/usr/local/include/ace/OS_NS_string.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_string.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_string.h" 2 3







# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 29 "/usr/local/include/ace/OS_NS_string.h" 2 3
# 37 "/usr/local/include/ace/OS_NS_string.h" 3


namespace ACE_OS {
# 51 "/usr/local/include/ace/OS_NS_string.h" 3
  extern inline
  const void *memchr (const void *s, int c, size_t len);


  extern inline
  void *memchr (void *s, int c, size_t len);
# 65 "/usr/local/include/ace/OS_NS_string.h" 3
  extern inline
  int memcmp (const void *t, const void *s, size_t len);


  extern inline
  void *memcpy (void *t, const void *s, size_t len);
# 83 "/usr/local/include/ace/OS_NS_string.h" 3
  extern inline
  void *memmove (void *t, const void *s, size_t len);


  extern inline
  void *memset (void *s, int c, size_t len);


  extern inline
  char *strcat (char *s, const char *t);



  extern inline
  wchar_t *strcat (wchar_t *s, const wchar_t *t);




  extern inline
  const char *strchr (const char *s, int c);




  extern inline
  const wchar_t *strchr (const wchar_t *s, wchar_t c);



  extern inline
  char *strchr (char *s, int c);



  extern inline
  wchar_t *strchr (wchar_t *s, wchar_t c);



  extern inline
  int strcmp (const char *s, const char *t);


  extern inline
  int strcmp (const wchar_t *s, const wchar_t *t);


  extern inline
  char *strcpy (char *s, const char *t);



  extern inline
  wchar_t *strcpy (wchar_t *s, const wchar_t *t);




  extern inline
  size_t strcspn (const char *s, const char *reject);




  extern inline
  size_t strcspn (const wchar_t *s, const wchar_t *reject);



  extern inline
  char *strdup (const char *s);
# 164 "/usr/local/include/ace/OS_NS_string.h" 3
  extern inline
  wchar_t *strdup (const wchar_t *s);



  extern
  wchar_t *strdup_emulation (const wchar_t *s);





  extern
  char *strecpy (char *des, const char *src);




  extern
  wchar_t *strecpy (wchar_t *s, const wchar_t *t);





  extern
  char *strerror (int errnum);
# 203 "/usr/local/include/ace/OS_NS_string.h" 3
  extern
  char *strsignal (int signum);


  extern inline
  size_t strlen (const char *s);


  extern inline
  size_t strlen (const wchar_t *s);


  extern inline
  char *strncat (char *s, const char *t, size_t len);


  extern inline
  wchar_t *strncat (wchar_t *s, const wchar_t *t, size_t len);



  extern
  const char *strnchr (const char *s, int c, size_t len);



  extern
  const wchar_t *strnchr (const wchar_t *s, wchar_t c, size_t len);


  extern inline
  char *strnchr (char *s, int c, size_t len);


  extern inline
  wchar_t *strnchr (wchar_t *s, wchar_t c, size_t len);


  extern inline
  int strncmp (const char *s, const char *t, size_t len);


  extern inline
  int strncmp (const wchar_t *s, const wchar_t *t, size_t len);


  extern inline
  char *strncpy (char *s, const char *t, size_t len);


  extern inline
  wchar_t *strncpy (wchar_t *s, const wchar_t *t, size_t len);
# 265 "/usr/local/include/ace/OS_NS_string.h" 3
  extern inline
  size_t strnlen (const char *s, size_t maxlen);
# 277 "/usr/local/include/ace/OS_NS_string.h" 3
  extern inline
  size_t strnlen (const wchar_t *s, size_t maxlen);



  extern
  const char *strnstr (const char *s, const char *t, size_t len);



  extern
  const wchar_t *strnstr (const wchar_t *s,
                              const wchar_t *t,
                              size_t len);


  extern inline
  char *strnstr (char *s, const char *t, size_t len);


  extern inline
  wchar_t *strnstr (wchar_t *s, const wchar_t *t, size_t len);


  extern inline
  const char *strpbrk (const char *s1, const char *s2);



  extern inline
  const wchar_t *strpbrk (const wchar_t *s1, const wchar_t *s2);



  extern inline
  char *strpbrk (char *s1, const char *s2);



  extern inline
  wchar_t *strpbrk (wchar_t *s1, const wchar_t *s2);




  extern inline
  const char *strrchr (const char *s, int c);




  extern inline
  const wchar_t *strrchr (const wchar_t *s, wchar_t c);



  extern inline
  char *strrchr (char *s, int c);



  extern inline
  wchar_t *strrchr (wchar_t *s, wchar_t c);
# 370 "/usr/local/include/ace/OS_NS_string.h" 3
  extern
  char *strsncpy (char *dst,
                  const char *src,
                  size_t maxlen);
# 391 "/usr/local/include/ace/OS_NS_string.h" 3
  extern
  wchar_t *strsncpy (wchar_t *dst,
                         const wchar_t *src,
                         size_t maxlen);



  extern inline
  size_t strspn (const char *s1, const char *s2);




  extern inline
  size_t strspn (const wchar_t *s1, const wchar_t *s2);




  extern inline
  const char *strstr (const char *s, const char *t);




  extern inline
  const wchar_t *strstr (const wchar_t *s, const wchar_t *t);



  extern inline
  char *strstr (char *s, const char *t);



  extern inline
  wchar_t *strstr (wchar_t *s, const wchar_t *t);



  extern inline
  char *strtok (char *s, const char *tokens);



  extern inline
  wchar_t *strtok (wchar_t *s, const wchar_t *tokens);





  extern inline
  char *strtok_r (char *s, const char *tokens, char **lasts);



  extern inline
  wchar_t *strtok_r (wchar_t *s, const wchar_t *tokens, wchar_t **lasts);
# 464 "/usr/local/include/ace/OS_NS_string.h" 3
}








# 1 "/usr/local/include/ace/OS_NS_string.inl" 1 3






# 1 "/usr/local/include/ace/OS_NS_wchar.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_wchar.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_wchar.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_wchar.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_wchar.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_wchar.h" 2 3
# 31 "/usr/local/include/ace/os_include/os_wchar.h" 3
# 1 "/usr/local/include/ace/os_include/os_string.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_string.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_string.h" 2 3
# 36 "/usr/local/include/ace/os_include/os_string.h" 3
extern "C"
{
# 49 "/usr/local/include/ace/os_include/os_string.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 53 "/usr/local/include/ace/os_include/os_string.h" 2 3
# 32 "/usr/local/include/ace/os_include/os_wchar.h" 2 3
# 1 "/usr/local/include/ace/os_include/os_ctype.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_ctype.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_ctype.h" 2 3
# 33 "/usr/local/include/ace/os_include/os_ctype.h" 3
extern "C"
{





typedef int ctype_t;



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 48 "/usr/local/include/ace/os_include/os_ctype.h" 2 3
# 33 "/usr/local/include/ace/os_include/os_wchar.h" 2 3


# 1 "/usr/include/wchar.h" 1 3 4
# 36 "/usr/local/include/ace/os_include/os_wchar.h" 2 3




extern "C"
{
# 53 "/usr/local/include/ace/os_include/os_wchar.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 57 "/usr/local/include/ace/os_include/os_wchar.h" 2 3
# 29 "/usr/local/include/ace/OS_NS_wchar.h" 2 3
# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 30 "/usr/local/include/ace/OS_NS_wchar.h" 2 3
# 40 "/usr/local/include/ace/OS_NS_wchar.h" 3


namespace ACE_OS
{

  typedef wchar_t WChar;


  extern inline
  wint_t fgetwc (FILE* fp);
# 87 "/usr/local/include/ace/OS_NS_wchar.h" 3
  extern
  int wcsicmp_emulation (const wchar_t *string1,
                         const wchar_t *string2);
# 125 "/usr/local/include/ace/OS_NS_wchar.h" 3
  extern
  int wcsnicmp_emulation (const wchar_t *string1,
                          const wchar_t *string2,
                          size_t len);
# 165 "/usr/local/include/ace/OS_NS_wchar.h" 3
  extern inline
  u_int wslen (const WChar *);

  extern inline
  WChar *wscpy (WChar *,
                const WChar *);

  extern inline
  int wscmp (const WChar *,
             const WChar *);

  extern inline
  int wsncmp (const WChar *,
              const WChar *,
              size_t len);


  extern inline
  wint_t ungetwc (wint_t c, FILE* fp);


}








# 1 "/usr/local/include/ace/OS_NS_wchar.inl" 1 3







inline wint_t
ACE_OS::fgetwc (FILE* fp)
{




  do return (wint_t) (::fgetwc (fp)); while (0);

}


inline u_int
ACE_OS::wslen (const WChar *s)
{
  u_int len = 0;

  while (*s++ != 0)
    len++;

  return len;
}

inline ACE_OS::WChar *
ACE_OS::wscpy (WChar *dest, const WChar *src)
{
  WChar *original_dest = dest;

  while ((*dest++ = *src++) != 0)
    continue;

  return original_dest;
}

inline int
ACE_OS::wscmp (const WChar *s, const WChar *t)
{
  const WChar *scan1 = s;
  const WChar *scan2 = t;

  while (*scan1 != 0 && *scan1 == *scan2)
    {
      ++scan1;
      ++scan2;
    }

  return *scan1 - *scan2;
}

inline int
ACE_OS::wsncmp (const WChar *s, const WChar *t, size_t len)
{
  const WChar *scan1 = s;
  const WChar *scan2 = t;

  while (len != 0 && *scan1 != 0 && *scan1 == *scan2)
    {
      ++scan1;
      ++scan2;
      --len;
    }

  return len == 0 ? 0 : *scan1 - *scan2;
}


inline wint_t
ACE_OS::ungetwc (wint_t c, FILE* fp)
{





  do return (wint_t) (::ungetwc (c, fp)); while (0);

}



# 196 "/usr/local/include/ace/OS_NS_wchar.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 199 "/usr/local/include/ace/OS_NS_wchar.h" 2 3
# 8 "/usr/local/include/ace/OS_NS_string.inl" 2 3




inline const void *
ACE_OS::memchr (const void *s, int c, size_t len)
{

  return ::memchr (s, c, len);



}

inline void *
ACE_OS::memchr (void *s, int c, size_t len)
{
  return const_cast<void *> (ACE_OS::memchr (static_cast<const void *> (s),
                                             c,
                                             len));
}

inline int
ACE_OS::memcmp (const void *t, const void *s, size_t len)
{
  return ::memcmp (t, s, len);
}

inline void *
ACE_OS::memcpy (void *t, const void *s, size_t len)
{



  return ::memcpy (t, s, len);

}

inline void *
ACE_OS::memmove (void *t, const void *s, size_t len)
{
  return ::memmove (t, s, len);
}

inline void *
ACE_OS::memset (void *s, int c, size_t len)
{
# 103 "/usr/local/include/ace/OS_NS_string.inl" 3
  return ::memset (s, c, len);

}

inline char *
ACE_OS::strcat (char *s, const char *t)
{
  return ::strcat (s, t);
}


inline wchar_t *
ACE_OS::strcat (wchar_t *s, const wchar_t *t)
{



  return ::wcscat (s, t);

}


inline const char *
ACE_OS::strchr (const char *s, int c)
{
  return const_cast <const char *> (::strchr (s, c));
}


inline const wchar_t *
ACE_OS::strchr (const wchar_t *s, wchar_t c)
{



  return ::wcschr (s, c);

}


inline char *
ACE_OS::strchr (char *s, int c)
{
  return ::strchr (s, c);
}


inline wchar_t *
ACE_OS::strchr (wchar_t *s, wchar_t c)
{
  return
    const_cast<wchar_t *> (ACE_OS::strchr (const_cast<const wchar_t *> (s),
                                           c));
}


inline int
ACE_OS::strcmp (const char *s, const char *t)
{
  return ::strcmp (s, t);
}

inline int
ACE_OS::strcmp (const wchar_t *s, const wchar_t *t)
{



  return ::wcscmp (s, t);

}

inline char *
ACE_OS::strcpy (char *s, const char *t)
{
  return ::strcpy (s, t);
}


inline wchar_t *
ACE_OS::strcpy (wchar_t *s, const wchar_t *t)
{



  return ::wcscpy (s, t);

}


inline size_t
ACE_OS::strcspn (const char *s, const char *reject)
{
  return ::strcspn (s, reject);
}


inline size_t
ACE_OS::strcspn (const wchar_t *s, const wchar_t *reject)
{



  return ::wcscspn (s, reject);

}


inline char *
ACE_OS::strdup (const char *s)
{
# 222 "/usr/local/include/ace/OS_NS_string.inl" 3
  return ::strdup (s);

}


inline wchar_t *
ACE_OS::strdup (const wchar_t *s)
{


  return ACE_OS::strdup_emulation (s);







}


inline size_t
ACE_OS::strlen (const char *s)
{
  return ::strlen (s);
}

inline size_t
ACE_OS::strlen (const wchar_t *s)
{



  return ::wcslen (s);

}

inline char *
ACE_OS::strncat (char *s, const char *t, size_t len)
{




  return ::strncat (s, t, len);

}

inline wchar_t *
ACE_OS::strncat (wchar_t *s, const wchar_t *t, size_t len)
{






  return ::wcsncat (s, t, len);

}

inline char *
ACE_OS::strnchr (char *s, int c, size_t len)
{
  return const_cast<char *> (ACE_OS::strnchr (static_cast<const char *> (s),
                                              c,
                                              len));
}

inline wchar_t *
ACE_OS::strnchr (wchar_t *s, wchar_t c, size_t len)
{
  return
    const_cast<wchar_t *> (ACE_OS::strnchr (
                                 const_cast<const wchar_t *> (s),
                                 c,
                                 len));
}

inline int
ACE_OS::strncmp (const char *s, const char *t, size_t len)
{
  return ::strncmp (s, t, len);
}

inline int
ACE_OS::strncmp (const wchar_t *s, const wchar_t *t, size_t len)
{



  return ::wcsncmp (s, t, len);

}

inline char *
ACE_OS::strncpy (char *s, const char *t, size_t len)
{
  return ::strncpy (s, t, len);
}

inline wchar_t *
ACE_OS::strncpy (wchar_t *s, const wchar_t *t, size_t len)
{



  return ::wcsncpy (s, t, len);

}

inline size_t
ACE_OS::strnlen (const char *s, size_t maxlen)
{

  return ::strnlen (s, maxlen);







}

inline size_t
ACE_OS::strnlen (const wchar_t *s, size_t maxlen)
{

  return wcsnlen (s, maxlen);







}

inline char *
ACE_OS::strnstr (char *s, const char *t, size_t len)
{
  return
    const_cast <char *> (ACE_OS::strnstr (const_cast <const char *> (s), t, len));
}

inline wchar_t *
ACE_OS::strnstr (wchar_t *s, const wchar_t *t, size_t len)
{
  return
    const_cast<wchar_t *> (ACE_OS::strnstr (
                                 static_cast<const wchar_t *> (s),
                                 t,
                                 len));
}

inline const char *
ACE_OS::strpbrk (const char *s1, const char *s2)
{
  return const_cast <const char *> (::strpbrk (s1, s2));
}


inline const wchar_t *
ACE_OS::strpbrk (const wchar_t *s, const wchar_t *t)
{



  return ::wcspbrk (s, t);

}


inline char *
ACE_OS::strpbrk (char *s1, const char *s2)
{
  return ::strpbrk (s1, s2);
}


inline wchar_t *
ACE_OS::strpbrk (wchar_t *s, const wchar_t *t)
{
  return const_cast<wchar_t *> (ACE_OS::strpbrk (
                                  const_cast<const wchar_t *> (s), t));
}


inline const char *
ACE_OS::strrchr (const char *s, int c)
{



  return (const char *) ::strrchr (s, c);

}


inline const wchar_t *
ACE_OS::strrchr (const wchar_t *s, wchar_t c)
{



  return const_cast <const wchar_t *> (::wcsrchr (s, c));

}


inline char *
ACE_OS::strrchr (char *s, int c)
{



  return ::strrchr (s, c);

}


inline wchar_t *
ACE_OS::strrchr (wchar_t *s, wchar_t c)
{
  return const_cast<wchar_t *> (ACE_OS::strrchr (
                     const_cast<const wchar_t *> (s), c));
}


inline size_t
ACE_OS::strspn (const char *s, const char *t)
{
  return ::strspn (s, t);
}


inline size_t
ACE_OS::strspn (const wchar_t *s, const wchar_t *t)
{



  return ::wcsspn (s, t);

}


inline const char *
ACE_OS::strstr (const char *s, const char *t)
{
  return (const char *) ::strstr (s, t);
}


inline const wchar_t *
ACE_OS::strstr (const wchar_t *s, const wchar_t *t)
{





  return const_cast <const wchar_t *> (::wcsstr (s, t));

}


inline char *
ACE_OS::strstr (char *s, const char *t)
{
  return ::strstr (s, t);
}


inline wchar_t *
ACE_OS::strstr (wchar_t *s, const wchar_t *t)
{





  return ::wcsstr (s, t);

}


inline char *
ACE_OS::strtok (char *s, const char *tokens)
{
  return ::strtok (s, tokens);
}


inline wchar_t *
ACE_OS::strtok (wchar_t *s, const wchar_t *tokens)
{

  static wchar_t *lasts = 0;
  return ::wcstok (s, tokens, &lasts);



}


inline char *
ACE_OS::strtok_r (char *s, const char *tokens, char **lasts)
{



  return ::strtok_r (s, tokens, lasts);



}


inline wchar_t*
ACE_OS::strtok_r (wchar_t *s, const wchar_t *tokens, wchar_t **lasts)
{






  return ::wcstok (s, tokens, lasts);





}



# 474 "/usr/local/include/ace/OS_NS_string.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 477 "/usr/local/include/ace/OS_NS_string.h" 2 3
# 8 "/usr/local/include/ace/OS_NS_stdlib.inl" 2 3


# 1 "/usr/local/include/ace/os_include/os_search.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_search.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_search.h" 2 3
# 30 "/usr/local/include/ace/os_include/os_search.h" 3
# 1 "/usr/include/search.h" 1 3 4
# 26 "/usr/include/search.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 27 "/usr/include/search.h" 2 3 4

extern "C" {






struct qelem
  {
    struct qelem *q_forw;
    struct qelem *q_back;
    char q_data[1];
  };




extern void insque (void *__elem, void *__prev) throw ();


extern void remque (void *__elem) throw ();
# 63 "/usr/include/search.h" 3 4
typedef enum
  {
    FIND,
    ENTER
  }
ACTION;

typedef struct entry
  {
    char *key;
    void *data;
  }
ENTRY;


struct _ENTRY;
# 88 "/usr/include/search.h" 3 4
extern ENTRY *hsearch (ENTRY __item, ACTION __action) throw ();


extern int hcreate (size_t __nel) throw ();


extern void hdestroy (void) throw ();



struct hsearch_data
  {
    struct _ENTRY *table;
    unsigned int size;
    unsigned int filled;
  };



extern int hsearch_r (ENTRY __item, ACTION __action, ENTRY **__retval,
        struct hsearch_data *__htab) throw ();
extern int hcreate_r (size_t __nel, struct hsearch_data *__htab) throw ();
extern void hdestroy_r (struct hsearch_data *__htab) throw ();
# 119 "/usr/include/search.h" 3 4
typedef enum
{
  preorder,
  postorder,
  endorder,
  leaf
}
VISIT;



extern void *tsearch (__const void *__key, void **__rootp,
        __compar_fn_t __compar);



extern void *tfind (__const void *__key, void *__const *__rootp,
      __compar_fn_t __compar);


extern void *tdelete (__const void *__restrict __key,
        void **__restrict __rootp,
        __compar_fn_t __compar);



typedef void (*__action_fn_t) (__const void *__nodep, VISIT __value,
          int __level);




extern void twalk (__const void *__root, __action_fn_t __action);




typedef void (*__free_fn_t) (void *__nodep);


extern void tdestroy (void *__root, __free_fn_t __freefct);





extern void *lfind (__const void *__key, __const void *__base,
      size_t *__nmemb, size_t __size, __compar_fn_t __compar);



extern void *lsearch (__const void *__key, void *__base,
        size_t *__nmemb, size_t __size, __compar_fn_t __compar);

}
# 31 "/usr/local/include/ace/os_include/os_search.h" 2 3




extern "C"
{



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 44 "/usr/local/include/ace/os_include/os_search.h" 2 3
# 11 "/usr/local/include/ace/OS_NS_stdlib.inl" 2 3











inline void
ACE_OS::_exit (int status)
{
  ;



  ::_exit (status);



}

inline void
ACE_OS::abort (void)
{

  ::abort ();




}

inline int
ACE_OS::atexit (ACE_EXIT_HOOK func, const char* name)
{
  return ACE_OS_Object_Manager::instance ()->at_exit (func, name);
}

inline int
ACE_OS::atoi (const char *s)
{
  do return (int) (::atoi (s)); while (0);
}


inline int
ACE_OS::atoi (const wchar_t *s)
{



  return ACE_OS::atoi (ACE_Wide_To_Ascii (s).char_rep ());

}


inline long
ACE_OS::atol (const char *s)
{
  do return (long) (::atol (s)); while (0);
}


inline long
ACE_OS::atol (const wchar_t *s)
{



  return ACE_OS::atol (ACE_Wide_To_Ascii (s).char_rep ());

}


inline double
ACE_OS::atof (const char *s)
{
  do return (double) (::atof (s)); while (0);
}


inline double
ACE_OS::atof (const wchar_t *s)
{

  return ACE_OS::atof (ACE_Wide_To_Ascii (s).char_rep ());





}


inline void *
ACE_OS::atop (const char *s)
{
  ;
# 121 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
  intptr_t ip = ::atoi (s);

  void * p = reinterpret_cast<void *> (ip);
  return p;
}


inline void *
ACE_OS::atop (const wchar_t *s)
{
# 140 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
  intptr_t ip = ACE_OS::atoi (s);

  void * p = reinterpret_cast<void *> (ip);
  return p;
}


inline void *
ACE_OS::bsearch (const void *key,
                 const void *base,
                 size_t nel,
                 size_t size,
                 ACE_COMPARE_FUNC compar)
{

  return ::bsearch (key, base, nel, size, compar);
# 164 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
}

inline char *
ACE_OS::getenv (const char *symbol)
{
  ;




  do return (char *) (::getenv (symbol)); while (0);

}
# 191 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
inline char *
ACE_OS::itoa (int value, char *string, int radix)
{

  return ACE_OS::itoa_emulation (value, string, radix);





}


inline wchar_t *
ACE_OS::itoa (int value, wchar_t *string, int radix)
{

  return ACE_OS::itow_emulation (value, string, radix);



}


inline ACE_HANDLE
ACE_OS::mkstemp (char *s)
{

  return ::mkstemp (s);
# 235 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
}


inline ACE_HANDLE
ACE_OS::mkstemp (wchar_t *s)
{




  ACE_Wide_To_Ascii narrow_s (s);
  const ACE_HANDLE fh = ::mkstemp (narrow_s.char_rep ());
  if (fh != -1)
    {
      ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
      ACE_OS::strcpy (s, wide_s.wchar_rep ());
    }
  return fh;
# 268 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
}



inline char *
ACE_OS::mktemp (char *s)
{



  return ::mktemp (s);

}


inline wchar_t *
ACE_OS::mktemp (wchar_t *s)
{






  ACE_Wide_To_Ascii narrow_s (s);
  if (::mktemp (narrow_s.char_rep ()) == 0)
    return 0;
  ACE_Ascii_To_Wide wide_s (narrow_s.char_rep ());
  ACE_OS::strcpy (s, wide_s.wchar_rep ());
  return s;

}




inline int
ACE_OS::putenv (const char *string)
{
  ;
# 336 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
  do return (int) (::putenv (const_cast <char *> (string))); while (0);

}

inline int
ACE_OS::setenv(const char *envname, const char *envval, int overwrite)
{






  do return (int) (::setenv (envname, envval, overwrite)); while (0);

}

inline int
ACE_OS::unsetenv(const char *name)
{
# 364 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
  do return (int) (::unsetenv (name)); while (0);


}
# 383 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
inline void
ACE_OS::qsort (void *base,
               size_t nel,
               size_t width,
               ACE_COMPARE_FUNC compar)
{

  ::qsort (base, nel, width, compar);






}

inline int
ACE_OS::rand (void)
{
  ;
  do return (int) (::rand ()); while (0);
}



inline int
ACE_OS::rand_r (ACE_RANDR_TYPE &seed)
{
  ;







  do return (int) (::rand_r (&seed)); while (0);





}
# 448 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
inline char *
ACE_OS::realpath (const char *file_name,
                  char *resolved_name)
{



  return ::realpath (file_name, resolved_name);

}


inline wchar_t *
ACE_OS::realpath (const wchar_t *file_name,
                  wchar_t *resolved_name)
{



  ACE_Wide_To_Ascii n_file_name (file_name);
  char n_resolved[4096];
  if (0 != ACE_OS::realpath (n_file_name.char_rep (), n_resolved))
    {
      ACE_Ascii_To_Wide w_resolved (n_resolved);
      ACE_OS::strcpy (resolved_name, w_resolved.wchar_rep ());
      return resolved_name;
    }
  return 0;

}



inline ACE_EXIT_HOOK
ACE_OS::set_exit_hook (ACE_EXIT_HOOK exit_hook)
{
  ACE_EXIT_HOOK old_hook = exit_hook_;
  exit_hook_ = exit_hook;
  return old_hook;
}

inline void
ACE_OS::srand (u_int seed)
{
  ;
  ::srand (seed);
}


inline double
ACE_OS::strtod (const char *s, char **endptr)
{
  return ::strtod (s, endptr);
}



inline double
ACE_OS::strtod (const wchar_t *s, wchar_t **endptr)
{
  return ::wcstod (s, endptr);
}


inline long
ACE_OS::strtol (const char *s, char **ptr, int base)
{



  return ::strtol (s, ptr, base);

}


inline long
ACE_OS::strtol (const wchar_t *s, wchar_t **ptr, int base)
{



  return ::wcstol (s, ptr, base);

}


inline unsigned long
ACE_OS::strtoul (const char *s, char **ptr, int base)
{



  return ::strtoul (s, ptr, base);

}


inline unsigned long
ACE_OS::strtoul (const wchar_t *s, wchar_t **ptr, int base)
{



  return ::wcstoul (s, ptr, base);

}


inline ACE_INT64
ACE_OS::strtoll (const char *s, char **ptr, int base)
{





  return ace_strtoll_helper (s, ptr, base);

}


inline ACE_INT64
ACE_OS::strtoll (const wchar_t *s, wchar_t **ptr, int base)
{





  return ::wcstoll (s, ptr, base);

}


inline ACE_UINT64
ACE_OS::strtoull (const char *s, char **ptr, int base)
{





  return ace_strtoull_helper (s, ptr, base);

}


inline ACE_UINT64
ACE_OS::strtoull (const wchar_t *s, wchar_t **ptr, int base)
{





  return ::wcstoull (s, ptr, base);

}


inline int
ACE_OS::system (const ACE_TCHAR *s)
{
# 620 "/usr/local/include/ace/OS_NS_stdlib.inl" 3
  do return (int) (::system (s)); while (0);

}

inline const char*
ACE_OS::getprogname ()
{



  return ACE_OS::getprogname_emulation ();

}

inline void
ACE_OS::setprogname (const char* name)
{



  ACE_OS::setprogname_emulation (name);

}


# 450 "/usr/local/include/ace/OS_NS_stdlib.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 453 "/usr/local/include/ace/OS_NS_stdlib.h" 2 3
# 342 "/usr/local/include/ace/OS_Memory.h" 2 3

# 1 "/usr/local/include/ace/post.h" 1 3
# 344 "/usr/local/include/ace/OS_Memory.h" 2 3
# 37 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 1 "/usr/local/include/ace/OS_NS_signal.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_signal.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_signal.h" 2 3
# 50 "/usr/local/include/ace/OS_NS_signal.h" 3
inline int ace_sigemptyset_helper (sigset_t *s)
{




  return ::sigemptyset (s);

}

inline int ace_sigfillset_helper (sigset_t *s)
{




  return ::sigfillset (s);

}

inline int ace_sigaddset_helper (sigset_t *s, int signum)
{




  return ::sigaddset (s, signum);

}

inline int ace_sigdelset_helper (sigset_t *s, int signum)
{




  return ::sigdelset (s, signum);

}

inline int ace_sigismember_helper (sigset_t *s, int signum)
{




  return ::sigismember (s, signum);

}



inline int ace_sigsuspend_helper (const sigset_t *s)
{




  return ::sigsuspend (s);

}
# 143 "/usr/local/include/ace/OS_NS_signal.h" 3
extern "C"
{
  typedef void (*ACE_SIGNAL_C_FUNC)(int, siginfo_t *, void *);
}



# 165 "/usr/local/include/ace/OS_NS_signal.h" 3
typedef struct sigaction ACE_SIGACTION;


namespace ACE_OS {



  extern inline
  int kill (pid_t pid,
            int signum);

  extern inline
  int pthread_sigmask (int how,
                       const sigset_t *nsp,
                       sigset_t *osp);

  extern inline
  int sigaction (int signum,
                 const ACE_SIGACTION *nsa,
                 ACE_SIGACTION *osa);

  extern inline
  int sigaddset (sigset_t *s,
                 int signum);

  extern inline
  int sigdelset (sigset_t *s,
                 int signum);

  extern inline
  int sigemptyset (sigset_t *s);

  extern inline
  int sigfillset (sigset_t *s);

  extern inline
  int sigismember (sigset_t *s,
                   int signum);

  extern inline
  ACE_SignalHandler signal (int signum,
                            ACE_SignalHandler);

  extern inline
  int sigprocmask (int how,
                   const sigset_t *nsp,
                   sigset_t *osp);

  extern inline
  int sigsuspend (const sigset_t *s);

  extern inline
  int raise (const int signum);


}








# 1 "/usr/local/include/ace/OS_NS_signal.inl" 1 3




# 1 "/usr/local/include/ace/OS_NS_macros.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_macros.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_macros.h" 2 3
# 112 "/usr/local/include/ace/OS_NS_macros.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 113 "/usr/local/include/ace/OS_NS_macros.h" 2 3
# 6 "/usr/local/include/ace/OS_NS_signal.inl" 2 3




namespace ACE_OS
{

inline int
kill (pid_t pid, int signum)
{
  ;





  do return (int) (::kill (pid, signum)); while (0);

}

inline int
pthread_sigmask (int how, const sigset_t *nsp, sigset_t *osp)
{

  int result;
  do return (int) (((result = (::pthread_sigmask (how, nsp, osp))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 41 "/usr/local/include/ace/OS_NS_signal.inl" 3
}

inline int
sigaction (int signum, const ACE_SIGACTION *nsa, ACE_SIGACTION *osa)
{
  ;
  if (signum == 0)
    return 0;
# 73 "/usr/local/include/ace/OS_NS_signal.inl" 3
  do return (int) (::sigaction (signum, nsa, osa)); while (0);

}

inline int
sigaddset (sigset_t *s, int signum)
{
  ;
# 95 "/usr/local/include/ace/OS_NS_signal.inl" 3
  return ace_sigaddset_helper (s, signum);

}

inline int
sigdelset (sigset_t *s, int signum)
{
# 116 "/usr/local/include/ace/OS_NS_signal.inl" 3
  return ace_sigdelset_helper (s, signum);

}

inline int
sigemptyset (sigset_t *s)
{
# 132 "/usr/local/include/ace/OS_NS_signal.inl" 3
  return ace_sigemptyset_helper (s);

}

inline int
sigfillset (sigset_t *s)
{
# 148 "/usr/local/include/ace/OS_NS_signal.inl" 3
  return ace_sigfillset_helper (s);

}

inline int
sigismember (sigset_t *s, int signum)
{
# 175 "/usr/local/include/ace/OS_NS_signal.inl" 3
  return ace_sigismember_helper (s, signum);

}

inline ACE_SignalHandler
signal (int signum, ACE_SignalHandler func)
{
  if (signum == 0)
    return 0;
  else


    return ::signal (signum, func);
# 197 "/usr/local/include/ace/OS_NS_signal.inl" 3
}

inline int
sigprocmask (int how, const sigset_t *nsp, sigset_t *osp)
{






  do return (int) (::sigprocmask (how, nsp, osp)); while (0);

}

inline int
sigsuspend (const sigset_t *s)
{

  sigset_t sigset;

  if (s == 0)
    {
      ACE_OS::sigemptyset (&sigset);
      s = &sigset;
    }
  return ace_sigsuspend_helper (s);




}

inline int
raise (const int signum)
{




  do return (int) (::raise (signum)); while (0);

}

}


# 230 "/usr/local/include/ace/OS_NS_signal.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 233 "/usr/local/include/ace/OS_NS_signal.h" 2 3
# 38 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 58 "/usr/local/include/ace/OS_NS_Thread.h" 3

# 73 "/usr/local/include/ace/OS_NS_Thread.h" 3

# 445 "/usr/local/include/ace/OS_NS_Thread.h" 3

typedef pthread_rwlock_t ACE_rwlock_t;

# 525 "/usr/local/include/ace/OS_NS_Thread.h" 3

# 537 "/usr/local/include/ace/OS_NS_Thread.h" 3
class ACE_recursive_thread_mutex_t
{
public:

  ACE_thread_mutex_t nesting_mutex_;



  ACE_cond_t lock_available_;


  int nesting_level_;


  ACE_thread_t owner_id_;
};



struct ACE_recursive_mutex_state
{
  int nesting_level_;
  ACE_thread_t owner_id_;
};


# 677 "/usr/local/include/ace/OS_NS_Thread.h" 3

# 686 "/usr/local/include/ace/OS_NS_Thread.h" 3
class ACE_Thread_ID
{
public:


  ACE_Thread_ID (ACE_thread_t thr_id,
                 ACE_hthread_t thr_handle);


  ACE_Thread_ID (void);


  ACE_Thread_ID (const ACE_Thread_ID &rhs);


  ACE_thread_t id (void) const;


  void id (ACE_thread_t);


  ACE_hthread_t handle (void) const;


  void handle (ACE_hthread_t);


  void to_string (char *thr_string) const;


  bool operator== (const ACE_Thread_ID &) const;


  bool operator!= (const ACE_Thread_ID &) const;

private:

  ACE_thread_t thread_id_;


  ACE_hthread_t thread_handle_;
};




typedef int ACE_Sched_Priority;
# 746 "/usr/local/include/ace/OS_NS_Thread.h" 3
class ACE_Sched_Params;
class ACE_Time_Value;
# 758 "/usr/local/include/ace/OS_NS_Thread.h" 3
  typedef int ACE_idtype_t;
# 768 "/usr/local/include/ace/OS_NS_Thread.h" 3
  typedef long ACE_id_t;

  typedef short ACE_pri_t;
# 1031 "/usr/local/include/ace/OS_NS_Thread.h" 3

# 1048 "/usr/local/include/ace/OS_NS_Thread.h" 3
extern "C" void ACE_MUTEX_LOCK_CLEANUP_ADAPTER_NAME (void *args);











class ACE_event_t;


class ACE_Base_Thread_Adapter;

namespace ACE_OS {




  extern ACE_thread_t NULL_thread;



  extern ACE_hthread_t NULL_hthread;



  extern ACE_thread_key_t NULL_key;







  extern
  void cleanup_tss (const u_int main_thread);


  extern inline
  int condattr_init (ACE_condattr_t &attributes,
                     int type = PTHREAD_PROCESS_PRIVATE);

  extern inline
  int condattr_destroy (ACE_condattr_t &attributes);




  extern inline

  int cond_broadcast (ACE_cond_t *cv);




  extern inline

  int cond_destroy (ACE_cond_t *cv);

  extern
  int cond_init (ACE_cond_t *cv,
                 short type = PTHREAD_PROCESS_PRIVATE,
                 const char *name = 0,
                 void *arg = 0);




  extern inline

  int cond_init (ACE_cond_t *cv,
                 ACE_condattr_t &attributes,
                 const char *name = 0,
                 void *arg = 0);





  extern inline

  int cond_init (ACE_cond_t *cv,
                 short type,
                 const wchar_t *name,
                 void *arg = 0);




  extern inline

  int cond_init (ACE_cond_t *cv,
                 ACE_condattr_t &attributes,
                 const wchar_t *name,
                 void *arg = 0);





  extern inline

  int cond_signal (ACE_cond_t *cv);




  extern inline

  int cond_timedwait (ACE_cond_t *cv,
                      ACE_mutex_t *m,
                      ACE_Time_Value *timeout);




  extern inline

  int cond_wait (ACE_cond_t *cv,
                 ACE_mutex_t *m);
# 1186 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern
  int event_destroy (ACE_event_t *event);

  extern
  int event_init (ACE_event_t *event,
                  int manual_reset = 0,
                  int initial_state = 0,
                  int type = PTHREAD_PROCESS_PRIVATE,
                  const char *name = 0,
                  void *arg = 0,
                  int sa = 0);


  extern inline
  int event_init (ACE_event_t *event,
                  int manual_reset,
                  int initial_state,
                  int type,
                  const wchar_t *name,
                  void *arg = 0,
                  int sa = 0);


  extern
  int event_pulse (ACE_event_t *event);

  extern
  int event_reset (ACE_event_t *event);

  extern
  int event_signal (ACE_event_t *event);

  extern
  int event_timedwait (ACE_event_t *event,
                       ACE_Time_Value *timeout,
                       int use_absolute_time = 1);

  extern
  int event_wait (ACE_event_t *event);



  extern
  int lwp_getparams (ACE_Sched_Params &);

  extern
  int lwp_setparams (const ACE_Sched_Params &);




  extern
  int mutex_destroy (ACE_mutex_t *m);

  extern
  int mutex_init (ACE_mutex_t *m,
                  int lock_scope = PTHREAD_PROCESS_PRIVATE,
                  const char *name = 0,
                  ACE_mutexattr_t *arg = 0,
                  int sa = 0,
                  int lock_type = 0);


  extern
  int mutex_init (ACE_mutex_t *m,
                  int lock_scope,
                  const wchar_t *name,
                  ACE_mutexattr_t *arg = 0,
                  int sa = 0,
                  int lock_type = 0);




  extern
  int mutex_lock (ACE_mutex_t *m);



  extern
  int mutex_lock (ACE_mutex_t *m,
                  int &abandoned);
# 1281 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern
  int mutex_lock (ACE_mutex_t *m,
                  const ACE_Time_Value &timeout);
# 1296 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern inline
  int mutex_lock (ACE_mutex_t *m,
                  const ACE_Time_Value *timeout);


  extern
  void mutex_lock_cleanup (void *mutex);



  extern
  int mutex_trylock (ACE_mutex_t *m);



  extern
  int mutex_trylock (ACE_mutex_t *m,
                     int &abandoned);

  extern
  int mutex_unlock (ACE_mutex_t *m);
# 1325 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern inline
  long priority_control (ACE_idtype_t, ACE_id_t, int, void *);






  extern inline
  int recursive_mutex_cond_unlock (ACE_recursive_thread_mutex_t *m,
                                   ACE_recursive_mutex_state &state);

  extern inline
  void recursive_mutex_cond_relock (ACE_recursive_thread_mutex_t *m,
                                    ACE_recursive_mutex_state &state);

  extern inline
  int recursive_mutex_destroy (ACE_recursive_thread_mutex_t *m);

  extern inline
  int recursive_mutex_init (ACE_recursive_thread_mutex_t *m,
                            const ACE_TCHAR *name = 0,
                            ACE_mutexattr_t *arg = 0,
                            int sa = 0);

  extern inline
  int recursive_mutex_lock (ACE_recursive_thread_mutex_t *m);

  extern inline
  int recursive_mutex_lock (ACE_recursive_thread_mutex_t *m,
                            const ACE_Time_Value &timeout);

  extern inline
  int recursive_mutex_lock (ACE_recursive_thread_mutex_t *m,
                            const ACE_Time_Value *timeout);

  extern inline
  int recursive_mutex_trylock (ACE_recursive_thread_mutex_t *m);

  extern inline
  int recursive_mutex_unlock (ACE_recursive_thread_mutex_t *m);






  extern inline
  int rw_rdlock (ACE_rwlock_t *rw);

  extern inline
  int rw_tryrdlock (ACE_rwlock_t *rw);

  extern inline
  int rw_trywrlock (ACE_rwlock_t *rw);

  extern inline
  int rw_trywrlock_upgrade (ACE_rwlock_t *rw);

  extern inline
  int rw_unlock (ACE_rwlock_t *rw);

  extern inline
  int rw_wrlock (ACE_rwlock_t *rw);

  extern inline
  int rwlock_destroy (ACE_rwlock_t *rw);

  extern
  int rwlock_init (ACE_rwlock_t *rw,
                   int type = PTHREAD_PROCESS_PRIVATE,
                   const ACE_TCHAR *name = 0,
                   void *arg = 0);






  extern
  int sched_params (const ACE_Sched_Params &, ACE_id_t id = (-1));



  extern
  int scheduling_class (const char *class_name, ACE_id_t &);



  extern inline
  int sema_destroy (ACE_sema_t *s);

  extern inline
  int sema_init (ACE_sema_t *s,
                 u_int count,
                 int type = PTHREAD_PROCESS_PRIVATE,
                 const char *name = 0,
                 void *arg = 0,
                 int max = 0x7fffffff,
                 int sa = 0);


  extern inline
  int sema_init (ACE_sema_t *s,
                 u_int count,
                 int type,
                 const wchar_t *name,
                 void *arg = 0,
                 int max = 0x7fffffff,
                 int sa = 0);


  extern inline
  int sema_post (ACE_sema_t *s);

  extern inline
  int sema_post (ACE_sema_t *s,
                 u_int release_count);

  extern inline
  int sema_trywait (ACE_sema_t *s);

  extern inline
  int sema_wait (ACE_sema_t *s);

  extern inline
  int sema_wait (ACE_sema_t *s,
                 ACE_Time_Value &tv);

  extern inline
  int sema_wait (ACE_sema_t *s,
                 ACE_Time_Value *tv);



  extern inline
  int semctl (int int_id,
              int semnum,
              int cmd,
              semun);

  extern inline
  int semget (key_t key,
              int nsems,
              int flags);

  extern inline
  int semop (int int_id,
             struct sembuf *sops,
             size_t nsops);



  extern
  int set_scheduling_params (const ACE_Sched_Params &,
                             ACE_id_t id = (-1));

  extern inline
  int sigtimedwait (const sigset_t *set,
                    siginfo_t *info,
                    const ACE_Time_Value *timeout);

  extern inline
  int sigwait (sigset_t *set,
               int *sig = 0);

  extern inline
  int sigwaitinfo (const sigset_t *set,
                   siginfo_t *info);

  extern inline
  int thr_cancel (ACE_thread_t t_id);

  extern inline
  int thr_cmp (ACE_hthread_t t1,
               ACE_hthread_t t2);



  extern inline
  int thr_continue (ACE_hthread_t target_thread);
# 1541 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern
  int thr_create (ACE_THR_FUNC func,
                  void *args,
                  long flags,
                  ACE_thread_t *thr_id,
                  ACE_hthread_t *t_handle = 0,
                  long priority = (-0x7fffffffL - 1L),
                  void *stack = 0,
                  size_t stacksize = 0,
                  ACE_Base_Thread_Adapter *thread_adapter = 0,
                  const char** thr_name = 0);

  extern inline
  int thr_equal (ACE_thread_t t1,
                 ACE_thread_t t2);

  extern
  void thr_exit (ACE_THR_FUNC_RETURN status = 0);

  extern inline
  int thr_getconcurrency (void);

  extern inline
  int thr_getprio (ACE_hthread_t id,
                   int &priority);

  extern inline
  int thr_getprio (ACE_hthread_t id,
                   int &priority,
                   int &policy);


  extern inline

  int thr_getspecific_native (ACE_OS_thread_key_t key,
                              void **data);


  extern inline
  int thr_getspecific (ACE_thread_key_t key,
                       void **data);




  extern inline

  int thr_join (ACE_hthread_t waiter_id,
                ACE_THR_FUNC_RETURN *status);




  extern inline

  int thr_join (ACE_thread_t waiter_id,
                ACE_thread_t *thr_id,
                ACE_THR_FUNC_RETURN *status);
# 1611 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern
  int thr_get_affinity (ACE_hthread_t thr_id,
                        size_t cpu_set_size,
                        cpu_set_t * cpu_mask);
# 1628 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern
  int thr_set_affinity (ACE_hthread_t thr_id,
                        size_t cpu_set_size,
                        const cpu_set_t * cpu_mask);




  extern
  int thr_key_detach (ACE_thread_key_t key, void * inst);

  extern
  int thr_key_used (ACE_thread_key_t key);
# 1660 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern
  int thr_keycreate_native (ACE_OS_thread_key_t *key,
                     ACE_THR_DEST);




  extern
  int thr_keycreate (ACE_thread_key_t *key,
                     ACE_THR_DEST,
                     void *inst = 0);





  extern
  int thr_keyfree_native (ACE_OS_thread_key_t key);


  extern
  int thr_keyfree (ACE_thread_key_t key);

  extern inline
  int thr_kill (ACE_thread_t thr_id,
                int signum);

  extern inline
  size_t thr_min_stack (void);

  extern inline
  ACE_thread_t thr_self (void);

  extern inline
  void thr_self (ACE_hthread_t &);

  extern inline
  const char* thr_name (void);

  extern inline
  int thr_setcancelstate (int new_state,
                          int *old_state);

  extern inline
  int thr_setcanceltype (int new_type,
                         int *old_type);

  extern inline
  int thr_setconcurrency (int hint);

  extern inline
  int thr_setprio (ACE_hthread_t ht_id,
                   int priority,
                   int policy = -1);

  extern
  int thr_setprio (const ACE_Sched_Priority prio);



  extern
  int thr_setspecific_native (ACE_OS_thread_key_t key,
                              void *data);


  extern
  int thr_setspecific (ACE_thread_key_t key,
                       void *data);

  extern inline
  int thr_sigsetmask (int how,
                      const sigset_t *nsm,
                      sigset_t *osm);

  extern inline
  int thr_suspend (ACE_hthread_t target_thread);

  extern inline
  void thr_testcancel (void);

  extern inline
  void thr_yield (void);



  extern inline
  int thread_mutex_destroy (ACE_thread_mutex_t *m);

  extern inline
  int thread_mutex_init (ACE_thread_mutex_t *m,
                         int lock_type = 0,
                         const char *name = 0,
                         ACE_mutexattr_t *arg = 0);


  extern inline
  int thread_mutex_init (ACE_thread_mutex_t *m,
                         int lock_type,
                         const wchar_t *name,
                         ACE_mutexattr_t *arg = 0);


  extern inline
  int thread_mutex_lock (ACE_thread_mutex_t *m);

  extern inline
  int thread_mutex_lock (ACE_thread_mutex_t *m,
                         const ACE_Time_Value &timeout);

  extern inline
  int thread_mutex_lock (ACE_thread_mutex_t *m,
                         const ACE_Time_Value *timeout);

  extern inline
  int thread_mutex_trylock (ACE_thread_mutex_t *m);

  extern inline
  int thread_mutex_unlock (ACE_thread_mutex_t *m);
# 1789 "/usr/local/include/ace/OS_NS_Thread.h" 3
  extern
  void unique_name (const void *object,
                    char *name,
                    size_t length);






}





extern "C"
{
  typedef struct
  {




    ACE_mutex_t lock_;

    ACE_cond_t condition_;
# 1825 "/usr/local/include/ace/OS_NS_Thread.h" 3
    int type_;


    int manual_reset_;


    int is_signaled_;
# 1841 "/usr/local/include/ace/OS_NS_Thread.h" 3
    bool auto_event_signaled_;


    unsigned long waiting_threads_;


    unsigned long signal_count_;
  } ACE_eventdata_t;
}








class ACE_event_t
{
  friend int ACE_OS::event_init(ACE_event_t*, int, int, int, const char*, void*,int);
  friend int ACE_OS::event_destroy(ACE_event_t*);
  friend int ACE_OS::event_wait(ACE_event_t*);
  friend int ACE_OS::event_timedwait(ACE_event_t*, ACE_Time_Value*, int);
  friend int ACE_OS::event_signal(ACE_event_t*);
  friend int ACE_OS::event_pulse(ACE_event_t*);
  friend int ACE_OS::event_reset(ACE_event_t*);
protected:


  char* name_;


  ACE_eventdata_t* eventdata_;
# 1887 "/usr/local/include/ace/OS_NS_Thread.h" 3
};








# 1915 "/usr/local/include/ace/OS_NS_Thread.h" 3
class ACE_OS_Thread_Mutex_Guard
{
public:

  ACE_OS_Thread_Mutex_Guard (ACE_thread_mutex_t &m);


  ~ACE_OS_Thread_Mutex_Guard (void);


  int acquire (void);


  int release (void);

protected:

  ACE_thread_mutex_t &lock_;


  int owner_;


  ACE_OS_Thread_Mutex_Guard &operator= (const ACE_OS_Thread_Mutex_Guard &);
  ACE_OS_Thread_Mutex_Guard (const ACE_OS_Thread_Mutex_Guard &);
};
# 1960 "/usr/local/include/ace/OS_NS_Thread.h" 3
class ACE_OS_Recursive_Thread_Mutex_Guard
{
public:

  ACE_OS_Recursive_Thread_Mutex_Guard (ACE_recursive_thread_mutex_t &m);


  ~ACE_OS_Recursive_Thread_Mutex_Guard (void);


  int acquire (void);


  int release (void);

protected:

  ACE_recursive_thread_mutex_t &lock_;


  int owner_;


  ACE_OS_Recursive_Thread_Mutex_Guard &operator= (
    const ACE_OS_Recursive_Thread_Mutex_Guard &);
  ACE_OS_Recursive_Thread_Mutex_Guard (
    const ACE_OS_Recursive_Thread_Mutex_Guard &);
};


# 2020 "/usr/local/include/ace/OS_NS_Thread.h" 3
# 1 "/usr/local/include/ace/OS_NS_Thread.inl" 1 3






# 1 "/usr/local/include/ace/Time_Value.h" 1 3
# 16 "/usr/local/include/ace/Time_Value.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Time_Value.h" 2 3
# 29 "/usr/local/include/ace/Time_Value.h" 3
suseconds_t const ACE_ONE_SECOND_IN_USECS = 1000000;



# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 34 "/usr/local/include/ace/Time_Value.h" 2 3
# 47 "/usr/local/include/ace/Time_Value.h" 3

# 60 "/usr/local/include/ace/Time_Value.h" 3
class ACE_Time_Value
{
public:


  static const ACE_Time_Value zero;
# 75 "/usr/local/include/ace/Time_Value.h" 3
  static const ACE_Time_Value max_time;




  ACE_Time_Value (void);


  explicit ACE_Time_Value (time_t sec, suseconds_t usec = 0);




  explicit ACE_Time_Value (const struct timeval &t);


  explicit ACE_Time_Value (const timespec_t &t);







  void set (time_t sec, suseconds_t usec);



  void set (double d);


  void set (const timeval &t);


  void set (const timespec_t &t);
# 127 "/usr/local/include/ace/Time_Value.h" 3
  unsigned long msec (void) const;
# 138 "/usr/local/include/ace/Time_Value.h" 3
  void msec (ACE_UINT64 &ms) const;
# 149 "/usr/local/include/ace/Time_Value.h" 3
  void msec (ACE_UINT64 &ms) ;







  void msec (long);







  void msec (int);


  operator timespec_t () const;


  operator timeval () const;


  operator const timeval *() const;
# 190 "/usr/local/include/ace/Time_Value.h" 3
  time_t sec (void) const;


  void sec (time_t sec);
# 202 "/usr/local/include/ace/Time_Value.h" 3
  suseconds_t usec (void) const;


  void usec (suseconds_t usec);





  void to_usec (ACE_UINT64 &usec) const;




  ACE_Time_Value &operator += (const ACE_Time_Value &tv);


  ACE_Time_Value &operator += (time_t tv);


  ACE_Time_Value &operator = (const ACE_Time_Value &tv);


  ACE_Time_Value &operator = (time_t tv);


  ACE_Time_Value &operator -= (const ACE_Time_Value &tv);


  ACE_Time_Value &operator -= (time_t tv);







  ACE_Time_Value &operator *= (double d);






  ACE_Time_Value operator++ (int);






  ACE_Time_Value &operator++ (void);






  ACE_Time_Value operator-- (int);






  ACE_Time_Value &operator-- (void);


  friend ACE_Time_Value operator + (const ACE_Time_Value &tv1,
                                               const ACE_Time_Value &tv2);


  friend ACE_Time_Value operator - (const ACE_Time_Value &tv1,
                                               const ACE_Time_Value &tv2);


  friend bool operator < (const ACE_Time_Value &tv1,
                                     const ACE_Time_Value &tv2);


  friend bool operator > (const ACE_Time_Value &tv1,
                                     const ACE_Time_Value &tv2);


  friend bool operator <= (const ACE_Time_Value &tv1,
                                      const ACE_Time_Value &tv2);


  friend bool operator >= (const ACE_Time_Value &tv1,
                                      const ACE_Time_Value &tv2);


  friend bool operator == (const ACE_Time_Value &tv1,
                                      const ACE_Time_Value &tv2);


  friend bool operator != (const ACE_Time_Value &tv1,
                                      const ACE_Time_Value &tv2);



  friend ACE_Time_Value operator * (double d,
                                               const ACE_Time_Value &tv);

  friend ACE_Time_Value operator * (const ACE_Time_Value &tv,
                                               double d);
# 317 "/usr/local/include/ace/Time_Value.h" 3
  void dump (void) const;
# 328 "/usr/local/include/ace/Time_Value.h" 3
private:

  void normalize (bool saturate = false);
# 348 "/usr/local/include/ace/Time_Value.h" 3
  timeval tv_;

};


extern ostream &operator<<( ostream &o, const ACE_Time_Value &v );





# 1 "/usr/local/include/ace/Time_Value.inl" 1 3




# 1 "/usr/local/include/ace/Truncate.h" 1 3
# 18 "/usr/local/include/ace/Truncate.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/Truncate.h" 2 3
# 27 "/usr/local/include/ace/Truncate.h" 3
# 1 "/usr/local/include/ace/If_Then_Else.h" 1 3
# 22 "/usr/local/include/ace/If_Then_Else.h" 3


namespace ACE
{
# 54 "/usr/local/include/ace/If_Then_Else.h" 3
  template <bool C, typename Ta, typename Tb>
  struct If_Then_Else;
# 65 "/usr/local/include/ace/If_Then_Else.h" 3
  template <typename Ta, typename Tb>
  struct If_Then_Else<true, Ta, Tb>
  {
    typedef Ta result_type;
  };
# 79 "/usr/local/include/ace/If_Then_Else.h" 3
  template <typename Ta, typename Tb>
  struct If_Then_Else<false, Ta, Tb>
  {
    typedef Tb result_type;
  };

}


# 28 "/usr/local/include/ace/Truncate.h" 2 3
# 1 "/usr/local/include/ace/Numeric_Limits.h" 1 3
# 28 "/usr/local/include/ace/Numeric_Limits.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 29 "/usr/local/include/ace/Numeric_Limits.h" 2 3
# 60 "/usr/local/include/ace/Numeric_Limits.h" 3
# 1 "/usr/include/c++/4.4/limits" 1 3
# 41 "/usr/include/c++/4.4/limits" 3
       
# 42 "/usr/include/c++/4.4/limits" 3
# 146 "/usr/include/c++/4.4/limits" 3
namespace std __attribute__ ((__visibility__ ("default"))) {






  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 188 "/usr/include/c++/4.4/limits" 3
  struct __numeric_limits_base
  {


    static const bool is_specialized = false;




    static const int digits = 0;

    static const int digits10 = 0;

    static const bool is_signed = false;



    static const bool is_integer = false;




    static const bool is_exact = false;


    static const int radix = 0;



    static const int min_exponent = 0;


    static const int min_exponent10 = 0;



    static const int max_exponent = 0;


    static const int max_exponent10 = 0;


    static const bool has_infinity = false;


    static const bool has_quiet_NaN = false;


    static const bool has_signaling_NaN = false;

    static const float_denorm_style has_denorm = denorm_absent;


    static const bool has_denorm_loss = false;



    static const bool is_iec559 = false;



    static const bool is_bounded = false;




    static const bool is_modulo = false;


    static const bool traps = false;

    static const bool tinyness_before = false;



    static const float_round_style round_style = round_toward_zero;
  };
# 277 "/usr/include/c++/4.4/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp min() throw() { return static_cast<_Tp>(0); }

      static _Tp max() throw() { return static_cast<_Tp>(0); }


      static _Tp epsilon() throw() { return static_cast<_Tp>(0); }

      static _Tp round_error() throw() { return static_cast<_Tp>(0); }

      static _Tp infinity() throw() { return static_cast<_Tp>(0); }

      static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }


      static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }



      static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }
    };





  template<>
    struct numeric_limits<bool>
    {
      static const bool is_specialized = true;

      static bool min() throw()
      { return false; }
      static bool max() throw()
      { return true; }

      static const int digits = 1;
      static const int digits10 = 0;
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static bool epsilon() throw()
      { return false; }
      static bool round_error() throw()
      { return false; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static bool infinity() throw()
      { return false; }
      static bool quiet_NaN() throw()
      { return false; }
      static bool signaling_NaN() throw()
      { return false; }
      static bool denorm_min() throw()
      { return false; }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;




      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static const bool is_specialized = true;

      static char min() throw()
      { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }
      static char max() throw()
      { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }

      static const int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static const int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = ((char)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static char epsilon() throw()
      { return 0; }
      static char round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static char infinity() throw()
      { return char(); }
      static char quiet_NaN() throw()
      { return char(); }
      static char signaling_NaN() throw()
      { return char(); }
      static char denorm_min() throw()
      { return static_cast<char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static const bool is_specialized = true;

      static signed char min() throw()
      { return -127 - 1; }
      static signed char max() throw()
      { return 127; }

      static const int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static const int digits10 = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static signed char epsilon() throw()
      { return 0; }
      static signed char round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static signed char infinity() throw()
      { return static_cast<signed char>(0); }
      static signed char quiet_NaN() throw()
      { return static_cast<signed char>(0); }
      static signed char signaling_NaN() throw()
      { return static_cast<signed char>(0); }
      static signed char denorm_min() throw()
      { return static_cast<signed char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static const bool is_specialized = true;

      static unsigned char min() throw()
      { return 0; }
      static unsigned char max() throw()
      { return 127 * 2U + 1; }

      static const int digits = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned char epsilon() throw()
      { return 0; }
      static unsigned char round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned char infinity() throw()
      { return static_cast<unsigned char>(0); }
      static unsigned char quiet_NaN() throw()
      { return static_cast<unsigned char>(0); }
      static unsigned char signaling_NaN() throw()
      { return static_cast<unsigned char>(0); }
      static unsigned char denorm_min() throw()
      { return static_cast<unsigned char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static const bool is_specialized = true;

      static wchar_t min() throw()
      { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }
      static wchar_t max() throw()
      { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }

      static const int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static const int digits10 = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = ((wchar_t)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static wchar_t epsilon() throw()
      { return 0; }
      static wchar_t round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static wchar_t infinity() throw()
      { return wchar_t(); }
      static wchar_t quiet_NaN() throw()
      { return wchar_t(); }
      static wchar_t signaling_NaN() throw()
      { return wchar_t(); }
      static wchar_t denorm_min() throw()
      { return wchar_t(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };
# 669 "/usr/include/c++/4.4/limits" 3
  template<>
    struct numeric_limits<short>
    {
      static const bool is_specialized = true;

      static short min() throw()
      { return -32767 - 1; }
      static short max() throw()
      { return 32767; }

      static const int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static const int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static short epsilon() throw()
      { return 0; }
      static short round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static short infinity() throw()
      { return short(); }
      static short quiet_NaN() throw()
      { return short(); }
      static short signaling_NaN() throw()
      { return short(); }
      static short denorm_min() throw()
      { return short(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static const bool is_specialized = true;

      static unsigned short min() throw()
      { return 0; }
      static unsigned short max() throw()
      { return 32767 * 2U + 1; }

      static const int digits = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned short epsilon() throw()
      { return 0; }
      static unsigned short round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned short infinity() throw()
      { return static_cast<unsigned short>(0); }
      static unsigned short quiet_NaN() throw()
      { return static_cast<unsigned short>(0); }
      static unsigned short signaling_NaN() throw()
      { return static_cast<unsigned short>(0); }
      static unsigned short denorm_min() throw()
      { return static_cast<unsigned short>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static const bool is_specialized = true;

      static int min() throw()
      { return -2147483647 - 1; }
      static int max() throw()
      { return 2147483647; }

      static const int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static const int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static int epsilon() throw()
      { return 0; }
      static int round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static int infinity() throw()
      { return static_cast<int>(0); }
      static int quiet_NaN() throw()
      { return static_cast<int>(0); }
      static int signaling_NaN() throw()
      { return static_cast<int>(0); }
      static int denorm_min() throw()
      { return static_cast<int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static const bool is_specialized = true;

      static unsigned int min() throw()
      { return 0; }
      static unsigned int max() throw()
      { return 2147483647 * 2U + 1; }

      static const int digits = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned int epsilon() throw()
      { return 0; }
      static unsigned int round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned int infinity() throw()
      { return static_cast<unsigned int>(0); }
      static unsigned int quiet_NaN() throw()
      { return static_cast<unsigned int>(0); }
      static unsigned int signaling_NaN() throw()
      { return static_cast<unsigned int>(0); }
      static unsigned int denorm_min() throw()
      { return static_cast<unsigned int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static const bool is_specialized = true;

      static long min() throw()
      { return -9223372036854775807L - 1; }
      static long max() throw()
      { return 9223372036854775807L; }

      static const int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static const int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static long epsilon() throw()
      { return 0; }
      static long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static long infinity() throw()
      { return static_cast<long>(0); }
      static long quiet_NaN() throw()
      { return static_cast<long>(0); }
      static long signaling_NaN() throw()
      { return static_cast<long>(0); }
      static long denorm_min() throw()
      { return static_cast<long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static const bool is_specialized = true;

      static unsigned long min() throw()
      { return 0; }
      static unsigned long max() throw()
      { return 9223372036854775807L * 2UL + 1; }

      static const int digits = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned long epsilon() throw()
      { return 0; }
      static unsigned long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long infinity() throw()
      { return static_cast<unsigned long>(0); }
      static unsigned long quiet_NaN() throw()
      { return static_cast<unsigned long>(0); }
      static unsigned long signaling_NaN() throw()
      { return static_cast<unsigned long>(0); }
      static unsigned long denorm_min() throw()
      { return static_cast<unsigned long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static const bool is_specialized = true;

      static long long min() throw()
      { return -9223372036854775807LL - 1; }
      static long long max() throw()
      { return 9223372036854775807LL; }

      static const int digits = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static const int digits10 = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static long long epsilon() throw()
      { return 0; }
      static long long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static long long infinity() throw()
      { return static_cast<long long>(0); }
      static long long quiet_NaN() throw()
      { return static_cast<long long>(0); }
      static long long signaling_NaN() throw()
      { return static_cast<long long>(0); }
      static long long denorm_min() throw()
      { return static_cast<long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static const bool is_specialized = true;

      static unsigned long long min() throw()
      { return 0; }
      static unsigned long long max() throw()
      { return 9223372036854775807LL * 2ULL + 1; }

      static const int digits = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static const int digits10 = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643 / 2136);
      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;
      static unsigned long long epsilon() throw()
      { return 0; }
      static unsigned long long round_error() throw()
      { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long long infinity() throw()
      { return static_cast<unsigned long long>(0); }
      static unsigned long long quiet_NaN() throw()
      { return static_cast<unsigned long long>(0); }
      static unsigned long long signaling_NaN() throw()
      { return static_cast<unsigned long long>(0); }
      static unsigned long long denorm_min() throw()
      { return static_cast<unsigned long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static const bool is_specialized = true;

      static float min() throw()
      { return 1.17549435e-38F; }
      static float max() throw()
      { return 3.40282347e+38F; }

      static const int digits = 24;
      static const int digits10 = 6;
      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;
      static float epsilon() throw()
      { return 1.19209290e-7F; }
      static float round_error() throw()
      { return 0.5F; }

      static const int min_exponent = (-125);
      static const int min_exponent10 = (-37);
      static const int max_exponent = 128;
      static const int max_exponent10 = 38;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss = false;

      static float infinity() throw()
      { return __builtin_huge_valf (); }
      static float quiet_NaN() throw()
      { return __builtin_nanf (""); }
      static float signaling_NaN() throw()
      { return __builtin_nansf (""); }
      static float denorm_min() throw()
      { return 1.40129846e-45F; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static const bool is_specialized = true;

      static double min() throw()
      { return 2.2250738585072014e-308; }
      static double max() throw()
      { return 1.7976931348623157e+308; }

      static const int digits = 53;
      static const int digits10 = 15;
      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;
      static double epsilon() throw()
      { return 2.2204460492503131e-16; }
      static double round_error() throw()
      { return 0.5; }

      static const int min_exponent = (-1021);
      static const int min_exponent10 = (-307);
      static const int max_exponent = 1024;
      static const int max_exponent10 = 308;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss = false;

      static double infinity() throw()
      { return __builtin_huge_val(); }
      static double quiet_NaN() throw()
      { return __builtin_nan (""); }
      static double signaling_NaN() throw()
      { return __builtin_nans (""); }
      static double denorm_min() throw()
      { return 4.9406564584124654e-324; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static const bool is_specialized = true;

      static long double min() throw()
      { return 3.36210314311209350626e-4932L; }
      static long double max() throw()
      { return 1.18973149535723176502e+4932L; }

      static const int digits = 64;
      static const int digits10 = 18;
      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;
      static long double epsilon() throw()
      { return 1.08420217248550443401e-19L; }
      static long double round_error() throw()
      { return 0.5L; }

      static const int min_exponent = (-16381);
      static const int min_exponent10 = (-4931);
      static const int max_exponent = 16384;
      static const int max_exponent10 = 4932;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
 = false;

      static long double infinity() throw()
      { return __builtin_huge_vall (); }
      static long double quiet_NaN() throw()
      { return __builtin_nanl (""); }
      static long double signaling_NaN() throw()
      { return __builtin_nansl (""); }
      static long double denorm_min() throw()
      { return 3.64519953188247460253e-4951L; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before = false;
      static const float_round_style round_style = round_to_nearest;
    };





}
# 61 "/usr/local/include/ace/Numeric_Limits.h" 2 3








# 221 "/usr/local/include/ace/Numeric_Limits.h" 3
template <typename T>
struct ACE_Numeric_Limits
{
  static T min (void) { return std::numeric_limits<T>::min (); }
  static T max (void) { return std::numeric_limits<T>::max (); }
};
# 266 "/usr/local/include/ace/Numeric_Limits.h" 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 269 "/usr/local/include/ace/Numeric_Limits.h" 2 3
# 29 "/usr/local/include/ace/Truncate.h" 2 3







namespace ACE_Utils
{
  template<typename T> struct Sign_Check;


  template<> struct Sign_Check<unsigned char> { static bool const is_signed = 0; };
  template<> struct Sign_Check<unsigned short> { static bool const is_signed = 0; };
  template<> struct Sign_Check<unsigned int> { static bool const is_signed = 0; };
  template<> struct Sign_Check<unsigned long> { static bool const is_signed = 0; };




  __extension__

  template<> struct Sign_Check<unsigned long long> { static bool const is_signed = 0; };





  template<> struct Sign_Check<signed char> { static bool const is_signed = 1; };
  template<> struct Sign_Check<signed short> { static bool const is_signed = 1; };
  template<> struct Sign_Check<signed int> { static bool const is_signed = 1; };
  template<> struct Sign_Check<signed long> { static bool const is_signed = 1; };




  __extension__

  template<> struct Sign_Check<signed long long> { static bool const is_signed = 1; };
# 79 "/usr/local/include/ace/Truncate.h" 3
  template<typename T> struct To_Unsigned;

  template<>
  struct To_Unsigned<unsigned char>
  {
    typedef unsigned char unsigned_type;

    unsigned_type operator() (unsigned_type x) { return x; }
  };

  template<>
  struct To_Unsigned<unsigned short>
  {
    typedef unsigned short unsigned_type;

    unsigned_type operator() (unsigned_type x) { return x; }
  };

  template<>
  struct To_Unsigned<unsigned int>
  {
    typedef unsigned int unsigned_type;

    unsigned_type operator() (unsigned_type x) { return x; }
  };

  template<>
  struct To_Unsigned<unsigned long>
  {
    typedef unsigned long unsigned_type;

    unsigned_type operator() (unsigned_type x) { return x; }
  };





  __extension__

  template<>
  struct To_Unsigned<unsigned long long>
  {
    typedef unsigned long long unsigned_type;

    unsigned_type operator() (unsigned_type x) { return x; }
  };
# 138 "/usr/local/include/ace/Truncate.h" 3
  template<>
  struct To_Unsigned<signed char>
  {
    typedef signed char signed_type;
    typedef unsigned char unsigned_type;

    unsigned_type operator() (signed_type x)
    {
      return static_cast<unsigned_type> (x);
    }
  };

  template<>
  struct To_Unsigned<signed short>
  {
    typedef signed short signed_type;
    typedef unsigned short unsigned_type;

    unsigned_type operator() (signed_type x)
    {
      return static_cast<unsigned_type> (x);
    }
  };

  template<>
  struct To_Unsigned<signed int>
  {
    typedef signed int signed_type;
    typedef unsigned int unsigned_type;

    unsigned_type operator() (signed_type x)
    {
      return static_cast<unsigned_type> (x);
    }
  };

  template<>
  struct To_Unsigned<signed long>
  {
    typedef signed long signed_type;
    typedef unsigned long unsigned_type;

    unsigned_type operator() (signed_type x)
    {
      return static_cast<unsigned_type> (x);
    }
  };





  __extension__

  template<>
  struct To_Unsigned<signed long long>
  {
    typedef signed long long signed_type;
    typedef unsigned long long unsigned_type;

    unsigned_type operator() (signed_type x)
    {
      return static_cast<unsigned_type> (x);
    }
  };
# 219 "/usr/local/include/ace/Truncate.h" 3
  template<typename LEFT,
           typename RIGHT,
           bool IS_LEFT_SIGNED,
           bool IS_RIGHT_SIGNED> struct Safe_Comparator;


  template<typename LEFT, typename RIGHT>
  struct Safe_Comparator<LEFT, RIGHT, true, false>
  {
    static bool greater_than (LEFT lhs, RIGHT rhs)
    {

      if (lhs < 0)
        return false;
      else
        {

          return To_Unsigned<LEFT>() (lhs) > rhs;
        }
    }
  };


  template<typename LEFT, typename RIGHT>
  struct Safe_Comparator<LEFT, RIGHT, false, true>
  {
    static bool greater_than (LEFT lhs, RIGHT rhs)
    {

      if (rhs < 0)
        return true;
      else
        {

          return lhs > To_Unsigned<RIGHT>() (rhs);
        }
    }
  };


  template<typename LEFT, typename RIGHT>
  struct Safe_Comparator<LEFT, RIGHT, false, false>
  {
    static bool greater_than (LEFT lhs, RIGHT rhs)
    {

      return lhs > rhs;
    }
  };


  template<typename LEFT, typename RIGHT>
  struct Safe_Comparator<LEFT, RIGHT, true, true>
  {
    static bool greater_than (LEFT lhs, RIGHT rhs)
    {

      return lhs > rhs;
    }
  };
# 295 "/usr/local/include/ace/Truncate.h" 3
  template<typename LEFT, typename RIGHT>
  struct Fast_Comparator
  {
    static bool const USE_LEFT = ((sizeof (LEFT) > sizeof (RIGHT) && (Sign_Check<LEFT>::is_signed == 1 || Sign_Check<RIGHT>::is_signed == 0)) || (sizeof (LEFT) == sizeof (RIGHT) && ((Sign_Check<LEFT>::is_signed == 1 && Sign_Check<RIGHT>::is_signed == 1) || (Sign_Check<LEFT>::is_signed == 0 && Sign_Check<RIGHT>::is_signed == 0))));
# 318 "/usr/local/include/ace/Truncate.h" 3
    static bool const USE_RIGHT = (sizeof (RIGHT) > sizeof (LEFT) && (Sign_Check<RIGHT>::is_signed == 1 || Sign_Check<LEFT>::is_signed == 0));





    static bool const USABLE = (USE_LEFT || USE_RIGHT);

    typedef typename ACE::If_Then_Else<
      USE_LEFT,
      LEFT,
      typename ACE::If_Then_Else<
        USE_RIGHT,
        RIGHT,
        void>::result_type>::result_type promote_type;

    static bool greater_than (LEFT lhs, RIGHT rhs)
    {


      return
        (static_cast<promote_type> (lhs) > static_cast<promote_type> (rhs));
    }

  };
# 372 "/usr/local/include/ace/Truncate.h" 3
  template<typename LEFT, typename RIGHT>
  struct Comparator
  {
    typedef typename ACE::If_Then_Else<
      Fast_Comparator<LEFT, RIGHT>::USABLE,
      Fast_Comparator<LEFT, RIGHT>,
      Safe_Comparator<LEFT,
                      RIGHT,
                      Sign_Check<LEFT>::is_signed,
                      Sign_Check<RIGHT>::is_signed> >::result_type comp_type;
  };
# 394 "/usr/local/include/ace/Truncate.h" 3
  template<typename FROM, typename TO>
  struct Truncator
  {
    static bool const MAX_FROM_GT_MAX_TO = (sizeof(FROM) > sizeof (TO) || (sizeof(FROM) == sizeof (TO) && Sign_Check<FROM>::is_signed == 0));






    typedef typename ACE::If_Then_Else<
      MAX_FROM_GT_MAX_TO,
      FROM,
      TO>::result_type comp_to_type;





    typedef typename ACE::If_Then_Else<
      MAX_FROM_GT_MAX_TO,
      Fast_Comparator<FROM, comp_to_type>,
      typename Comparator<FROM, comp_to_type>::comp_type>::result_type comparator;



    TO operator() (FROM val)
    {
      return
        (comparator::greater_than (val, ACE_Numeric_Limits<TO>::max ())
         ? ACE_Numeric_Limits<TO>::max ()
         : static_cast<TO> (val));
    }

  };



  template<typename T>
  struct Truncator<T, T>
  {
    T operator() (T val)
    {
      return val;
    }
  };
# 474 "/usr/local/include/ace/Truncate.h" 3
  template<typename FROM, typename TO>
  struct Noop_Truncator
  {
    TO operator() (FROM val)
    {
      return static_cast<TO> (val);
    }
  };
# 497 "/usr/local/include/ace/Truncate.h" 3
  template<typename TO, typename FROM>
  inline TO truncate_cast (FROM val)
  {



    typedef typename ACE::If_Then_Else<
      (sizeof (FROM) < sizeof (TO)),
      Noop_Truncator<FROM, TO>,
      Truncator<FROM, TO> >::result_type truncator;

    return truncator() (val);
  }

}



# 1 "/usr/local/include/ace/post.h" 1 3
# 516 "/usr/local/include/ace/Truncate.h" 2 3
# 6 "/usr/local/include/ace/Time_Value.inl" 2 3




inline
ACE_Time_Value::operator timeval () const
{
# 21 "/usr/local/include/ace/Time_Value.inl" 3
  return this->tv_;

}

inline void
ACE_Time_Value::set (const timeval &tv)
{

  this->tv_.tv_sec = tv.tv_sec;
  this->tv_.tv_usec = tv.tv_usec;

  this->normalize ();
}

inline
ACE_Time_Value::ACE_Time_Value (const struct timeval &tv)
{

  this->set (tv);
}

inline
ACE_Time_Value::operator const timeval * () const
{
# 53 "/usr/local/include/ace/Time_Value.inl" 3
  return (const timeval *) &this->tv_;

}

inline void
ACE_Time_Value::set (time_t sec, suseconds_t usec)
{
# 70 "/usr/local/include/ace/Time_Value.inl" 3
  this->tv_.tv_sec = sec;



  this->tv_.tv_usec = usec;

  if (__builtin_constant_p(sec) &&
      __builtin_constant_p(usec) &&
      (sec >= 0 && usec >= 0 && usec < ACE_ONE_SECOND_IN_USECS))
    return;

  this->normalize ();
}

inline void
ACE_Time_Value::set (double d)
{

  long l = (long) d;
  this->tv_.tv_sec = l;
  this->tv_.tv_usec = (suseconds_t) ((d - (double) l) * ACE_ONE_SECOND_IN_USECS + .5);
  this->normalize ();
}




inline void
ACE_Time_Value::set (const timespec_t &tv)
{


  this->set (tv.tv_sec,
             tv.tv_nsec / 1000);
}

inline
ACE_Time_Value::ACE_Time_Value (void)

{

  this->set (0, 0);
}

inline
ACE_Time_Value::ACE_Time_Value (time_t sec, suseconds_t usec)
{

  this->set (sec, usec);
}


inline time_t
ACE_Time_Value::sec (void) const
{

  return this->tv_.tv_sec;
}


inline void
ACE_Time_Value::sec (time_t sec)
{

  this->tv_.tv_sec = ACE_Utils::truncate_cast<long> (sec);
}


inline unsigned long
ACE_Time_Value::msec (void) const
{





  time_t secs = this->tv_.tv_sec * 1000 + this->tv_.tv_usec / 1000;
  return ACE_Utils::truncate_cast<unsigned long> (secs);
}

inline void
ACE_Time_Value::msec (ACE_UINT64 &ms) const
{

  ms = ACE_Utils::truncate_cast<ACE_UINT64> (this->tv_.tv_sec);
  ms *= 1000;
  ms += (this->tv_.tv_usec / 1000);
}

inline void
ACE_Time_Value::msec (ACE_UINT64 &ms)
{

  const ACE_Time_Value *tv = this;
  tv->msec (ms);
}


inline void
ACE_Time_Value::msec (long milliseconds)
{


  long secs = milliseconds / 1000;
  this->tv_.tv_sec = secs;

  this->tv_.tv_usec = (milliseconds - (secs * 1000)) * 1000;
}


inline void
ACE_Time_Value::msec (int milliseconds)
{
  ACE_Time_Value::msec (static_cast<long> (milliseconds));
}


inline suseconds_t
ACE_Time_Value::usec (void) const
{

  return this->tv_.tv_usec;
}


inline void
ACE_Time_Value::usec (suseconds_t usec)
{

  this->tv_.tv_usec = usec;
}

inline void
ACE_Time_Value::to_usec (ACE_UINT64 & usec) const
{
# 213 "/usr/local/include/ace/Time_Value.inl" 3
  usec = static_cast<ACE_UINT64> (this->tv_.tv_sec);

  usec *= 1000000;
  usec += this->tv_.tv_usec;
}

inline ACE_Time_Value
operator * (double d, const ACE_Time_Value &tv)
{
  return ACE_Time_Value (tv) *= d;
}

inline ACE_Time_Value
operator * (const ACE_Time_Value &tv, double d)
{
  return ACE_Time_Value (tv) *= d;
}


inline bool
operator > (const ACE_Time_Value &tv1,
            const ACE_Time_Value &tv2)
{

  if (tv1.sec () > tv2.sec ())
    return 1;
  else if (tv1.sec () == tv2.sec ()
           && tv1.usec () > tv2.usec ())
    return 1;
  else
    return 0;
}


inline bool
operator >= (const ACE_Time_Value &tv1,
             const ACE_Time_Value &tv2)
{

  if (tv1.sec () > tv2.sec ())
    return 1;
  else if (tv1.sec () == tv2.sec ()
           && tv1.usec () >= tv2.usec ())
    return 1;
  else
    return 0;
}


inline
ACE_Time_Value::operator timespec_t () const
{

  timespec_t tv;
  tv.tv_sec = this->sec ();

  tv.tv_nsec = this->tv_.tv_usec * 1000;
  return tv;
}


inline
ACE_Time_Value::ACE_Time_Value (const timespec_t &tv)

{

  this->set (tv);
}


inline bool
operator < (const ACE_Time_Value &tv1,
            const ACE_Time_Value &tv2)
{

  return tv2 > tv1;
}


inline bool
operator <= (const ACE_Time_Value &tv1,
             const ACE_Time_Value &tv2)
{

  return tv2 >= tv1;
}


inline bool
operator == (const ACE_Time_Value &tv1,
             const ACE_Time_Value &tv2)
{

  return tv1.sec () == tv2.sec ()
    && tv1.usec () == tv2.usec ();
}


inline bool
operator != (const ACE_Time_Value &tv1,
             const ACE_Time_Value &tv2)
{

  return !(tv1 == tv2);
}


inline ACE_Time_Value &
ACE_Time_Value::operator+= (const ACE_Time_Value &tv)
{

  this->sec (this->sec () + tv.sec ());
  this->usec (this->usec () + tv.usec ());
  this->normalize ();
  return *this;
}

inline ACE_Time_Value &
ACE_Time_Value::operator+= (time_t tv)
{

  this->sec (this->sec () + tv);
  return *this;
}

inline ACE_Time_Value &
ACE_Time_Value::operator= (const ACE_Time_Value &tv)
{

  this->sec (tv.sec ());
  this->usec (tv.usec ());
  return *this;
}

inline ACE_Time_Value &
ACE_Time_Value::operator= (time_t tv)
{

  this->sec (tv);
  this->usec (0);
  return *this;
}


inline ACE_Time_Value &
ACE_Time_Value::operator-= (const ACE_Time_Value &tv)
{

  this->sec (this->sec () - tv.sec ());
  this->usec (this->usec () - tv.usec ());
  this->normalize ();
  return *this;
}

inline ACE_Time_Value &
ACE_Time_Value::operator-= (time_t tv)
{

  this->sec (this->sec () - tv);
  return *this;
}


inline ACE_Time_Value
operator + (const ACE_Time_Value &tv1,
            const ACE_Time_Value &tv2)
{

  ACE_Time_Value sum (tv1);
  sum += tv2;

  return sum;
}


inline ACE_Time_Value
operator - (const ACE_Time_Value &tv1,
            const ACE_Time_Value &tv2)
{

  ACE_Time_Value delta (tv1);
  delta -= tv2;

  return delta;
}


# 360 "/usr/local/include/ace/Time_Value.h" 2 3
# 372 "/usr/local/include/ace/Time_Value.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 373 "/usr/local/include/ace/Time_Value.h" 2 3
# 8 "/usr/local/include/ace/OS_NS_Thread.inl" 2 3
# 1 "/usr/local/include/ace/OS_NS_sys_mman.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_sys_mman.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_sys_mman.h" 2 3
# 30 "/usr/local/include/ace/OS_NS_sys_mman.h" 3
# 1 "/usr/local/include/ace/os_include/sys/os_mman.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_mman.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_mman.h" 2 3
# 38 "/usr/local/include/ace/os_include/sys/os_mman.h" 3
# 1 "/usr/include/sys/mman.h" 1 3 4
# 26 "/usr/include/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 27 "/usr/include/sys/mman.h" 2 3 4
# 42 "/usr/include/sys/mman.h" 3 4
# 1 "/usr/include/bits/mman.h" 1 3 4
# 43 "/usr/include/sys/mman.h" 2 3 4




extern "C" {
# 58 "/usr/include/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 71 "/usr/include/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (__const void *__addr, size_t __len) throw ();


extern int munlock (__const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 134 "/usr/include/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (__const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (__const char *__name);

}
# 39 "/usr/local/include/ace/os_include/sys/os_mman.h" 2 3







extern "C"
{
# 118 "/usr/local/include/ace/os_include/sys/os_mman.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 122 "/usr/local/include/ace/os_include/sys/os_mman.h" 2 3
# 31 "/usr/local/include/ace/OS_NS_sys_mman.h" 2 3









namespace ACE_OS
{


  extern inline
  int madvise (caddr_t addr,
               size_t len,
               int map_advice);

  extern inline
  void *mmap (void *addr,
              size_t len,
              int prot,
              int flags,
              ACE_HANDLE handle,
              ACE_OFF_T off = 0,
              ACE_HANDLE *file_mapping = 0,
              int sa = 0,
              const ACE_TCHAR *file_mapping_name = 0);

  extern inline
  int mprotect (void *addr,
                size_t len,
                int prot);

  extern inline
  int msync (void *addr,
             size_t len,
             int sync);

  extern inline
  int munmap (void *addr,
              size_t len);


  extern inline
  ACE_HANDLE shm_open (const ACE_TCHAR *filename,
                       int mode,
                       mode_t perms = 0,
                       int sa = 0);

  extern inline
  int shm_unlink (const ACE_TCHAR *path);

}








# 1 "/usr/local/include/ace/OS_NS_sys_mman.inl" 1 3




# 1 "/usr/local/include/ace/OS_NS_fcntl.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_fcntl.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_fcntl.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_fcntl.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_fcntl.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_fcntl.h" 2 3







# 1 "/usr/local/include/ace/os_include/sys/os_stat.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_stat.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_stat.h" 2 3
# 34 "/usr/local/include/ace/os_include/sys/os_stat.h" 3
# 1 "/usr/include/sys/stat.h" 1 3 4
# 105 "/usr/include/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/bits/stat.h" 1 3 4
# 46 "/usr/include/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/bits/stat.h" 3 4
    long int __unused[3];
# 115 "/usr/include/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 167 "/usr/include/bits/stat.h" 3 4
    long int __unused[3];



  };
# 108 "/usr/include/sys/stat.h" 2 3 4
# 211 "/usr/include/sys/stat.h" 3 4
extern int stat (__const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 230 "/usr/include/sys/stat.h" 3 4
extern int stat64 (__const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, __const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 255 "/usr/include/sys/stat.h" 3 4
extern int fstatat64 (int __fd, __const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (__const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 278 "/usr/include/sys/stat.h" 3 4
extern int lstat64 (__const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (__const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (__const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, __const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (__const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, __const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, __const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (__const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, __const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, __const char *__path,
        __const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, __const struct timespec __times[2]) throw ();
# 401 "/usr/include/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, __const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, __const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, __const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 434 "/usr/include/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, __const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, __const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, __const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, __const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, __const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));
# 536 "/usr/include/sys/stat.h" 3 4
}
# 35 "/usr/local/include/ace/os_include/sys/os_stat.h" 2 3




extern "C"
{
# 153 "/usr/local/include/ace/os_include/sys/os_stat.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 157 "/usr/local/include/ace/os_include/sys/os_stat.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_fcntl.h" 2 3



# 1 "/usr/include/fcntl.h" 1 3 4
# 30 "/usr/include/fcntl.h" 3 4
extern "C" {



# 1 "/usr/include/bits/fcntl.h" 1 3 4
# 26 "/usr/include/bits/fcntl.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/fcntl.h" 2 3 4

# 1 "/usr/include/bits/uio.h" 1 3 4
# 44 "/usr/include/bits/uio.h" 3 4
struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 29 "/usr/include/bits/fcntl.h" 2 3 4
# 165 "/usr/include/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };




enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 263 "/usr/include/bits/fcntl.h" 3 4
extern "C" {




extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();



extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);



extern ssize_t vmsplice (int __fdout, const struct iovec *__iov,
    size_t __count, unsigned int __flags);


extern ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
         __off64_t *__offout, size_t __len,
         unsigned int __flags);


extern ssize_t tee (int __fdin, int __fdout, size_t __len,
      unsigned int __flags);



extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 303 "/usr/include/bits/fcntl.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);



}
# 35 "/usr/include/fcntl.h" 2 3 4






# 1 "/usr/include/bits/stat.h" 1 3 4
# 42 "/usr/include/fcntl.h" 2 3 4
# 110 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 119 "/usr/include/fcntl.h" 3 4
extern int open (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 129 "/usr/include/fcntl.h" 3 4
extern int open64 (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 143 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 154 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 165 "/usr/include/fcntl.h" 3 4
extern int creat (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 175 "/usr/include/fcntl.h" 3 4
extern int creat64 (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 211 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off_t __offset, __off_t __len,
     int __advise) throw ();
# 223 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, __off64_t __offset, __off64_t __len,
       int __advise) throw ();
# 233 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off_t __offset, __off_t __len);
# 244 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, __off64_t __offset, __off64_t __len);
# 255 "/usr/include/fcntl.h" 3 4
}
# 32 "/usr/local/include/ace/os_include/os_fcntl.h" 2 3
# 41 "/usr/local/include/ace/os_include/os_fcntl.h" 3
extern "C"
{
# 102 "/usr/local/include/ace/os_include/os_fcntl.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 106 "/usr/local/include/ace/os_include/os_fcntl.h" 2 3
# 29 "/usr/local/include/ace/OS_NS_fcntl.h" 2 3
# 38 "/usr/local/include/ace/OS_NS_fcntl.h" 3


namespace ACE_OS {

  extern inline
  int fcntl (ACE_HANDLE handle,
             int cmd,
             long arg = 0);







  extern
  ACE_HANDLE open (const char *filename,
                   int mode,
                   mode_t perms = 0644,
                   int sa = 0);

  extern
  ACE_HANDLE open (const wchar_t *filename,
                   int mode,
                   mode_t perms = 0644,
                   int sa = 0);


}








# 1 "/usr/local/include/ace/OS_NS_fcntl.inl" 1 3








inline int
ACE_OS::fcntl (ACE_HANDLE handle, int cmd, long arg)
{
  ;






  do return (int) (::fcntl (handle, cmd, arg)); while (0);

}


# 76 "/usr/local/include/ace/OS_NS_fcntl.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 79 "/usr/local/include/ace/OS_NS_fcntl.h" 2 3
# 6 "/usr/local/include/ace/OS_NS_sys_mman.inl" 2 3
# 1 "/usr/local/include/ace/OS_NS_unistd.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_unistd.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_unistd.h" 2 3
# 30 "/usr/local/include/ace/OS_NS_unistd.h" 3
# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 31 "/usr/local/include/ace/OS_NS_unistd.h" 2 3
# 46 "/usr/local/include/ace/OS_NS_unistd.h" 3


namespace ACE_OS
{

  extern inline
  int access (const char *path, int amode);


  extern inline
  int access (const wchar_t *path, int amode);


  extern inline
  unsigned int alarm (u_int secs);

  extern inline
  long allocation_granularity (void);


  extern
  int argv_to_string (int argc,
                      ACE_TCHAR **argv,
                      ACE_TCHAR *&buf,
                      bool substitute_env_args = true,
                      bool quote_args = false);

  extern
  int argv_to_string (ACE_TCHAR **argv,
                      ACE_TCHAR *&buf,
                      bool substitute_env_args = true,
                      bool quote_args = false);

  extern inline
  int chdir (const char *path);


  extern inline
  int chdir (const wchar_t *path);


  extern inline
  int rmdir (const char *path);


  extern inline
  int rmdir (const wchar_t *path);


  extern inline
  int close (ACE_HANDLE handle);

  extern inline
  ACE_HANDLE dup (ACE_HANDLE handle);

  extern inline
  ACE_HANDLE dup (ACE_HANDLE handle, pid_t pid);

  extern inline
  int dup2 (ACE_HANDLE oldfd,
            ACE_HANDLE newfd);

  extern
  int execl (const char *path,
             const char *arg0, ...);

  extern
  int execle (const char *path,
              const char *arg0, ...);

  extern
  int execlp (const char *file,
              const char *arg0, ...);

  extern inline
  int execv (const char *path,
             char *const argv[]);

  extern inline
  int execve (const char *path,
              char *const argv[],
              char *const envp[]);

  extern inline
  int execvp (const char *file,
              char *const argv[]);




  extern inline
  pid_t fork (void);


  extern
  pid_t fork (const ACE_TCHAR *program_name);

  extern
  pid_t fork_exec (ACE_TCHAR *argv[]);


  extern inline
  int fsync (ACE_HANDLE handle);

  extern inline
  int ftruncate (ACE_HANDLE handle, ACE_OFF_T offset);

  extern inline
  char *getcwd (char *, size_t);


  extern inline
  wchar_t *getcwd (wchar_t *, size_t);


  extern inline
  gid_t getgid (void);

  extern inline
  gid_t getegid (void);

  extern inline
  int getopt (int argc,
              char *const *argv,
              const char *optstring);

  extern inline
  long getpagesize (void);

  extern inline
  pid_t getpgid (pid_t pid);

  extern inline
  pid_t getpid (void);

  extern inline
  pid_t getppid (void);

  extern inline
  uid_t getuid (void);

  extern inline
  uid_t geteuid (void);


  extern inline
  int hostname (char *name,
                size_t maxnamelen);


  extern inline
  int hostname (wchar_t *name,
                size_t maxnamelen);


  extern inline
  int isatty (int handle);






  extern inline
  ACE_OFF_T lseek (ACE_HANDLE handle,
                   ACE_OFF_T offset,
                   int whence);


  extern inline
  ACE_LOFF_T llseek (ACE_HANDLE handle,
                     ACE_LOFF_T offset,
                     int whence);



  extern
  long num_processors (void);


  extern
  long num_processors_online (void);

  extern inline
  int pipe (ACE_HANDLE handles[]);

  extern
  ssize_t pread (ACE_HANDLE handle,
                 void *buf,
                 size_t nbyte,
                 ACE_OFF_T offset);

  extern
  ssize_t pwrite (ACE_HANDLE handle,
                  const void *buf,
                  size_t nbyte,
                  ACE_OFF_T offset);

  extern inline
  ssize_t read (ACE_HANDLE handle,
                void *buf,
                size_t len);

  extern inline
  ssize_t read (ACE_HANDLE handle,
                void *buf,
                size_t len,
                ACE_OVERLAPPED *);
# 263 "/usr/local/include/ace/OS_NS_unistd.h" 3
  extern
  ssize_t read_n (ACE_HANDLE handle,
                  void *buf,
                  size_t len,
                  size_t *bytes_transferred = 0);

  extern inline
  ssize_t readlink (const char *path,
                    char *buf,
                    size_t bufsiz);

  extern inline
  void *sbrk (intptr_t brk);

  extern inline
  int setgid (gid_t);

  extern inline
  int setegid (gid_t);

  extern inline
  int setpgid (pid_t pid, pid_t pgid);

  extern inline
  int setregid (gid_t rgid, gid_t egid);

  extern inline
  int setreuid (uid_t ruid, uid_t euid);

  extern inline
  pid_t setsid (void);

  extern inline
  int setuid (uid_t);

  extern inline
  int seteuid (uid_t);

  extern inline
  int sleep (u_int seconds);

  extern inline
  int sleep (const ACE_Time_Value &tv);


  extern
  int string_to_argv (ACE_TCHAR *buf,
                      int &argc,
                      ACE_TCHAR **&argv,
                      bool substitute_env_args = true);

  extern inline
  void swab (const void *src, void *dest, ssize_t n);

  extern inline
  long sysconf (int);


  extern inline
  long sysinfo (int cmd,
                char *buf,
                long count);

  extern inline
  int truncate (const ACE_TCHAR *filename, ACE_OFF_T length);

  extern inline
  useconds_t ualarm (useconds_t usecs,
                     useconds_t interval = 0);

  extern inline
  useconds_t ualarm (const ACE_Time_Value &tv,
                     const ACE_Time_Value &tv_interval = ACE_Time_Value::zero);

  extern inline
  int unlink (const char *path);


  extern inline
  int unlink (const wchar_t *path);


  extern inline
  ssize_t write (ACE_HANDLE handle,
                 const void *buf,
                 size_t nbyte);

  extern inline
  ssize_t write (ACE_HANDLE handle,
                 const void *buf,
                 size_t nbyte,
                 ACE_OVERLAPPED *);
# 363 "/usr/local/include/ace/OS_NS_unistd.h" 3
  extern
  ssize_t write_n (ACE_HANDLE handle,
                   const void *buf,
                   size_t len,
                   size_t *bytes_transferred = 0);

}








# 1 "/usr/local/include/ace/OS_NS_unistd.inl" 1 3




# 1 "/usr/local/include/ace/OS_NS_sys_utsname.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_sys_utsname.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_sys_utsname.h" 2 3
# 53 "/usr/local/include/ace/OS_NS_sys_utsname.h" 3
# 1 "/usr/local/include/ace/os_include/sys/os_utsname.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_utsname.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_utsname.h" 2 3
# 28 "/usr/local/include/ace/os_include/sys/os_utsname.h" 3
# 1 "/usr/include/sys/utsname.h" 1 3 4
# 28 "/usr/include/sys/utsname.h" 3 4
extern "C" {

# 1 "/usr/include/bits/utsname.h" 1 3 4
# 31 "/usr/include/sys/utsname.h" 2 3 4
# 49 "/usr/include/sys/utsname.h" 3 4
struct utsname
  {

    char sysname[65];


    char nodename[65];


    char release[65];

    char version[65];


    char machine[65];




    char domainname[65];




  };
# 82 "/usr/include/sys/utsname.h" 3 4
extern int uname (struct utsname *__name) throw ();


}
# 29 "/usr/local/include/ace/os_include/sys/os_utsname.h" 2 3




extern "C"
{



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 42 "/usr/local/include/ace/os_include/sys/os_utsname.h" 2 3
# 54 "/usr/local/include/ace/OS_NS_sys_utsname.h" 2 3

typedef struct utsname ACE_utsname;





namespace ACE_OS {

  extern
  int uname (ACE_utsname *name);

}



# 1 "/usr/local/include/ace/post.h" 1 3
# 71 "/usr/local/include/ace/OS_NS_sys_utsname.h" 2 3
# 6 "/usr/local/include/ace/OS_NS_unistd.inl" 2 3
# 34 "/usr/local/include/ace/OS_NS_unistd.inl" 3


inline int
ACE_OS::access (const char *path, int amode)
{
  ;
# 62 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::access (path, amode)); while (0);

}



inline int
ACE_OS::access (const wchar_t *path, int amode)
{



  return ACE_OS::access (ACE_Wide_To_Ascii (path).char_rep (), amode);

}


inline u_int
ACE_OS::alarm (u_int secs)
{
  ;




  return ::alarm (secs);

}

inline long
ACE_OS::getpagesize (void)
{
  ;





  return ::sysconf (_SC_PAGESIZE);






}

inline long
ACE_OS::allocation_granularity (void)
{





  return ACE_OS::getpagesize ();

}

inline int
ACE_OS::chdir (const char *path)
{
  ;






  do return (int) (::chdir (path)); while (0);

}


inline int
ACE_OS::chdir (const wchar_t *path)
{






  return ACE_OS::chdir (ACE_Wide_To_Ascii (path).char_rep ());

}


inline int
ACE_OS::rmdir (const char *path)
{





  do return (int) (::rmdir (path)); while (0);

}


inline int
ACE_OS::rmdir (const wchar_t *path)
{







  ACE_Wide_To_Ascii n_path (path);
  return ACE_OS::rmdir (n_path.char_rep ());

}






inline int
ACE_OS::close (ACE_HANDLE handle)
{
  ;



  do return (int) (::close (handle)); while (0);

}

inline ACE_HANDLE
ACE_OS::dup (ACE_HANDLE handle)
{
  ;
# 215 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (ACE_HANDLE) (::dup (handle)); while (0);

}

inline ACE_HANDLE
ACE_OS::dup(ACE_HANDLE handle, pid_t pid)
{
  ;
# 247 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  (void) (pid);
  do return (ACE_HANDLE) (::dup(handle)); while (0);

}

inline int
ACE_OS::dup2 (ACE_HANDLE oldhandle, ACE_HANDLE newhandle)
{
  ;






  do return (int) (::dup2 (oldhandle, newhandle)); while (0);

}

inline int
ACE_OS::execv (const char *path,
               char *const argv[])
{
  ;
# 290 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::execv (path, argv)); while (0);

}

inline int
ACE_OS::execve (const char *path,
                char *const argv[],
                char *const envp[])
{
  ;
# 320 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::execve (path, argv, envp)); while (0);

}

inline int
ACE_OS::execvp (const char *file,
                char *const argv[])
{
  ;
# 348 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::execvp (file, argv)); while (0);

}

inline pid_t
ACE_OS::fork (void)
{
  ;



  do return (pid_t) (::fork ()); while (0);

}

inline int
ACE_OS::fsync (ACE_HANDLE handle)
{
  ;






  do return (int) (::fsync (handle)); while (0);

}

inline int
ACE_OS::ftruncate (ACE_HANDLE handle, ACE_OFF_T offset)
{
  ;
# 396 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::ftruncate (handle, offset)); while (0);

}

inline char *
ACE_OS::getcwd (char *buf, size_t size)
{
  ;







  do return (char *) (::getcwd (buf, size)); while (0);

}


inline wchar_t *
ACE_OS::getcwd (wchar_t *buf, size_t size)
{







  char *narrow_buf = new char[size];
  char *result = 0;
  result = ACE_OS::getcwd (narrow_buf, size);
  ACE_Ascii_To_Wide wide_buf (result);
  delete [] narrow_buf;
  if (result != 0)
    ACE_OS::strsncpy (buf, wide_buf.wchar_rep (), size);
  return result == 0 ? 0 : buf;

}


inline gid_t
ACE_OS::getgid (void)
{
  ;



  do return (gid_t) (::getgid ()); while (0);

}

inline gid_t
ACE_OS::getegid (void)
{
  ;



  do return (gid_t) (::getegid ()); while (0);

}

inline int
ACE_OS::getopt (int argc, char *const *argv, const char *optstring)
{
  ;






  do return (int) (::getopt (argc, argv, optstring)); while (0);

}

inline pid_t
ACE_OS::getpgid (pid_t pid)
{
  ;
# 486 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (pid_t) (::__getpgid (pid)); while (0);



}

inline pid_t
ACE_OS::getpid (void)
{






  do return (int) (::getpid ()); while (0);

}

inline pid_t
ACE_OS::getppid (void)
{
  ;



  do return (pid_t) (::getppid ()); while (0);

}

inline uid_t
ACE_OS::getuid (void)
{
  ;



  do return (uid_t) (::getuid ()); while (0);

}

inline uid_t
ACE_OS::geteuid (void)
{
  ;



  do return (uid_t) (::geteuid ()); while (0);

}

inline int
ACE_OS::hostname (char name[], size_t maxnamelen)
{
  ;
# 568 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  ACE_utsname host_info;

  if (ACE_OS::uname (&host_info) == -1)
    return -1;
  else
    {
      ACE_OS::strsncpy (name, host_info.nodename, maxnamelen);
      return 0;
    }

}


inline int
ACE_OS::hostname (wchar_t name[], size_t maxnamelen)
{






  char *char_name = 0;

  do { char_name = new (::std::nothrow) char[maxnamelen]; if (char_name == 0) { (*__errno_location ()) = 12; return -1; } } while (0);

  int result = ACE_OS::hostname(char_name, maxnamelen);
  ACE_OS::strcpy (name, ACE_Ascii_To_Wide (char_name).wchar_rep ());

  delete [] char_name;
  return result;

}


inline int
ACE_OS::isatty (int handle)
{
  ;






  do return (int) (::isatty (handle)); while (0);

}
# 638 "/usr/local/include/ace/OS_NS_unistd.inl" 3
inline ACE_OFF_T
ACE_OS::lseek (ACE_HANDLE handle, ACE_OFF_T offset, int whence)
{
  ;
# 670 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (ACE_OFF_T) (::lseek (handle, offset, whence)); while (0);

}


inline ACE_LOFF_T
ACE_OS::llseek (ACE_HANDLE handle, ACE_LOFF_T offset, int whence)
{
  ;



  return ACE_OS::lseek (handle, offset, whence);
# 718 "/usr/local/include/ace/OS_NS_unistd.inl" 3
}


inline ssize_t
ACE_OS::read (ACE_HANDLE handle, void *buf, size_t len)
{
  ;
# 733 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  ssize_t result;




  do result = (ssize_t) (::read (handle, buf, len)); while (0);
# 757 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  return result;

}

inline ssize_t
ACE_OS::read (ACE_HANDLE handle, void *buf, size_t len,
              ACE_OVERLAPPED *overlapped)
{
  ;
  overlapped = overlapped;
# 775 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  return ACE_OS::read (handle, buf, len);

}

inline ssize_t
ACE_OS::readlink (const char *path, char *buf, size_t bufsiz)
{
  ;
# 792 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (ssize_t) (::readlink (path, buf, bufsiz)); while (0);

}

inline int
ACE_OS::pipe (ACE_HANDLE fds[])
{
  ;
# 808 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::pipe (fds)); while (0);

}

inline void *
ACE_OS::sbrk (intptr_t brk)
{




  do return (void *) (::sbrk (brk)); while (0);

}

inline int
ACE_OS::setgid (gid_t gid)
{
  ;




  do return (int) (::setgid (gid)); while (0);

}

inline int
ACE_OS::setegid (gid_t gid)
{
  ;




  do return (int) (::setegid (gid)); while (0);

}

inline int
ACE_OS::setpgid (pid_t pid, pid_t pgid)
{
  ;





  do return (int) (::setpgid (pid, pgid)); while (0);

}

inline int
ACE_OS::setregid (gid_t rgid, gid_t egid)
{
  ;





  do return (int) (::setregid (rgid, egid)); while (0);

}

inline int
ACE_OS::setreuid (uid_t ruid, uid_t euid)
{
  ;





  do return (int) (::setreuid (ruid, euid)); while (0);

}

inline pid_t
ACE_OS::setsid (void)
{
  ;



  do return (int) (::setsid ()); while (0);

}

inline int
ACE_OS::setuid (uid_t uid)
{
  ;




  do return (int) (::setuid (uid)); while (0);

}

inline int
ACE_OS::seteuid (uid_t uid)
{
  ;




  do return (int) (::seteuid (uid)); while (0);

}

inline int
ACE_OS::sleep (u_int seconds)
{
  ;




  struct timespec rqtp;

  rqtp.tv_sec = seconds;
  rqtp.tv_nsec = 0L;

  do return (int) (::nanosleep (&rqtp, 0)); while (0);




}

inline int
ACE_OS::sleep (const ACE_Time_Value &tv)
{
  ;




  timespec_t rqtp = tv;

  do return (int) (::nanosleep (&rqtp, 0)); while (0);
# 972 "/usr/local/include/ace/OS_NS_unistd.inl" 3
}

inline void
ACE_OS::swab (const void *src,
              void *dest,
              ssize_t length)
{
# 1013 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  const char *tmp = static_cast<const char*> (src);
  char *from = const_cast<char *> (tmp);
  char *to = static_cast<char *> (dest);
  ::swab (from, to, length);
# 1025 "/usr/local/include/ace/OS_NS_unistd.inl" 3
}

inline long
ACE_OS::sysconf (int name)
{
  ;




  do return (long) (::sysconf (name)); while (0);

}

inline long
ACE_OS::sysinfo (int cmd, char *buf, long count)
{
  ;



  (void) (cmd);
  (void) (buf);
  (void) (count);

  do { (*__errno_location ()) = 95 ; return 0; } while (0);

}

inline int
ACE_OS::truncate (const ACE_TCHAR *filename,
                  ACE_OFF_T offset)
{
  ;
# 1099 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::truncate (filename, offset)); while (0);






}

inline useconds_t
ACE_OS::ualarm (useconds_t usecs, useconds_t interval)
{
  ;


  return ::ualarm (usecs, interval);
# 1123 "/usr/local/include/ace/OS_NS_unistd.inl" 3
}

inline useconds_t
ACE_OS::ualarm (const ACE_Time_Value &tv,
                const ACE_Time_Value &tv_interval)
{
  ;


  useconds_t usecs = (tv.sec () * ACE_ONE_SECOND_IN_USECS) + tv.usec ();
  useconds_t interval =
    (tv_interval.sec () * ACE_ONE_SECOND_IN_USECS) + tv_interval.usec ();
  return ::ualarm (usecs, interval);
# 1144 "/usr/local/include/ace/OS_NS_unistd.inl" 3
}

inline int
ACE_OS::unlink (const char *path)
{
  ;
# 1160 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (int) (::unlink (path)); while (0);

}


inline int
ACE_OS::unlink (const wchar_t *path)
{
  ;







  ACE_Wide_To_Ascii npath (path);
  return ACE_OS::unlink (npath.char_rep ());

}


inline ssize_t
ACE_OS::write (ACE_HANDLE handle, const void *buf, size_t nbyte)
{
  ;
# 1200 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  do return (ssize_t) (::write (handle, buf, nbyte)); while (0);


}

inline ssize_t
ACE_OS::write (ACE_HANDLE handle,
               const void *buf,
               size_t nbyte,
               ACE_OVERLAPPED *overlapped)
{
  ;
  overlapped = overlapped;
# 1222 "/usr/local/include/ace/OS_NS_unistd.inl" 3
  return ACE_OS::write (handle, buf, nbyte);

}


# 379 "/usr/local/include/ace/OS_NS_unistd.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 382 "/usr/local/include/ace/OS_NS_unistd.h" 2 3
# 7 "/usr/local/include/ace/OS_NS_sys_mman.inl" 2 3
# 1 "/usr/local/include/ace/OS_NS_stdio.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_stdio.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_stdio.h" 2 3
# 54 "/usr/local/include/ace/OS_NS_stdio.h" 3
inline void ace_clearerr_helper (FILE *stream)
{




  ::clearerr (stream);

}


inline int ace_fgetc_helper (FILE *fp)
{




  return ::fgetc (fp);

}

inline int ace_fputc_helper (int ch, FILE *fp)
{




  return ::fputc (ch, fp);

}

inline int ace_getc_helper (FILE *fp)
{

  return _IO_getc (fp);




}

inline int ace_putc_helper (int ch, FILE *fp)
{

  return _IO_putc (ch, fp);




}

inline int ace_ungetc_helper (int ch, FILE *fp)
{




  return ::ungetc (ch, fp);

}


inline ACE_HANDLE ace_fileno_helper (FILE *fp)
{




  return (ACE_HANDLE)::fileno (fp);

}
# 167 "/usr/local/include/ace/OS_NS_stdio.h" 3


namespace ACE_OS {






  class ace_flock_t
  {
  public:

    void dump (void) const;




    struct flock lock_;



    const ACE_TCHAR *lockname_;


    ACE_HANDLE handle_;
  };
# 203 "/usr/local/include/ace/OS_NS_stdio.h" 3
  extern inline
  void clearerr (FILE* fp);
# 214 "/usr/local/include/ace/OS_NS_stdio.h" 3
  extern inline
  char *cuserid (char *user,
                 size_t maxlen = 9);


  extern inline
  wchar_t *cuserid (wchar_t *user,
                    size_t maxlen = 9);




  extern
  int asprintf (char **bufp, const char* format, ...);


  extern
  int asprintf (wchar_t **bufp, const wchar_t* format, ...);


  extern inline
  int fclose (FILE *fp);

  extern inline
  FILE *fdopen (ACE_HANDLE handle, const ACE_TCHAR *mode);

  extern inline
  int fflush (FILE *fp);

  extern inline
  int fgetc (FILE* fp);

  extern inline
  int getc (FILE* fp);

  extern inline
  int fgetpos (FILE* fp, fpos_t* pos);

  extern inline
  char *fgets (char *buf, int size, FILE *fp);


  extern inline
  wchar_t *fgets (wchar_t *buf, int size, FILE *fp);
# 270 "/usr/local/include/ace/OS_NS_stdio.h" 3
  extern inline
  int flock_init (ace_flock_t *lock,
                  int flags = 0,
                  const ACE_TCHAR *name = 0,
                  mode_t perms = 0);

  extern inline
  int flock_destroy (ace_flock_t *lock,
                     int unlink_file = 1);

  extern inline
  int flock_rdlock (ace_flock_t *lock,
                    short whence = 0,
                    ACE_OFF_T start = 0,
                    ACE_OFF_T len = 0);

  extern inline
  int flock_tryrdlock (ace_flock_t *lock,
                       short whence = 0,
                       ACE_OFF_T start = 0,
                       ACE_OFF_T len = 0);

  extern inline
  int flock_trywrlock (ace_flock_t *lock,
                       short whence = 0,
                       ACE_OFF_T start = 0,
                       ACE_OFF_T len = 0);

  extern inline
  int flock_unlock (ace_flock_t *lock,
                    short whence = 0,
                    ACE_OFF_T start = 0,
                    ACE_OFF_T len = 0);

  extern inline
  int flock_wrlock (ace_flock_t *lock,
                    short whence = 0,
                    ACE_OFF_T start = 0,
                    ACE_OFF_T len = 0);




  extern inline
  ACE_HANDLE fileno (FILE *stream);




  extern inline

  FILE *fopen (const char *filename, const char *mode);





  extern inline

  FILE *fopen (const char *filename, const wchar_t *mode);



  extern inline

  FILE *fopen (const wchar_t *filename, const wchar_t *mode);



  extern inline

  FILE *fopen (const wchar_t *filename, const char *mode);
# 377 "/usr/local/include/ace/OS_NS_stdio.h" 3
  extern
  int fprintf (FILE *fp, const char *format, ...);


  extern
  int fprintf (FILE *fp, const wchar_t *format, ...);


  extern inline
  int ungetc (int c,
              FILE *fp);

  extern inline
  int fputc (int c,
             FILE *fp);

  extern inline
  int putc (int c,
            FILE *fp);

  extern inline
  int fputs (const char *s,
             FILE *stream);


  extern inline
  int fputs (const wchar_t *s,
             FILE *stream);


  extern inline
  size_t fread (void *ptr,
                size_t size,
                size_t nelems,
                FILE *fp);

  extern inline
  FILE *freopen (const ACE_TCHAR *filename,
                 const ACE_TCHAR *mode,
                 FILE* stream);

  extern inline
  int fseek (FILE *fp,
             long offset,
             int ptrname);

  extern inline
  int fsetpos (FILE* fp, fpos_t* pos);

  extern inline
  long ftell (FILE* fp);

  extern inline
  size_t fwrite (const void *ptr,
                 size_t size,
                 size_t nitems,
                 FILE *fp);

  extern inline
  void perror (const char *s);


  extern inline
  void perror (const wchar_t *s);


  extern
  int printf (const char *format, ...);


  extern
  int printf (const wchar_t *format, ...);


  extern inline
  int puts (const char *s);


  extern inline
  int puts (const wchar_t *s);


  extern inline
  int rename (const char *old_name,
              const char *new_name,
              int flags = -1);


  extern inline
  int rename (const wchar_t *old_name,
              const wchar_t *new_name,
              int flags = -1);


  extern inline
  void rewind (FILE *fp);

  extern
  int snprintf (char *buf, size_t maxlen, const char *format, ...);


  extern
  int snprintf (wchar_t *buf, size_t maxlen, const wchar_t *format, ...);


  extern
  int sprintf (char *buf, const char *format, ...);


  extern
  int sprintf (wchar_t *buf, const wchar_t *format, ...);


  extern inline
  char *tempnam (const char *dir = 0,
                 const char *pfx = 0);


  extern inline
  wchar_t *tempnam (const wchar_t *dir,
                    const wchar_t *pfx = 0);


  extern inline
  int vasprintf (char **bufp, const char *format, va_list argptr);

  extern inline
  int vprintf (const char *format, va_list argptr);

  extern inline
  int vfprintf (FILE *fp, const char *format, va_list argptr);

  extern inline
  int vsprintf (char *buffer, const char *format, va_list argptr);

  extern inline
  int vsnprintf (char *buffer, size_t maxlen, const char *format, va_list argptr);


  extern inline
  int vasprintf (wchar_t **bufp, const wchar_t *format, va_list argptr);

  extern inline
  int vprintf (const wchar_t *format, va_list argptr);

  extern inline
  int vfprintf (FILE *fp, const wchar_t *format, va_list argptr);

  extern inline
  int vsprintf (wchar_t *buffer, const wchar_t *format, va_list argptr);

  extern inline
  int vsnprintf (wchar_t *buffer, size_t maxlen, const wchar_t *format, va_list argptr);
# 539 "/usr/local/include/ace/OS_NS_stdio.h" 3
  extern
  int vaswprintf_emulation (wchar_t **bufp, const wchar_t *format, va_list argptr);



}








# 1 "/usr/local/include/ace/OS_NS_stdio.inl" 1 3
# 10 "/usr/local/include/ace/OS_NS_stdio.inl" 3
# 1 "/usr/local/include/ace/OS_NS_pwd.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_pwd.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_pwd.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_pwd.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_pwd.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_pwd.h" 2 3
# 30 "/usr/local/include/ace/os_include/os_pwd.h" 3
# 1 "/usr/include/pwd.h" 1 3 4
# 28 "/usr/include/pwd.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 34 "/usr/include/pwd.h" 2 3 4
# 50 "/usr/include/pwd.h" 3 4
struct passwd
{
  char *pw_name;
  char *pw_passwd;
  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};
# 73 "/usr/include/pwd.h" 3 4
extern void setpwent (void);





extern void endpwent (void);





extern struct passwd *getpwent (void);
# 95 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent (FILE *__stream);







extern int putpwent (__const struct passwd *__restrict __p,
       FILE *__restrict __f);






extern struct passwd *getpwuid (__uid_t __uid);





extern struct passwd *getpwnam (__const char *__name);
# 140 "/usr/include/pwd.h" 3 4
extern int getpwent_r (struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result);


extern int getpwuid_r (__uid_t __uid,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result);

extern int getpwnam_r (__const char *__restrict __name,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result);
# 164 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r (FILE *__restrict __stream,
   struct passwd *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct passwd **__restrict __result);
# 181 "/usr/include/pwd.h" 3 4
extern int getpw (__uid_t __uid, char *__buffer);


}
# 31 "/usr/local/include/ace/os_include/os_pwd.h" 2 3




extern "C"
{
# 54 "/usr/local/include/ace/os_include/os_pwd.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 58 "/usr/local/include/ace/os_include/os_pwd.h" 2 3
# 29 "/usr/local/include/ace/OS_NS_pwd.h" 2 3







struct passwd;



namespace ACE_OS
{




  extern inline
  void endpwent (void);

  extern inline
  struct passwd *getpwent (void);

  extern inline
  struct passwd *getpwnam (const char *user);

  extern inline
  struct passwd *getpwnam_r (const char *name,
                             struct passwd *pwent,
                             char *buffer,
                             int buflen);
  extern inline
  void setpwent (void);


}








# 1 "/usr/local/include/ace/OS_NS_pwd.inl" 1 3










inline void
ACE_OS::endpwent (void)
{

  ::endpwent ();

}

inline struct passwd *
ACE_OS::getpwent (void)
{

  return ::getpwent ();



}

inline struct passwd *
ACE_OS::getpwnam (const char *name)
{

  return ::getpwnam (name);




}

inline struct passwd *
ACE_OS::getpwnam_r (const char *name, struct passwd *pwent,
                    char *buffer, int buflen)
{

  struct passwd *result = 0;

  int const status = ::getpwnam_r (name, pwent, buffer, buflen, &result);

  if (status != 0)
  {
    (*__errno_location ()) = status;
    result = 0;
  }
  return result;
# 110 "/usr/local/include/ace/OS_NS_pwd.inl" 3
}

inline void
ACE_OS::setpwent (void)
{

  ::setpwent ();

}


# 74 "/usr/local/include/ace/OS_NS_pwd.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 77 "/usr/local/include/ace/OS_NS_pwd.h" 2 3
# 11 "/usr/local/include/ace/OS_NS_stdio.inl" 2 3

# 1 "/usr/local/include/ace/OS_NS_sys_stat.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_sys_stat.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_sys_stat.h" 2 3
# 37 "/usr/local/include/ace/OS_NS_sys_stat.h" 3

# 74 "/usr/local/include/ace/OS_NS_sys_stat.h" 3
typedef struct stat ACE_stat;





namespace ACE_OS
{

  extern inline
  ACE_HANDLE creat (const ACE_TCHAR *filename,
                    mode_t mode);




  extern inline
  ACE_OFF_T filesize (ACE_HANDLE handle);

  extern inline
  ACE_OFF_T filesize (const ACE_TCHAR *handle);


  extern inline
  int fstat (ACE_HANDLE,
             ACE_stat *);

  extern inline
  int lstat (const char *,
             ACE_stat *);


  extern inline
  int lstat (const wchar_t *,
             ACE_stat *);


  extern inline
  int mkdir (const char *path,
             mode_t mode = 0755);


  extern inline
  int mkdir (const wchar_t *path,
             mode_t mode = 0755);


  extern inline
  int mkfifo (const ACE_TCHAR *file,
              mode_t mode = 0644);

  extern inline
  int stat (const char *file, ACE_stat *);


  extern inline
  int stat (const wchar_t *file, ACE_stat *);


  extern inline
  mode_t umask (mode_t cmask);

}








# 1 "/usr/local/include/ace/OS_NS_sys_stat.inl" 1 3
# 10 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3


namespace ACE_OS
{

  inline ACE_HANDLE
  creat (const ACE_TCHAR *filename, mode_t mode)
  {
    ;



    do return (ACE_HANDLE) (::creat (filename, mode)); while (0);


  }

  inline int
  fstat (ACE_HANDLE handle, ACE_stat *stp)
  {
    ;
# 68 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3
    do return (int) (::fstat (handle, stp)); while (0);

  }




  inline ACE_OFF_T
  filesize (ACE_HANDLE handle)
  {
    ;
# 94 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3
    ACE_stat sb;
    return ACE_OS::fstat (handle, &sb) == -1 ?
                    static_cast<ACE_OFF_T> (-1) : sb.st_size;

  }

  inline ACE_OFF_T
  filesize (const ACE_TCHAR *filename)
  {
    ;

    ACE_HANDLE const h = ACE_OS::open (filename, 00);
    if (h != -1)
      {
        ACE_OFF_T size = ACE_OS::filesize (h);
        ACE_OS::close (h);
        return size;
      }
    else
      return -1;
  }

  inline int
  lstat (const char *file, ACE_stat *stp)
  {
    ;







    do return (int) (::lstat (file, stp)); while (0);

  }


  inline int
  lstat (const wchar_t *file, ACE_stat *stp)
  {
    ;



    return ACE_OS::lstat (ACE_Wide_To_Ascii (file).char_rep (), stp);

  }


  inline int
  mkdir (const char *path, mode_t mode)
  {
# 156 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3
    do return (int) (::mkdir (path, mode)); while (0);

  }



  inline int
  mkdir (const wchar_t *path, mode_t mode)
  {
# 174 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3
    return ACE_OS::mkdir (ACE_Wide_To_Ascii (path).char_rep (), mode);

  }



  inline int
  mkfifo (const ACE_TCHAR *file, mode_t mode)
  {
    ;





    do return (int) (::mkfifo (file, mode)); while (0);

  }

  inline int
  stat (const char *file, ACE_stat *stp)
  {
    ;
# 229 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3
    do return (int) (::stat (file, stp)); while (0);

  }


  inline int
  stat (const wchar_t *file, ACE_stat *stp)
  {
    ;
# 268 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3
    ACE_Wide_To_Ascii nfile (file);
    return ACE_OS::stat (nfile.char_rep (), stp);

  }


  inline mode_t
  umask (mode_t cmask)
  {
    ;
# 289 "/usr/local/include/ace/OS_NS_sys_stat.inl" 3
    return ::umask (cmask);

  }

}


# 146 "/usr/local/include/ace/OS_NS_sys_stat.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 149 "/usr/local/include/ace/OS_NS_sys_stat.h" 2 3
# 13 "/usr/local/include/ace/OS_NS_stdio.inl" 2 3
# 21 "/usr/local/include/ace/OS_NS_stdio.inl" 3

# 89 "/usr/local/include/ace/OS_NS_stdio.inl" 3
inline int
ACE_OS::flock_init (ACE_OS::ace_flock_t *lock,
                    int flags,
                    const ACE_TCHAR *name,
                    mode_t perms)
{
  ;







  lock->handle_ = -1;
  lock->lockname_ = 0;

  if (name != 0)
    {
      do lock->handle_ = (ACE_HANDLE) (ACE_OS::open (name, flags, perms)); while (0);



      if (lock->handle_ != -1)
        lock->lockname_ = ACE_OS::strdup (name);
      return lock->handle_ == -1 ? -1 : 0;
    }
  else
    return 0;
}

inline int
ACE_OS::flock_unlock (ACE_OS::ace_flock_t *lock,
                      short whence,
                      ACE_OFF_T start,
                      ACE_OFF_T len)
{
  ;
# 145 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  lock->lock_.l_whence = whence;
  lock->lock_.l_start = start;
  lock->lock_.l_len = len;
  lock->lock_.l_type = 2;


  do return (int) (ACE_OS::fcntl (lock->handle_, 6, reinterpret_cast<long> (&lock->lock_))); while (0);



}

inline int
ACE_OS::flock_destroy (ACE_OS::ace_flock_t *lock,
                       int unlink_file)
{
  ;
  if (lock->handle_ != -1)
    {
      ACE_OS::flock_unlock (lock);

      ACE_OS::close (lock->handle_);
      lock->handle_ = -1;
      if (lock->lockname_ != 0)
        {
          if (unlink_file)
            ACE_OS::unlink (lock->lockname_);
          ACE_OS::free (
            static_cast<void *> (const_cast<ACE_TCHAR *> (lock->lockname_)));
        }
      lock->lockname_ = 0;
    }
  return 0;
}

inline int
ACE_OS::flock_rdlock (ACE_OS::ace_flock_t *lock,
                      short whence,
                      ACE_OFF_T start,
                      ACE_OFF_T len)
{
  ;
# 205 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  lock->lock_.l_whence = whence;
  lock->lock_.l_start = start;
  lock->lock_.l_len = len;
  lock->lock_.l_type = 0;

  do return (int) (ACE_OS::fcntl (lock->handle_, 7, reinterpret_cast<long> (&lock->lock_))); while (0);



}

inline int
ACE_OS::flock_tryrdlock (ACE_OS::ace_flock_t *lock,
                         short whence,
                         ACE_OFF_T start,
                         ACE_OFF_T len)
{
  ;
# 242 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  lock->lock_.l_whence = whence;
  lock->lock_.l_start = start;
  lock->lock_.l_len = len;
  lock->lock_.l_type = 0;

  int result = 0;

  do result = (int) (ACE_OS::fcntl (lock->handle_, 6, reinterpret_cast<long> (&lock->lock_))); while (0);



  if (result == -1 && ((*__errno_location ()) == 13 || (*__errno_location ()) == 11))
    (*__errno_location ()) = 16;

  return result;

}

inline int
ACE_OS::flock_trywrlock (ACE_OS::ace_flock_t *lock,
                         short whence,
                         ACE_OFF_T start,
                         ACE_OFF_T len)
{
  ;
# 286 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  lock->lock_.l_whence = whence;
  lock->lock_.l_start = start;
  lock->lock_.l_len = len;
  lock->lock_.l_type = 1;

  int result = 0;

  do result = (int) (ACE_OS::fcntl (lock->handle_, 6, reinterpret_cast<long> (&lock->lock_))); while (0);




  if (result == -1 && ((*__errno_location ()) == 13 || (*__errno_location ()) == 11))
    (*__errno_location ()) = 16;

  return result;

}

inline int
ACE_OS::flock_wrlock (ACE_OS::ace_flock_t *lock,
                      short whence,
                      ACE_OFF_T start,
                      ACE_OFF_T len)
{
  ;
# 331 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  lock->lock_.l_whence = whence;
  lock->lock_.l_start = start;
  lock->lock_.l_len = len;
  lock->lock_.l_type = 1;

  do return (int) (ACE_OS::fcntl (lock->handle_, 7, reinterpret_cast<long> (&lock->lock_))); while (0);



}


inline void
ACE_OS::clearerr (FILE* fp)
{
  ace_clearerr_helper (fp);
}



inline char *
ACE_OS::cuserid (char *user, size_t maxlen)
{
  ;
# 387 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  if (maxlen == 0)
    {

      (*__errno_location ()) = 22;
      return 0;
    }

  struct passwd *pw = 0;


  ACE_OS::setpwent ();




  pw = ::getpwuid (ACE_OS::geteuid ());


  ACE_OS::endpwent ();

  if (pw == 0)
    {
      (*__errno_location ()) = 2;
      return 0;
    }

  size_t max_length = 0;
  char *userid = 0;

  if (user == 0)
    {




      const size_t ACE_L_cuserid = 9;




      static char tmp[ACE_L_cuserid] = { '\0' };
      max_length = ACE_L_cuserid - 1;

      userid = tmp;
    }
  else
    {
      max_length = maxlen;
      userid = user;
    }


  if (ACE_OS::strlen (pw->pw_name) <= max_length)
    {
      return ACE_OS::strcpy (userid, pw->pw_name);
    }
  else
    {
      (*__errno_location ()) = 28;
      return 0;
    }





}


inline wchar_t *
ACE_OS::cuserid (wchar_t *user, size_t maxlen)
{
# 470 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  char *char_user;
  wchar_t *result = 0;

  do { char_user = new (::std::nothrow) char[maxlen + 1]; if (char_user == 0) { (*__errno_location ()) = 12; return 0; } } while (0);

  if (ACE_OS::cuserid (char_user, maxlen))
    {
      ACE_OS::strcpy (user, ACE_Ascii_To_Wide (char_user).wchar_rep ());
      result = user;
    }

  delete [] char_user;

  return result;

}



inline int
ACE_OS::fclose (FILE *fp)
{
  ;
  do return (int) (::fclose (fp)); while (0);
}

inline FILE *
ACE_OS::fdopen (ACE_HANDLE handle, const ACE_TCHAR *mode)
{
  ;
# 538 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  do return (FILE *) (::fdopen (handle, mode)); while (0);


}

inline int
ACE_OS::fflush (FILE *fp)
{
  ;
  do return (int) (::fflush (fp)); while (0);
}

inline int
ACE_OS::fgetc (FILE* fp)
{
  return ace_fgetc_helper (fp);
}

inline int
ACE_OS::getc (FILE* fp)
{
  return ace_getc_helper (fp);
}

inline int
ACE_OS::fgetpos (FILE* fp, fpos_t* pos)
{
  do return (int) (::fgetpos (fp, pos)); while (0);
}

inline char *
ACE_OS::fgets (char *buf, int size, FILE *fp)
{
  ;
  do return (char *) (::fgets (buf, size, fp)); while (0);
}


inline wchar_t *
ACE_OS::fgets (wchar_t *buf, int size, FILE *fp)
{
  ;
  do return (wchar_t *) (::fgetws (buf, size, fp)); while (0);
}


inline ACE_HANDLE
ACE_OS::fileno (FILE *stream)
{



  return ace_fileno_helper (stream);

}



inline FILE *
ACE_OS::fopen (const char *filename, const char *mode)
{
  ;
  do return (FILE *) (::fopen (filename, mode)); while (0);
}



inline FILE *
ACE_OS::fopen (const char *filename, const wchar_t *mode)
{
  ;
  ACE_Wide_To_Ascii n_mode (mode);
  do return (FILE *) (::fopen (filename, n_mode.char_rep ())); while (0);
}


inline FILE *
ACE_OS::fopen (const wchar_t *filename, const wchar_t *mode)
{
  ;




  ACE_Wide_To_Ascii n_filename (filename);
  ACE_Wide_To_Ascii n_mode (mode);
  do return (FILE*) (::fopen (n_filename.char_rep (), n_mode.char_rep ())); while (0);


}

inline FILE *
ACE_OS::fopen (const wchar_t *filename, const char *mode)
{
  ;






  ACE_Wide_To_Ascii n_filename (filename);
  do return (FILE*) (::fopen (n_filename.char_rep (), mode)); while (0);


}




inline int
ACE_OS::ungetc (int c, FILE *fp)
{
  return ace_ungetc_helper (c, fp);
}

inline int
ACE_OS::fputc (int c, FILE *fp)
{
  return ace_fputc_helper (c, fp);
}

inline int
ACE_OS::putc (int c, FILE *fp)
{
  return ace_putc_helper (c, fp);
}

inline int
ACE_OS::fputs (const char *s, FILE *stream)
{
  ;
  do return (int) (::fputs (s, stream)); while (0);
}


inline int
ACE_OS::fputs (const wchar_t *s, FILE *stream)
{
  ;
  do return (int) (::fputws (s, stream)); while (0);
}


inline size_t
ACE_OS::fread (void *ptr, size_t size, size_t nelems, FILE *fp)
{
  ;
  do return (size_t) (::fread (ptr, size, nelems, fp)); while (0);


}

inline FILE *
ACE_OS::freopen (const ACE_TCHAR *filename, const ACE_TCHAR *mode, FILE* stream)
{
  ;






  do return (FILE *) (::freopen (filename, mode, stream)); while (0);





}

inline int
ACE_OS::fseek (FILE *fp, long offset, int whence)
{
# 732 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  do return (int) (::fseek (fp, offset, whence)); while (0);
}

inline int
ACE_OS::fsetpos (FILE* fp, fpos_t* pos)
{
  do return (int) (::fsetpos (fp, pos)); while (0);
}

inline long
ACE_OS::ftell (FILE* fp)
{
  do return (long) (::ftell (fp)); while (0);
}

inline size_t
ACE_OS::fwrite (const void *ptr, size_t size, size_t nitems, FILE *fp)
{
  ;
  do return (size_t) (::fwrite (ptr, size, nitems, fp)); while (0);


}

inline void
ACE_OS::perror (const char *s)
{
  ;



  ::perror (s);

}


inline void
ACE_OS::perror (const wchar_t *s)
{
  ;





  ACE_Wide_To_Ascii n_s (s);
  ::perror (n_s.char_rep ());

}


inline int
ACE_OS::puts (const char *s)
{
  ;
  do return (int) (::puts (s)); while (0);
}


inline int
ACE_OS::puts (const wchar_t *s)
{
  ;




  ACE_Wide_To_Ascii n_s (s);
  do return (int) (::puts (n_s.char_rep ())); while (0);

}


inline int
ACE_OS::rename (const char *old_name,
                const char *new_name,
                int flags)
{
# 833 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  (void) (flags);
  do return (int) (::rename (old_name, new_name)); while (0);

}


inline int
ACE_OS::rename (const wchar_t *old_name,
                const wchar_t *new_name,
                int flags)
{
# 868 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  ACE_Wide_To_Ascii nold_name (old_name);
  ACE_Wide_To_Ascii nnew_name (new_name);
  return ACE_OS::rename (nold_name.char_rep (), nnew_name.char_rep (), flags);

}


inline void
ACE_OS::rewind (FILE *fp)
{

  ;
  ::rewind (fp);





}

inline char *
ACE_OS::tempnam (const char *dir, const char *pfx)
{
  ;







  do return (char *) (::tempnam (dir, pfx)); while (0);

}


inline wchar_t *
ACE_OS::tempnam (const wchar_t *dir, const wchar_t *pfx)
{
  ;
# 920 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  char *ndir = ACE_Wide_To_Ascii (dir).char_rep ();
  char *npfx = ACE_Wide_To_Ascii (pfx).char_rep ();
  char *name = ACE_OS::tempnam (ndir, npfx);


  wchar_t *wname = 0;
  if (name != 0)
    {
      size_t namelen = ACE_OS::strlen (name) + 1;
      wname = reinterpret_cast<wchar_t *>
        (ACE_OS::malloc (namelen * sizeof (wchar_t)));
      if (wname != 0)
        ACE_OS::strcpy (wname, ACE_Ascii_To_Wide (name).wchar_rep ());
      ACE_OS::free (name);
    }
  return wname;

}


inline int
ACE_OS::vasprintf (char **bufp, const char* format, va_list argptr)
{

  return ::vasprintf (bufp, format, argptr);



}


inline int
ACE_OS::vasprintf (wchar_t **bufp, const wchar_t* format, va_list argptr)
{



  return ACE_OS::vaswprintf_emulation (bufp, format, argptr);

}


inline int
ACE_OS::vprintf (const char *format, va_list argptr)
{
  return ::vprintf (format, argptr);
}


inline int
ACE_OS::vprintf (const wchar_t *format, va_list argptr)
{



  (void) (format);
  (void) (argptr);
  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}


inline int
ACE_OS::vfprintf (FILE *fp, const char *format, va_list argptr)
{
  return ::vfprintf (fp, format, argptr);
}


inline int
ACE_OS::vfprintf (FILE *fp, const wchar_t *format, va_list argptr)
{

  return ::vfwprintf (fp, format, argptr);






}


inline int
ACE_OS::vsprintf (char *buffer, const char *format, va_list argptr)
{
  return ::vsprintf (buffer, format, argptr);
}


inline int
ACE_OS::vsprintf (wchar_t *buffer, const wchar_t *format, va_list argptr)
{
# 1027 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  return vswprintf (buffer, 4096, format, argptr);
# 1042 "/usr/local/include/ace/OS_NS_stdio.inl" 3
}


inline int
ACE_OS::vsnprintf (char *buffer, size_t maxlen, const char *format, va_list ap)
{

  int result;






  result = ::vsnprintf (buffer, maxlen, format, ap);
# 1073 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  if (result == -1)
    {
      result = static_cast <int> (maxlen + 1);
    }

  return result;
# 1088 "/usr/local/include/ace/OS_NS_stdio.inl" 3
}


inline int
ACE_OS::vsnprintf (wchar_t *buffer, size_t maxlen, const wchar_t *format, va_list ap)
{






  int result;
# 1116 "/usr/local/include/ace/OS_NS_stdio.inl" 3
  result = vswprintf (buffer, maxlen, format, ap);







  if (result == -1)
    result = static_cast <int> (maxlen + 1);

  return result;
# 1138 "/usr/local/include/ace/OS_NS_stdio.inl" 3
}
# 1213 "/usr/local/include/ace/OS_NS_stdio.inl" 3

# 554 "/usr/local/include/ace/OS_NS_stdio.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 557 "/usr/local/include/ace/OS_NS_stdio.h" 2 3
# 8 "/usr/local/include/ace/OS_NS_sys_mman.inl" 2 3







typedef void *ACE_MMAP_TYPE;




inline int
ACE_OS::madvise (caddr_t addr, size_t len, int map_advice)
{
  ;

  do return (int) (::madvise (addr, len, map_advice)); while (0);






}

inline void *
ACE_OS::mmap (void *addr,
              size_t len,
              int prot,
              int flags,
              ACE_HANDLE file_handle,
              ACE_OFF_T off,
              ACE_HANDLE *file_mapping,
              int sa,
              const ACE_TCHAR *file_mapping_name)
{
  ;

  (void) (file_mapping_name);
# 147 "/usr/local/include/ace/OS_NS_sys_mman.inl" 3
  (void) (sa);




  (void) (file_mapping);






  do return (void *) ((void *) ::mmap ((ACE_MMAP_TYPE) addr, len, prot, flags, file_handle, off)); while (0);
# 178 "/usr/local/include/ace/OS_NS_sys_mman.inl" 3
}






inline int
ACE_OS::mprotect (void *addr, size_t len, int prot)
{
  ;




  do return (int) (::mprotect ((ACE_MMAP_TYPE) addr, len, prot)); while (0);






}

inline int
ACE_OS::msync (void *addr, size_t len, int sync)
{
  ;





  do return (int) (::msync ((ACE_MMAP_TYPE) addr, len, sync)); while (0);






}

inline int
ACE_OS::munmap (void *addr, size_t len)
{
  ;





  do return (int) (::munmap ((ACE_MMAP_TYPE) addr, len)); while (0);





}

inline ACE_HANDLE
ACE_OS::shm_open (const ACE_TCHAR *filename,
                  int mode,
                  mode_t perms,
                  int sa)
{
  ;

  (void) (sa);
# 262 "/usr/local/include/ace/OS_NS_sys_mman.inl" 3
  do return (ACE_HANDLE) (::shm_open (filename, mode, perms)); while (0);
# 271 "/usr/local/include/ace/OS_NS_sys_mman.inl" 3
}

inline int
ACE_OS::shm_unlink (const ACE_TCHAR *path)
{
  ;
# 294 "/usr/local/include/ace/OS_NS_sys_mman.inl" 3
  do return (int) (::shm_unlink (path)); while (0);




}


# 94 "/usr/local/include/ace/OS_NS_sys_mman.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 97 "/usr/local/include/ace/OS_NS_sys_mman.h" 2 3
# 9 "/usr/local/include/ace/OS_NS_Thread.inl" 2 3
# 1 "/usr/local/include/ace/OS_NS_sys_time.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_sys_time.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_sys_time.h" 2 3
# 36 "/usr/local/include/ace/OS_NS_sys_time.h" 3


namespace ACE_OS
{
  extern inline
  ACE_Time_Value gettimeofday (void);
}








# 1 "/usr/local/include/ace/OS_NS_sys_time.inl" 1 3
# 12 "/usr/local/include/ace/OS_NS_sys_time.inl" 3


inline ACE_Time_Value
ACE_OS::gettimeofday (void)
{



  timeval tv;
  int result = 0;
# 53 "/usr/local/include/ace/OS_NS_sys_time.inl" 3
  do result = (int) (::gettimeofday (&tv, 0)); while (0);
# 68 "/usr/local/include/ace/OS_NS_sys_time.inl" 3
  if (result == -1)
    return ACE_Time_Value ((time_t)-1);
  else
    return ACE_Time_Value (tv);

}


# 52 "/usr/local/include/ace/OS_NS_sys_time.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 55 "/usr/local/include/ace/OS_NS_sys_time.h" 2 3
# 10 "/usr/local/include/ace/OS_NS_Thread.inl" 2 3
# 26 "/usr/local/include/ace/OS_NS_Thread.inl" 3

# 107 "/usr/local/include/ace/OS_NS_Thread.inl" 3
inline int
ACE_OS::thr_equal (ACE_thread_t t1, ACE_thread_t t2)
{





  return pthread_equal (t1, t2);






}

inline int
ACE_OS::condattr_destroy (ACE_condattr_t &attributes)
{


  pthread_condattr_destroy (&attributes);



  return 0;




}

inline int
ACE_OS::condattr_init (ACE_condattr_t &attributes, int type)
{
  (void) (type);


  int result = -1;
# 155 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  if (
      ((result = (pthread_condattr_init (&attributes))) != 0 ? ((*__errno_location ()) = result, -1) : 0) == 0

      && ((result = (pthread_condattr_setpshared (&attributes, type))) != 0 ? ((*__errno_location ()) = result, -1) : 0) == 0


      )
     result = 0;
  else
     result = -1;

  return result;
# 177 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}







inline int
ACE_OS::cond_broadcast (ACE_cond_t *cv)
{
  ;


  int result;
  do return (int) (((result = (pthread_cond_broadcast (cv))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 208 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::cond_destroy (ACE_cond_t *cv)
{
  ;


  int result;
  do return (int) (((result = (pthread_cond_destroy (cv))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 229 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::cond_init (ACE_cond_t *cv,
                   ACE_condattr_t &attributes,
                   const char *name,
                   void *arg)
{

  (void) (name);
  (void) (arg);


  int result = -1;
# 254 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  if (((result = (pthread_cond_init (cv, &attributes))) != 0 ? ((*__errno_location ()) = result, -1) : 0) == 0)
     result = 0;
  else
     result = -1;

  return result;
# 278 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}


inline int
ACE_OS::cond_init (ACE_cond_t *cv,
                   ACE_condattr_t &attributes,
                   const wchar_t *name,
                   void *arg)
{
  return ACE_OS::cond_init (cv, attributes, ACE_Wide_To_Ascii (name).char_rep (), arg);
}



inline int
ACE_OS::cond_init (ACE_cond_t *cv, short type, const wchar_t *name, void *arg)
{
  return ACE_OS::cond_init (cv, type, ACE_Wide_To_Ascii (name).char_rep (), arg);
}


inline int
ACE_OS::cond_signal (ACE_cond_t *cv)
{
  ;


  int result;
  do return (int) (((result = (pthread_cond_signal (cv))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 319 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::cond_wait (ACE_cond_t *cv,
                   ACE_mutex_t *external_mutex)
{
  ;


  int result;
  do return (int) (((result = (pthread_cond_wait (cv, external_mutex))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 345 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::cond_timedwait (ACE_cond_t *cv,
                        ACE_mutex_t *external_mutex,
                        ACE_Time_Value *timeout)
{
  ;

  int result = 0;
  timespec_t ts;

  if (timeout != 0)
    ts = *timeout;



  do result = (int) (((result = (timeout == 0 ? pthread_cond_wait (cv, external_mutex) : pthread_cond_timedwait (cv, external_mutex, (ACE_TIMESPEC_PTR) &ts))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);







  if (result == -1 &&
      ((*__errno_location ()) == 110 || (*__errno_location ()) == 11))
    (*__errno_location ()) = 62;
# 399 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  if (timeout != 0)
    timeout->set (ts);

  return result;






}


inline int
ACE_OS::mutex_lock (ACE_mutex_t *m,
                    const ACE_Time_Value *timeout)
{
  return timeout == 0 ? ACE_OS::mutex_lock (m) : ACE_OS::mutex_lock (m, *timeout);
}


inline int
ACE_OS::event_init (ACE_event_t *event,
                    int manual_reset,
                    int initial_state,
                    int type,
                    const wchar_t *name,
                    void *arg,
                    int sa)
{
# 446 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return ACE_OS::event_init (event,
                             manual_reset,
                             initial_state,
                             type,
                             ACE_Wide_To_Ascii (name).char_rep (),
                             arg,
                             sa);

}


inline long
ACE_OS::priority_control (ACE_idtype_t idtype, ACE_id_t identifier, int cmd, void *arg)
{
  ;




  (void) (idtype);
  (void) (identifier);
  (void) (cmd);
  (void) (arg);
  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}







inline int
ACE_OS::recursive_mutex_cond_unlock (ACE_recursive_thread_mutex_t *m,
                                     ACE_recursive_mutex_state &state)
{

  ;
# 534 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  if (ACE_OS::thread_mutex_lock (&m->nesting_mutex_) == -1)
    return -1;


  if (m->nesting_level_ == 0
      || ACE_OS::thr_equal (ACE_OS::thr_self (), m->owner_id_) == 0)
    {
      ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);
      (*__errno_location ()) = 22;
      return -1;
    }





  if (ACE_OS::cond_signal (&m->lock_available_) == -1)
    {

      ACE_Errno_Guard error ((*__errno_location ()));
      ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);
      return -1;
    }





  state.nesting_level_ = m->nesting_level_;
  state.owner_id_ = m->owner_id_;
  m->nesting_level_ = 0;
  m->owner_id_ = ACE_OS::NULL_thread;
  return 0;






}






inline void
ACE_OS::recursive_mutex_cond_relock (ACE_recursive_thread_mutex_t *m,
                                     ACE_recursive_mutex_state &state)
{

  ;
# 613 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  while (m->nesting_level_ > 0)
    ACE_OS::cond_wait (&m->lock_available_, &m->nesting_mutex_);


  m->nesting_level_ = state.nesting_level_;
  m->owner_id_ = state.owner_id_;
  ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);
  return;






}

inline int
ACE_OS::recursive_mutex_destroy (ACE_recursive_thread_mutex_t *m)
{




  if (ACE_OS::thread_mutex_destroy (&m->nesting_mutex_) == -1)
    return -1;
  else if (ACE_OS::cond_destroy (&m->lock_available_) == -1)
    return -1;
  else
    return 0;





}

inline int
ACE_OS::recursive_mutex_init (ACE_recursive_thread_mutex_t *m,
                              const ACE_TCHAR *name,
                              ACE_mutexattr_t *arg,
                              int sa)
{
  (void) (sa);
# 664 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  if (ACE_OS::thread_mutex_init (&m->nesting_mutex_, 0, name, arg) == -1)
    return -1;
  else if (ACE_OS::cond_init (&m->lock_available_,
                              (short) PTHREAD_PROCESS_PRIVATE,
                              name,
                              0) == -1)
    return -1;
  else
    {
      m->nesting_level_ = 0;
      m->owner_id_ = ACE_OS::NULL_thread;
      return 0;
    }







}

inline int
ACE_OS::recursive_mutex_lock (ACE_recursive_thread_mutex_t *m)
{




  ACE_thread_t const t_id = ACE_OS::thr_self ();
  int result = 0;


  if (ACE_OS::thread_mutex_lock (&m->nesting_mutex_) == -1)
    result = -1;
  else
  {


    if (m->nesting_level_ == 0)
      m->owner_id_ = t_id;


    else if (ACE_OS::thr_equal (t_id, m->owner_id_) == 0)
    {


      while (m->nesting_level_ > 0)
        ACE_OS::cond_wait (&m->lock_available_,
                            &m->nesting_mutex_);


      m->owner_id_ = t_id;
    }



    ++m->nesting_level_;
  }

  {

    ACE_Errno_Guard error ((*__errno_location ()));
    ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);
  }
  return result;





}

inline int
ACE_OS::recursive_mutex_lock (ACE_recursive_thread_mutex_t *m,
                              const ACE_Time_Value &timeout)
{




  ACE_thread_t t_id = ACE_OS::thr_self ();
  int result = 0;


  if (ACE_OS::thread_mutex_lock (&m->nesting_mutex_, timeout) == -1)
    result = -1;
  else
    {


      if (m->nesting_level_ == 0)
        m->owner_id_ = t_id;


      else if (ACE_OS::thr_equal (t_id, m->owner_id_) == 0)
        {


          while (m->nesting_level_ > 0)
            {
              result = ACE_OS::cond_timedwait (&m->lock_available_,
                                               &m->nesting_mutex_,
                                               const_cast <ACE_Time_Value *> (&timeout));



              if (result == -1)
                {

                  ACE_Errno_Guard error ((*__errno_location ()));
                  ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);

                  return result;
                }
            }


          m->owner_id_ = t_id;
        }



      m->nesting_level_++;


      ACE_Errno_Guard error ((*__errno_location ()));
      ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);
    }
  return result;






}

inline int
ACE_OS::recursive_mutex_lock (ACE_recursive_thread_mutex_t *m,
                              const ACE_Time_Value *timeout)
{
  return timeout == 0
    ? ACE_OS::recursive_mutex_lock (m)
    : ACE_OS::recursive_mutex_lock (m, *timeout);
}

inline int
ACE_OS::recursive_mutex_trylock (ACE_recursive_thread_mutex_t *m)
{




  ACE_thread_t t_id = ACE_OS::thr_self ();
  int result = 0;


  if (ACE_OS::thread_mutex_lock (&m->nesting_mutex_) == -1)
    result = -1;
  else
  {

    if (m->nesting_level_ == 0)
    {
      m->owner_id_ = t_id;
      m->nesting_level_ = 1;
    }


    else if (ACE_OS::thr_equal (t_id, m->owner_id_))
      m->nesting_level_++;
    else
    {
      (*__errno_location ()) = 16;
      result = -1;
    }
  }

  {

    ACE_Errno_Guard error ((*__errno_location ()));
    ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);
  }
  return result;





}

inline int
ACE_OS::recursive_mutex_unlock (ACE_recursive_thread_mutex_t *m)
{




  ;

  ACE_thread_t t_id = ACE_OS::thr_self ();

  int result = 0;

  if (ACE_OS::thread_mutex_lock (&m->nesting_mutex_) == -1)
    result = -1;
  else
  {

      if (m->nesting_level_ == 0
          || ACE_OS::thr_equal (t_id, m->owner_id_) == 0)
{
  (*__errno_location ()) = 22;
  result = -1;
}
      else

{
  m->nesting_level_--;
  if (m->nesting_level_ == 0)
  {


    m->owner_id_ = ACE_OS::NULL_thread;


    if (ACE_OS::cond_signal (&m->lock_available_) == -1)
      result = -1;
  }
}
  }

{

  ACE_Errno_Guard error ((*__errno_location ()));
  ACE_OS::thread_mutex_unlock (&m->nesting_mutex_);
}
  return result;





}

inline int
ACE_OS::rw_rdlock (ACE_rwlock_t *rw)
{
  ;



  int result;
  do return (int) (((result = (pthread_rwlock_rdlock (rw))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 959 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::rw_tryrdlock (ACE_rwlock_t *rw)
{
  ;



  int result;
  do return (int) (((result = (pthread_rwlock_tryrdlock (rw))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 1002 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::rw_trywrlock (ACE_rwlock_t *rw)
{
  ;



  int result;
  do return (int) (((result = (pthread_rwlock_trywrlock (rw))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 1045 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}







inline int
ACE_OS::rw_trywrlock_upgrade (ACE_rwlock_t *rw)
{
  ;




  int result;
  do return (int) (((result = (pthread_rwlock_trywrlock (rw))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 1125 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::rw_unlock (ACE_rwlock_t *rw)
{
  ;



  int result;
  do return (int) (((result = (pthread_rwlock_unlock (rw))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 1184 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::rw_wrlock (ACE_rwlock_t *rw)
{
  ;



  int result;
  do return (int) (((result = (pthread_rwlock_wrlock (rw))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 1237 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::rwlock_destroy (ACE_rwlock_t *rw)
{
  ;



  int result;
  do return (int) (((result = (pthread_rwlock_destroy (rw))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 1264 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}



inline int
ACE_OS::rwlock_init (ACE_rwlock_t *rw,
                     int type,
                     const ACE_TCHAR *name,
                     void *arg)
{


  (void) (name);
  (void) (arg);

  int status;
  pthread_rwlockattr_t attr;
  pthread_rwlockattr_init (&attr);

  pthread_rwlockattr_setpshared (&attr, (type == PTHREAD_PROCESS_PRIVATE ?
                                         PTHREAD_PROCESS_PRIVATE :
                                         PTHREAD_PROCESS_SHARED));



  status = ((status = (pthread_rwlock_init (rw, &attr))) != 0 ? ((*__errno_location ()) = status, -1) : 0);
  pthread_rwlockattr_destroy (&attr);

  return status;







}


inline int
ACE_OS::sema_destroy (ACE_sema_t *s)
{
  ;

  int result;
# 1324 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  if (s->name_)
    {
      do result = (int) (::sem_unlink (s->name_)); while (0);
      ACE_OS::free ((void *) s->name_);
      do return (int) (::sem_close (s->sema_)); while (0);
    }

  else
    {
      do result = (int) (::sem_destroy (s->sema_)); while (0);



        delete s->sema_;
      s->sema_ = 0;
      return result;
    }
# 1379 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}




inline int
ACE_OS::sema_init (ACE_sema_t *s,
                   u_int count,
                   int type,
                   const char *name,
                   void *arg,
                   int max,
                   int sa)
{
  ;

  (void) (max);
  (void) (sa);

  s->name_ = 0;

  (void) (arg);
# 1475 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  if (name)
    {
# 1494 "/usr/local/include/ace/OS_NS_Thread.inl" 3
      do { s->name_ = ACE_OS::strdup (name); if (s->name_ == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      s->sema_ = ::sem_open (s->name_,
                             0100,
                             0644,
                             count);
      if (s->sema_ == (sem_t *) ((sem_t *) 0))
        return -1;
      else
        return 0;
    }

  else
    {
      do { s->sema_ = new (::std::nothrow) sem_t; if (s->sema_ == 0) { (*__errno_location ()) = 12; return -1; } } while (0);





      do return (int) (::sem_init (s->sema_, type != PTHREAD_PROCESS_PRIVATE, count)); while (0);


    }
# 1712 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}


inline int
ACE_OS::sema_init (ACE_sema_t *s,
                   u_int count,
                   int type,
                   const wchar_t *name,
                   void *arg,
                   int max,
                   int sa)
{
# 1783 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return ACE_OS::sema_init (s, count, type, ACE_Wide_To_Ascii (name).char_rep (), arg, max, sa);

}


inline int
ACE_OS::sema_post (ACE_sema_t *s)
{
  ;


  do return (int) (::sem_post (s->sema_)); while (0);
# 1862 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::sema_post (ACE_sema_t *s, u_int release_count)
{
# 1879 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  for (size_t i = 0; i < release_count; i++)
    if (ACE_OS::sema_post (s) == -1)
      return -1;

  return 0;

}

inline int
ACE_OS::sema_trywait (ACE_sema_t *s)
{
  ;


  do return (int) (::sem_trywait (s->sema_)); while (0);
# 2009 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::sema_wait (ACE_sema_t *s)
{
  ;

  do return (int) (::sem_wait (s->sema_)); while (0);
# 2118 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::sema_wait (ACE_sema_t *s, ACE_Time_Value &tv)
{
  ;


  int rc;
  timespec_t ts;
  ts = tv;
  do rc = (int) (::sem_timedwait (s->sema_, &ts)); while (0);
  if (rc == -1 && (*__errno_location ()) == 110)
    (*__errno_location ()) = 62;
  return rc;
# 2403 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::sema_wait (ACE_sema_t *s, ACE_Time_Value *tv)
{
  return tv == 0 ? ACE_OS::sema_wait (s) : ACE_OS::sema_wait (s, *tv);
}

inline int
ACE_OS::semctl (int int_id, int semnum, int cmd, semun value)
{
  ;

  do return (int) (::semctl (int_id, semnum, cmd, value)); while (0);
# 2425 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::semget (key_t key, int nsems, int flags)
{
  ;

  do return (int) (::semget (key, nsems, flags)); while (0);







}

inline int
ACE_OS::semop (int int_id, struct sembuf *sops, size_t nsops)
{
  ;

  do return (int) (::semop (int_id, sops, nsops)); while (0);







}

inline int
ACE_OS::sigtimedwait (const sigset_t *sset,
                      siginfo_t *info,
                      const ACE_Time_Value *timeout)
{
  ;

  timespec_t ts;
  timespec_t *tsp = 0;

  if (timeout != 0)
    {
      ts = *timeout;
      tsp = &ts;
    }

  do return (int) (::sigtimedwait (sset, info, tsp)); while (0);







}

inline int
ACE_OS::sigwait (sigset_t *sset, int *sig)
{
  ;
  int local_sig;
  if (sig == 0)
    sig = &local_sig;
# 2520 "/usr/local/include/ace/OS_NS_Thread.inl" 3
        (*__errno_location ()) = ::sigwait (sset, sig);
        return (*__errno_location ()) == 0 ? *sig : -1;
# 2539 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::sigwaitinfo (const sigset_t *sset,
                     siginfo_t *info)
{
  ;




  do return (int) (::sigwaitinfo (sset, info)); while (0);





}

inline int
ACE_OS::thr_cancel (ACE_thread_t thr_id)
{
  ;


  int result;
  do return (int) (((result = (pthread_cancel (thr_id))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 2578 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_cmp (ACE_hthread_t t1, ACE_hthread_t t2)
{





  return pthread_equal (t1, t2);






}

inline int
ACE_OS::thr_continue (ACE_hthread_t target_thread)
{
  ;
# 2622 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  (void) (target_thread);
  do { (*__errno_location ()) = 95 ; return -1; } while (0);
# 2638 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_getconcurrency (void)
{
  ;




  return pthread_getconcurrency ();






}

inline int
ACE_OS::thr_getprio (ACE_hthread_t ht_id, int &priority, int &policy)
{
  ;
  (void) (policy);




  struct sched_param param;
  int result;

  do result = (int) (((result = (pthread_getschedparam (ht_id, &policy, &param))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);


  priority = param.__sched_priority;
  return result;
# 2716 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_getprio (ACE_hthread_t ht_id, int &priority)
{
  ;
  int policy = 0;
  return ACE_OS::thr_getprio (ht_id, priority, policy);
}


inline int
ACE_OS::thr_getspecific_native (ACE_OS_thread_key_t key, void **data)
{


    *data = pthread_getspecific (key);
    return 0;
# 2751 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}


inline int
ACE_OS::thr_getspecific (ACE_thread_key_t key, void **data)
{
# 2772 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return ACE_OS::thr_getspecific_native (key, data);
# 2783 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}


inline int
ACE_OS::thr_join (ACE_hthread_t thr_handle,
                  ACE_THR_FUNC_RETURN *status)
{
  ;






  int result;
  do return (int) (((result = (pthread_join (thr_handle, status))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 2825 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_join (ACE_thread_t waiter_id,
                  ACE_thread_t *thr_id,
                  ACE_THR_FUNC_RETURN *status)
{
  ;






  (void) (thr_id);
  int result;
  do return (int) (((result = (pthread_join (waiter_id, status))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 2858 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}


inline int
ACE_OS::thr_kill (ACE_thread_t thr_id, int signum)
{
  ;







  int result;
  do return (int) (((result = (pthread_kill (thr_id, signum))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 2896 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline size_t
ACE_OS::thr_min_stack (void)
{
  ;
# 2912 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return (size_t) ACE_OS::sysconf (_SC_THREAD_STACK_MIN);
# 2936 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline ACE_thread_t
ACE_OS::thr_self (void)
{




  return pthread_self ();
# 2956 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline const char*
ACE_OS::thr_name (void)
{




  do { (*__errno_location ()) = 95 ; return 0; } while (0);




}

inline void
ACE_OS::thr_self (ACE_hthread_t &self)
{
  ;



  self = pthread_self ();
# 2992 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_setcancelstate (int new_state, int *old_state)
{
  ;


  int result;
  do return (int) (((result = (pthread_setcancelstate (new_state, old_state))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 3023 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_setcanceltype (int new_type, int *old_type)
{
  ;


  int result;
  do return (int) (((result = (pthread_setcanceltype (new_type, old_type))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 3046 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_setconcurrency (int hint)
{
  ;







  int result;
  do return (int) (((result = (pthread_setconcurrency (hint))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 3071 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_setprio (ACE_hthread_t ht_id, int priority, int policy)
{
  ;
  (void) (policy);




  int result;
  struct sched_param param;
  ACE_OS::memset ((void *) &param, 0, sizeof param);




  if (policy == -1)
    {
      do result = (int) (((result = (pthread_getschedparam (ht_id, &policy, &param))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);


      if (result == -1)
        return result;
    }

  param.__sched_priority = priority;

  do return (int) (((result = (pthread_setschedparam (ht_id, policy, &param))) != 0 ? ((*__errno_location ()) = result, -1) : 0)); while (0);
# 3135 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_sigsetmask (int how,
                        const sigset_t *nsm,
                        sigset_t *osm)
{
  ;



  (void) (osm);
  (void) (nsm);
  (void) (how);

  do { (*__errno_location ()) = 95 ; return -1; } while (0);
# 3221 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thr_suspend (ACE_hthread_t target_thread)
{
  ;
# 3243 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  (void) (target_thread);
  do { (*__errno_location ()) = 95 ; return -1; } while (0);
# 3259 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline void
ACE_OS::thr_testcancel (void)
{
  ;


  pthread_testcancel ();
# 3276 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline void
ACE_OS::thr_yield (void)
{
  ;


  ::sched_yield ();
# 3299 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}

inline int
ACE_OS::thread_mutex_destroy (ACE_thread_mutex_t *m)
{
  ;





  return ACE_OS::mutex_destroy (m);






}

inline int
ACE_OS::thread_mutex_init (ACE_thread_mutex_t *m,
                           int lock_type,
                           const char *name,
                           ACE_mutexattr_t *arg)
{
# 3345 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return ACE_OS::mutex_init (m, PTHREAD_PROCESS_PRIVATE, name, arg, 0, lock_type);
# 3359 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}


inline int
ACE_OS::thread_mutex_init (ACE_thread_mutex_t *m,
                           int lock_type,
                           const wchar_t *name,
                           ACE_mutexattr_t *arg)
{
# 3388 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return ACE_OS::mutex_init (m, PTHREAD_PROCESS_PRIVATE, name, arg, 0, lock_type);
# 3400 "/usr/local/include/ace/OS_NS_Thread.inl" 3
}


inline int
ACE_OS::thread_mutex_lock (ACE_thread_mutex_t *m)
{






  return ACE_OS::mutex_lock (m);





}

inline int
ACE_OS::thread_mutex_lock (ACE_thread_mutex_t *m,
                           const ACE_Time_Value &timeout)
{
# 3435 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return ACE_OS::mutex_lock (m, timeout);





}

inline int
ACE_OS::thread_mutex_lock (ACE_thread_mutex_t *m,
                           const ACE_Time_Value *timeout)
{
  return timeout == 0
    ? ACE_OS::thread_mutex_lock (m)
    : ACE_OS::thread_mutex_lock (m, *timeout);
}

inline int
ACE_OS::thread_mutex_trylock (ACE_thread_mutex_t *m)
{
  ;
# 3473 "/usr/local/include/ace/OS_NS_Thread.inl" 3
  return ACE_OS::mutex_trylock (m);






}

inline int
ACE_OS::thread_mutex_unlock (ACE_thread_mutex_t *m)
{
  ;





  return ACE_OS::mutex_unlock (m);





}
# 3510 "/usr/local/include/ace/OS_NS_Thread.inl" 3
inline
int
ACE_OS_Thread_Mutex_Guard::acquire (void)
{
  return owner_ = ACE_OS::thread_mutex_lock (&lock_);
}

inline
int
ACE_OS_Thread_Mutex_Guard::release (void)
{
  if (owner_ == -1)
    return 0;
  else
    {
      owner_ = -1;
      return ACE_OS::thread_mutex_unlock (&lock_);
    }
}

inline
ACE_OS_Thread_Mutex_Guard::ACE_OS_Thread_Mutex_Guard (ACE_thread_mutex_t &m)
  : lock_ (m), owner_ (-1)
{
  if (!ACE_OS_Object_Manager::starting_up ())
    acquire ();
}

inline
ACE_OS_Thread_Mutex_Guard::~ACE_OS_Thread_Mutex_Guard ()
{
  release ();
}



inline
int
ACE_OS_Recursive_Thread_Mutex_Guard::acquire (void)
{
  return owner_ = ACE_OS::recursive_mutex_lock (&lock_);
}

inline
int
ACE_OS_Recursive_Thread_Mutex_Guard::release (void)
{
  if (owner_ == -1)
    return 0;
  else
    {
      owner_ = -1;
      return ACE_OS::recursive_mutex_unlock (&lock_);
    }
}

inline
ACE_OS_Recursive_Thread_Mutex_Guard::ACE_OS_Recursive_Thread_Mutex_Guard (
  ACE_recursive_thread_mutex_t &m)
   : lock_ (m),
     owner_ (-1)
{
  if (!ACE_OS_Object_Manager::starting_up ())
    acquire ();
}

inline
ACE_OS_Recursive_Thread_Mutex_Guard::~ACE_OS_Recursive_Thread_Mutex_Guard ()
{
  release ();
}






inline
ACE_Thread_ID::ACE_Thread_ID (ACE_thread_t thread_id,
                              ACE_hthread_t thread_handle)
  : thread_id_ (thread_id),
    thread_handle_ (thread_handle)
{
}

inline
ACE_Thread_ID::ACE_Thread_ID (const ACE_Thread_ID &id)
  : thread_id_ (id.thread_id_),
    thread_handle_ (id.thread_handle_)
{
}

inline
ACE_Thread_ID::ACE_Thread_ID (void)
  : thread_id_ (ACE_OS::thr_self ())
{
  ACE_OS::thr_self (thread_handle_);
}

inline
ACE_thread_t
ACE_Thread_ID::id (void) const
{
  return this->thread_id_;
}

inline void
ACE_Thread_ID::id (ACE_thread_t thread_id)
{
  this->thread_id_ = thread_id;
}

inline ACE_hthread_t
ACE_Thread_ID::handle (void) const
{
  return this->thread_handle_;
}

inline void
ACE_Thread_ID::handle (ACE_hthread_t thread_handle)
{
  this->thread_handle_ = thread_handle;
}

inline bool
ACE_Thread_ID::operator== (const ACE_Thread_ID &rhs) const
{
  return
    ACE_OS::thr_cmp (this->thread_handle_, rhs.thread_handle_)
    && ACE_OS::thr_equal (this->thread_id_, rhs.thread_id_);
}

inline bool
ACE_Thread_ID::operator!= (const ACE_Thread_ID &rhs) const
{
  return !(*this == rhs);
}


# 2021 "/usr/local/include/ace/OS_NS_Thread.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 2024 "/usr/local/include/ace/OS_NS_Thread.h" 2 3
# 32 "/usr/local/include/ace/Thread_Mutex.h" 2 3


# 50 "/usr/local/include/ace/Thread_Mutex.h" 3
class ACE_Thread_Mutex
{
  friend class ACE_Condition_Thread_Mutex;
public:

  ACE_Thread_Mutex (const ACE_TCHAR *name = 0,
                    ACE_mutexattr_t *attributes = 0);


  ~ACE_Thread_Mutex (void);






  int remove (void);


  int acquire (void);
# 78 "/usr/local/include/ace/Thread_Mutex.h" 3
  int acquire (ACE_Time_Value &tv);
# 88 "/usr/local/include/ace/Thread_Mutex.h" 3
  int acquire (ACE_Time_Value *tv);






  int tryacquire (void);


  int release (void);






  int acquire_read (void);






  int acquire_write (void);
# 121 "/usr/local/include/ace/Thread_Mutex.h" 3
  int tryacquire_read (void);
# 130 "/usr/local/include/ace/Thread_Mutex.h" 3
  int tryacquire_write (void);







  int tryacquire_write_upgrade (void);


  const ACE_thread_mutex_t &lock (void) const;
  ACE_thread_mutex_t &lock (void);


  void dump (void) const;


  struct __Ace {};

protected:

  ACE_thread_mutex_t lock_;






  bool removed_;

private:

  void operator= (const ACE_Thread_Mutex &);
  ACE_Thread_Mutex (const ACE_Thread_Mutex &);
};




# 1 "/usr/local/include/ace/Thread_Mutex.inl" 1 3






inline const ACE_thread_mutex_t &
ACE_Thread_Mutex::lock (void) const
{

  return this->lock_;
}

inline ACE_thread_mutex_t &
ACE_Thread_Mutex::lock (void)
{

  return this->lock_;
}

inline int
ACE_Thread_Mutex::acquire_read (void)
{

  return ACE_OS::thread_mutex_lock (&this->lock_);
}

inline int
ACE_Thread_Mutex::acquire_write (void)
{

  return ACE_OS::thread_mutex_lock (&this->lock_);
}

inline int
ACE_Thread_Mutex::tryacquire_read (void)
{

  return ACE_OS::thread_mutex_trylock (&this->lock_);
}

inline int
ACE_Thread_Mutex::tryacquire_write (void)
{

  return ACE_OS::thread_mutex_trylock (&this->lock_);
}

inline int
ACE_Thread_Mutex::tryacquire_write_upgrade (void)
{

  return 0;
}

inline int
ACE_Thread_Mutex::acquire (void)
{

  return ACE_OS::thread_mutex_lock (&this->lock_);
}

inline int
ACE_Thread_Mutex::acquire (ACE_Time_Value &tv)
{

  return ACE_OS::thread_mutex_lock (&this->lock_, tv);
}

inline int
ACE_Thread_Mutex::acquire (ACE_Time_Value *tv)
{

  return ACE_OS::thread_mutex_lock (&this->lock_, tv);
}

inline int
ACE_Thread_Mutex::tryacquire (void)
{

  return ACE_OS::thread_mutex_trylock (&this->lock_);
}

inline int
ACE_Thread_Mutex::release (void)
{

  return ACE_OS::thread_mutex_unlock (&this->lock_);
}

inline int
ACE_Thread_Mutex::remove (void)
{

  int result = 0;
  if (!this->removed_)
    {
      this->removed_ = true;
      result = ACE_OS::thread_mutex_destroy (&this->lock_);
    }
  return result;
}


# 171 "/usr/local/include/ace/Thread_Mutex.h" 2 3




# 1 "/usr/local/include/ace/post.h" 1 3
# 176 "/usr/local/include/ace/Thread_Mutex.h" 2 3
# 24 "/usr/local/include/ace/Atomic_Op.h" 2 3


# 1 "/usr/local/include/ace/Atomic_Op_T.h" 1 3
# 15 "/usr/local/include/ace/Atomic_Op_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Atomic_Op_T.h" 2 3









template<typename TYPE>
struct ACE_Type_Traits
{
  typedef TYPE const & parameter_type;
};

template<>
struct ACE_Type_Traits<bool>
{
  typedef bool parameter_type;
};

template<>
struct ACE_Type_Traits<char>
{
  typedef char parameter_type;
};

template<>
struct ACE_Type_Traits<signed char>
{
  typedef signed char parameter_type;
};

template<>
struct ACE_Type_Traits<unsigned char>
{
  typedef unsigned char parameter_type;
};

template<>
struct ACE_Type_Traits<short>
{
  typedef short parameter_type;
};

template<>
struct ACE_Type_Traits<unsigned short>
{
  typedef unsigned short parameter_type;
};

template<>
struct ACE_Type_Traits<int>
{
  typedef int parameter_type;
};

template<>
struct ACE_Type_Traits<unsigned int>
{
  typedef unsigned int parameter_type;
};

template<>
struct ACE_Type_Traits<long>
{
  typedef long parameter_type;
};

template<>
struct ACE_Type_Traits<unsigned long>
{
  typedef unsigned long parameter_type;
};


template<>
struct ACE_Type_Traits<long long>
{
  typedef long long parameter_type;
};




template<>
struct ACE_Type_Traits<unsigned long long>
{
  typedef unsigned long long parameter_type;
};


template<>
struct ACE_Type_Traits<float>
{
  typedef float parameter_type;
};

template<>
struct ACE_Type_Traits<double>
{
  typedef double parameter_type;
};

template<>
struct ACE_Type_Traits<long double>
{
  typedef long double parameter_type;
};

template<typename TYPE>
struct ACE_Type_Traits<TYPE*>
{
  typedef TYPE* parameter_type;
};
# 150 "/usr/local/include/ace/Atomic_Op_T.h" 3
template <class ACE_LOCK, typename TYPE>
class ACE_Atomic_Op_Ex
{
public:

  typedef typename ACE_Type_Traits<TYPE>::parameter_type arg_type;




  ACE_Atomic_Op_Ex (ACE_LOCK & mtx);


  ACE_Atomic_Op_Ex (ACE_LOCK & mtx, arg_type c);




  TYPE operator++ (void);


  TYPE operator++ (int);


  TYPE operator+= (arg_type rhs);


  TYPE operator-- (void);


  TYPE operator-- (int);


  TYPE operator-= (arg_type rhs);


  bool operator== (arg_type rhs) const;


  bool operator!= (arg_type rhs) const;


  bool operator>= (arg_type rhs) const;


  bool operator> (arg_type rhs) const;


  bool operator<= (arg_type rhs) const;


  bool operator< (arg_type rhs) const;


  ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> &operator= (arg_type rhs);


  ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> &operator= (
    ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> const & rhs);


  TYPE value (void) const;


  void dump (void) const;





  ACE_Atomic_Op_Ex (ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> const &);
# 229 "/usr/local/include/ace/Atomic_Op_T.h" 3
  ACE_LOCK & mutex (void);







  TYPE & value_i (void);

private:

  ACE_LOCK & mutex_;


  TYPE value_;
};
# 261 "/usr/local/include/ace/Atomic_Op_T.h" 3
template <class ACE_LOCK, typename TYPE>
class ACE_Atomic_Op
{
public:

  typedef typename ACE_Type_Traits<TYPE>::parameter_type arg_type;


  ACE_Atomic_Op (void);


  ACE_Atomic_Op (arg_type c);


  ACE_Atomic_Op (ACE_Atomic_Op<ACE_LOCK, TYPE> const & c);


  ACE_Atomic_Op<ACE_LOCK, TYPE> & operator= (arg_type rhs);


  ACE_Atomic_Op<ACE_LOCK, TYPE> & operator= (
    ACE_Atomic_Op<ACE_LOCK, TYPE> const & rhs);


  TYPE operator++ (void);


  TYPE operator++ (int);


  TYPE operator+= (arg_type rhs);


  TYPE operator-- (void);


  TYPE operator-- (int);


  TYPE operator-= (arg_type rhs);


  bool operator== (arg_type rhs) const;


  bool operator!= (arg_type rhs) const;


  bool operator>= (arg_type rhs) const;


  bool operator> (arg_type rhs) const;


  bool operator<= (arg_type rhs) const;


  bool operator< (arg_type rhs) const;


  TYPE value (void) const;


  void dump (void) const;
# 336 "/usr/local/include/ace/Atomic_Op_T.h" 3
  ACE_LOCK & mutex (void);







  TYPE & value_i (void);

private:

  ACE_LOCK own_mutex_;


  ACE_Atomic_Op_Ex <ACE_LOCK, TYPE> impl_;
};




# 1 "/usr/local/include/ace/Atomic_Op_T.inl" 1 3




# 1 "/usr/local/include/ace/Guard_T.h" 1 3
# 17 "/usr/local/include/ace/Guard_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Guard_T.h" 2 3

# 1 "/usr/local/include/ace/Lock.h" 1 3
# 17 "/usr/local/include/ace/Lock.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Lock.h" 2 3








# 43 "/usr/local/include/ace/Lock.h" 3
class ACE_Lock
{
public:

  ACE_Lock (void);


  virtual ~ACE_Lock (void);






  virtual int remove (void) = 0;



  virtual int acquire (void) = 0;






  virtual int tryacquire (void) = 0;


  virtual int release (void) = 0;






  virtual int acquire_read (void) = 0;






  virtual int acquire_write (void) = 0;







  virtual int tryacquire_read (void) = 0;







  virtual int tryacquire_write (void) = 0;






  virtual int tryacquire_write_upgrade (void) = 0;
};
# 123 "/usr/local/include/ace/Lock.h" 3
class ACE_Adaptive_Lock : public ACE_Lock
{
public:


  virtual ~ACE_Adaptive_Lock (void);



  virtual int remove (void);
  virtual int acquire (void);
  virtual int tryacquire (void);
  virtual int release (void);
  virtual int acquire_read (void);
  virtual int acquire_write (void);
  virtual int tryacquire_read (void);
  virtual int tryacquire_write (void);
  virtual int tryacquire_write_upgrade (void);
  void dump (void) const;

protected:





  ACE_Adaptive_Lock (void);

  ACE_Lock *lock_;
};




# 1 "/usr/local/include/ace/Lock.inl" 1 3






inline
ACE_Lock::ACE_Lock (void)
{
}


# 158 "/usr/local/include/ace/Lock.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 161 "/usr/local/include/ace/Lock.h" 2 3
# 20 "/usr/local/include/ace/Guard_T.h" 2 3
# 28 "/usr/local/include/ace/Guard_T.h" 3

# 41 "/usr/local/include/ace/Guard_T.h" 3
template <class ACE_LOCK>
class ACE_Guard
{
public:


  ACE_Guard (ACE_LOCK &l);




  ACE_Guard (ACE_LOCK &l, bool block);






  ACE_Guard (ACE_LOCK &l, bool block, int become_owner);


  ~ACE_Guard (void);




  int acquire (void);


  int tryacquire (void);


  int release (void);



  void disown (void);




  bool locked (void) const;


  int remove (void);


  void dump (void) const;




protected:


  ACE_Guard (ACE_LOCK *lock): lock_ (lock), owner_ (0) {}


  ACE_LOCK *lock_;


  int owner_;

private:

  void operator= (const ACE_Guard<ACE_LOCK> &);
  ACE_Guard (const ACE_Guard<ACE_LOCK> &);
};
# 118 "/usr/local/include/ace/Guard_T.h" 3
template <class ACE_LOCK>
class ACE_Write_Guard : public ACE_Guard<ACE_LOCK>
{
public:



  ACE_Write_Guard (ACE_LOCK &m);



  ACE_Write_Guard (ACE_LOCK &m, bool block);




  int acquire_write (void);


  int acquire (void);


  int tryacquire_write (void);


  int tryacquire (void);




  void dump (void) const;



};
# 162 "/usr/local/include/ace/Guard_T.h" 3
template <class ACE_LOCK>
class ACE_Read_Guard : public ACE_Guard<ACE_LOCK>
{
public:



  ACE_Read_Guard (ACE_LOCK& m);



  ACE_Read_Guard (ACE_LOCK &m, bool block);




  int acquire_read (void);


  int acquire (void);


  int tryacquire_read (void);


  int tryacquire (void);




  void dump (void) const;



};
# 216 "/usr/local/include/ace/Guard_T.h" 3
template <class ACE_LOCK>
class ACE_TSS_Guard
{
public:



  ACE_TSS_Guard (ACE_LOCK &lock, bool block = true);


  ~ACE_TSS_Guard (void);




  int acquire (void);



  int tryacquire (void);


  int release (void);



  int remove (void);


  void dump (void) const;




protected:

  ACE_TSS_Guard (void);


  void init_key (void);


  static void cleanup (void *ptr);


  ACE_thread_key_t key_;

private:

  void operator= (const ACE_TSS_Guard<ACE_LOCK> &);
  ACE_TSS_Guard (const ACE_TSS_Guard<ACE_LOCK> &);
};
# 277 "/usr/local/include/ace/Guard_T.h" 3
template <class ACE_LOCK>
class ACE_TSS_Write_Guard : public ACE_TSS_Guard<ACE_LOCK>
{
public:



  ACE_TSS_Write_Guard (ACE_LOCK &lock, bool block = true);




  int acquire_write (void);


  int acquire (void);


  int tryacquire_write (void);


  int tryacquire (void);




  void dump (void) const;



};
# 317 "/usr/local/include/ace/Guard_T.h" 3
template <class ACE_LOCK>
class ACE_TSS_Read_Guard : public ACE_TSS_Guard<ACE_LOCK>
{
public:


  ACE_TSS_Read_Guard (ACE_LOCK &lock, bool block = true);



  int acquire_read (void);


  int acquire (void);



  int tryacquire_read (void);



  int tryacquire (void);



  void dump (void) const;



};






# 1 "/usr/local/include/ace/Guard_T.inl" 1 3




# 1 "/usr/local/include/ace/RW_Thread_Mutex.h" 1 3
# 17 "/usr/local/include/ace/RW_Thread_Mutex.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/RW_Thread_Mutex.h" 2 3
# 30 "/usr/local/include/ace/RW_Thread_Mutex.h" 3
# 1 "/usr/local/include/ace/RW_Mutex.h" 1 3
# 18 "/usr/local/include/ace/RW_Mutex.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/RW_Mutex.h" 2 3
# 31 "/usr/local/include/ace/RW_Mutex.h" 3

# 41 "/usr/local/include/ace/RW_Mutex.h" 3
class ACE_RW_Mutex
{
public:

  ACE_RW_Mutex (int type = PTHREAD_PROCESS_PRIVATE,
                const ACE_TCHAR *name = 0,
                void *arg = 0);


  ~ACE_RW_Mutex (void);






  int remove (void);


  int acquire_read (void);



  int acquire_write (void);






  int tryacquire_read (void);


  int tryacquire_write (void);
# 84 "/usr/local/include/ace/RW_Mutex.h" 3
  int tryacquire_write_upgrade (void);






  int acquire (void);
# 100 "/usr/local/include/ace/RW_Mutex.h" 3
  int tryacquire (void);


  int release (void);


  const ACE_rwlock_t &lock (void) const;


  void dump (void) const;


  struct __Ace {};

protected:

  ACE_rwlock_t lock_;






  bool removed_;

private:

  void operator= (const ACE_RW_Mutex &);
  ACE_RW_Mutex (const ACE_RW_Mutex &);
};




# 1 "/usr/local/include/ace/RW_Mutex.inl" 1 3






inline const ACE_rwlock_t &
ACE_RW_Mutex::lock (void) const
{

  return this->lock_;
}

inline int
ACE_RW_Mutex::remove (void)
{

  int result = 0;
  if (!this->removed_)
    {
      this->removed_ = true;
      result = ACE_OS::rwlock_destroy (&this->lock_);
    }
  return result;
}

inline int
ACE_RW_Mutex::acquire_read (void)
{

  return ACE_OS::rw_rdlock (&this->lock_);
}

inline int
ACE_RW_Mutex::acquire_write (void)
{

  return ACE_OS::rw_wrlock (&this->lock_);
}

inline int
ACE_RW_Mutex::acquire (void)
{

  return ACE_OS::rw_wrlock (&this->lock_);
}

inline int
ACE_RW_Mutex::tryacquire_read (void)
{

  return ACE_OS::rw_tryrdlock (&this->lock_);
}

inline int
ACE_RW_Mutex::tryacquire_write (void)
{

  return ACE_OS::rw_trywrlock (&this->lock_);
}

inline int
ACE_RW_Mutex::tryacquire_write_upgrade (void)
{

  return ACE_OS::rw_trywrlock_upgrade (&this->lock_);
}

inline int
ACE_RW_Mutex::tryacquire (void)
{

  return this->tryacquire_write ();
}

inline int
ACE_RW_Mutex::release (void)
{

  return ACE_OS::rw_unlock (&this->lock_);
}


# 135 "/usr/local/include/ace/RW_Mutex.h" 2 3




# 1 "/usr/local/include/ace/post.h" 1 3
# 140 "/usr/local/include/ace/RW_Mutex.h" 2 3
# 31 "/usr/local/include/ace/RW_Thread_Mutex.h" 2 3








class ACE_RW_Thread_Mutex : public ACE_RW_Mutex
{
public:
  ACE_RW_Thread_Mutex (const ACE_TCHAR *name = 0,
                       void *arg = 0);


  ~ACE_RW_Thread_Mutex (void);
# 56 "/usr/local/include/ace/RW_Thread_Mutex.h" 3
  int tryacquire_write_upgrade (void);


  void dump (void) const;


  struct __Ace {};
};




# 1 "/usr/local/include/ace/RW_Thread_Mutex.inl" 1 3






inline int
ACE_RW_Thread_Mutex::tryacquire_write_upgrade (void)
{

  return ACE_OS::rw_trywrlock_upgrade (&this->lock_);
}

inline
ACE_RW_Thread_Mutex::~ACE_RW_Thread_Mutex (void)
{
}


# 69 "/usr/local/include/ace/RW_Thread_Mutex.h" 2 3




# 1 "/usr/local/include/ace/post.h" 1 3
# 74 "/usr/local/include/ace/RW_Thread_Mutex.h" 2 3
# 6 "/usr/local/include/ace/Guard_T.inl" 2 3



template <class ACE_LOCK> inline int
ACE_Guard<ACE_LOCK>::acquire (void)
{
  return this->owner_ = this->lock_->acquire ();
}

template <class ACE_LOCK> inline int
ACE_Guard<ACE_LOCK>::tryacquire (void)
{
  return this->owner_ = this->lock_->tryacquire ();
}

template <class ACE_LOCK> inline int
ACE_Guard<ACE_LOCK>::release (void)
{
  if (this->owner_ == -1)
    return -1;
  else
    {
      this->owner_ = -1;
      return this->lock_->release ();
    }
}

template <class ACE_LOCK> inline
ACE_Guard<ACE_LOCK>::ACE_Guard (ACE_LOCK &l)
  : lock_ (&l),
    owner_ (0)
{
  this->acquire ();
}

template <class ACE_LOCK> inline
ACE_Guard<ACE_LOCK>::ACE_Guard (ACE_LOCK &l, bool block)
  : lock_ (&l),
    owner_ (0)
{
  if (block)
    this->acquire ();
  else
    this->tryacquire ();
}

template <class ACE_LOCK> inline
ACE_Guard<ACE_LOCK>::ACE_Guard (ACE_LOCK &l, bool , int become_owner)
  : lock_ (&l),
    owner_ (become_owner == 0 ? -1 : 0)
{
}




template <class ACE_LOCK> inline
ACE_Guard<ACE_LOCK>::~ACE_Guard (void)
{
  this->release ();
}

template <class ACE_LOCK> inline bool
ACE_Guard<ACE_LOCK>::locked (void) const
{
  return this->owner_ != -1;
}

template <class ACE_LOCK> inline int
ACE_Guard<ACE_LOCK>::remove (void)
{
  return this->lock_->remove ();
}

template <class ACE_LOCK> inline void
ACE_Guard<ACE_LOCK>::disown (void)
{
  this->owner_ = -1;
}

template <class ACE_LOCK> inline
ACE_Write_Guard<ACE_LOCK>::ACE_Write_Guard (ACE_LOCK &m)
  : ACE_Guard<ACE_LOCK> (&m)
{
  this->acquire_write ();
}

template <class ACE_LOCK> inline int
ACE_Write_Guard<ACE_LOCK>::acquire_write (void)
{
  return this->owner_ = this->lock_->acquire_write ();
}

template <class ACE_LOCK> inline int
ACE_Write_Guard<ACE_LOCK>::acquire (void)
{
  return this->owner_ = this->lock_->acquire_write ();
}

template <class ACE_LOCK> inline int
ACE_Write_Guard<ACE_LOCK>::tryacquire_write (void)
{
  return this->owner_ = this->lock_->tryacquire_write ();
}

template <class ACE_LOCK> inline int
ACE_Write_Guard<ACE_LOCK>::tryacquire (void)
{
  return this->owner_ = this->lock_->tryacquire_write ();
}

template <class ACE_LOCK> inline
ACE_Write_Guard<ACE_LOCK>::ACE_Write_Guard (ACE_LOCK &m,
                                            bool block)
  : ACE_Guard<ACE_LOCK> (&m)
{
  if (block)
    this->acquire_write ();
  else
    this->tryacquire_write ();
}

template <class ACE_LOCK> inline int
ACE_Read_Guard<ACE_LOCK>::acquire_read (void)
{
  return this->owner_ = this->lock_->acquire_read ();
}

template <class ACE_LOCK> inline int
ACE_Read_Guard<ACE_LOCK>::acquire (void)
{
  return this->owner_ = this->lock_->acquire_read ();
}

template <class ACE_LOCK> inline int
ACE_Read_Guard<ACE_LOCK>::tryacquire_read (void)
{
  return this->owner_ = this->lock_->tryacquire_read ();
}

template <class ACE_LOCK> inline int
ACE_Read_Guard<ACE_LOCK>::tryacquire (void)
{
  return this->owner_ = this->lock_->tryacquire_read ();
}

template <class ACE_LOCK> inline
ACE_Read_Guard<ACE_LOCK>::ACE_Read_Guard (ACE_LOCK &m)
  : ACE_Guard<ACE_LOCK> (&m)
{
  this->acquire_read ();
}

template <class ACE_LOCK> inline
ACE_Read_Guard<ACE_LOCK>::ACE_Read_Guard (ACE_LOCK &m,
                                          bool block)
  : ACE_Guard<ACE_LOCK> (&m)
{
  if (block)
    this->acquire_read ();
  else
    this->tryacquire_read ();
}


# 354 "/usr/local/include/ace/Guard_T.h" 2 3



# 1 "/usr/local/include/ace/Guard_T.cpp" 1 3





# 1 "/usr/local/include/ace/Guard_T.h" 1 3
# 7 "/usr/local/include/ace/Guard_T.cpp" 2 3
# 22 "/usr/local/include/ace/Guard_T.cpp" 3




template <class ACE_LOCK> void
ACE_Guard<ACE_LOCK>::dump (void) const
{
# 37 "/usr/local/include/ace/Guard_T.cpp" 3
}



template <class ACE_LOCK> void
ACE_Write_Guard<ACE_LOCK>::dump (void) const
{




}



template <class ACE_LOCK> void
ACE_Read_Guard<ACE_LOCK>::dump (void) const
{

  ACE_Guard<ACE_LOCK>::dump ();
}


# 358 "/usr/local/include/ace/Guard_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 365 "/usr/local/include/ace/Guard_T.h" 2 3
# 6 "/usr/local/include/ace/Atomic_Op_T.inl" 2 3









template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator++ (void)
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return this->value_; };
  return ++this->value_;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator+= (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs)
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return this->value_; };
  return this->value_ += rhs;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator-- (void)
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return this->value_; };
  return --this->value_;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator-= (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs)
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return this->value_; };
  return this->value_ -= rhs;
}

template <class ACE_LOCK, class TYPE>
inline
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::ACE_Atomic_Op_Ex (
  ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> const & rhs)
  : mutex_ (rhs.mutex_)
  , value_ (rhs.value ())
{

}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator++ (int)
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return this->value_; };
  return this->value_++;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator-- (int)
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return this->value_; };
  return this->value_--;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator== (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs) const
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return false; };
  return this->value_ == rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator!= (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs) const
{

  return !(*this == rhs);
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator>= (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs) const
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return false; };
  return this->value_ >= rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator> (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs) const
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return false; };
  return this->value_ > rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator<= (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs) const
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return false; };
  return this->value_ <= rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator< (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs) const
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return false; };
  return this->value_ < rhs;
}

template <class ACE_LOCK, class TYPE>
inline ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> &
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator= (
  ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> const & rhs)
{


  ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> tmp (rhs);

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return *this; };
  std::swap (this->value_, tmp.value_);

  return *this;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::value (void) const
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return this->value_; };
  return this->value_;
}

template <class ACE_LOCK, class TYPE>
inline TYPE &
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::value_i (void)
{




  return this->value_;
}

template <class ACE_LOCK, class TYPE>
inline ACE_Atomic_Op_Ex<ACE_LOCK, TYPE> &
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::operator= (
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type rhs)
{

  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return *this; };
  this->value_ = rhs;
  return *this;
}





template <class ACE_LOCK, class TYPE> inline
ACE_Atomic_Op<ACE_LOCK, TYPE>::ACE_Atomic_Op (
  ACE_Atomic_Op<ACE_LOCK, TYPE> const & rhs)
  : impl_ (own_mutex_, rhs.value ())
{

}


template <class ACE_LOCK, class TYPE>
inline ACE_Atomic_Op<ACE_LOCK, TYPE> &
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator= (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type i)
{
  this->impl_ = i;
  return *this;
}

template <class ACE_LOCK, class TYPE>
inline ACE_Atomic_Op<ACE_LOCK, TYPE> &
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator= (
  ACE_Atomic_Op<ACE_LOCK, TYPE> const & rhs)
{
  this->impl_ = rhs.impl_;
  return *this;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator++ (void)
{
  return ++this->impl_;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator++ (int)
{
  return this->impl_++;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator+= (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs)
{
  return this->impl_ += rhs;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator-- (void)
{
  return --this->impl_;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator-- (int)
{
  return this->impl_--;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator-= (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs)
{
  return this->impl_ -= rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator== (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs) const
{
  return this->impl_ == rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator!= (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs) const
{
  return this->impl_ != rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator>= (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs) const
{
  return this->impl_ >= rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator> (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs) const
{
  return this->impl_ > rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator<= (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs) const
{
  return this->impl_ <= rhs;
}

template <class ACE_LOCK, class TYPE>
inline bool
ACE_Atomic_Op<ACE_LOCK, TYPE>::operator< (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type rhs) const
{
  return this->impl_ < rhs;
}

template <class ACE_LOCK, class TYPE>
inline TYPE
ACE_Atomic_Op<ACE_LOCK, TYPE>::value (void) const
{
  return this->impl_.value ();
}

template <class ACE_LOCK, class TYPE>
inline void
ACE_Atomic_Op<ACE_LOCK, TYPE>::dump (void) const
{



  return;
}

template <class ACE_LOCK, class TYPE>
inline ACE_LOCK &
ACE_Atomic_Op<ACE_LOCK, TYPE>::mutex (void)
{
  return this->own_mutex_;
}

template <class ACE_LOCK, class TYPE>
inline TYPE &
ACE_Atomic_Op<ACE_LOCK, TYPE>::value_i (void)
{
  return this->impl_.value_i ();
}


# 358 "/usr/local/include/ace/Atomic_Op_T.h" 2 3



# 1 "/usr/local/include/ace/Atomic_Op_T.cpp" 1 3



# 1 "/usr/local/include/ace/Atomic_Op_T.h" 1 3
# 5 "/usr/local/include/ace/Atomic_Op_T.cpp" 2 3
# 18 "/usr/local/include/ace/Atomic_Op_T.cpp" 3








template <class ACE_LOCK, class TYPE> ACE_LOCK &
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::mutex (void)
{

  return this->mutex_;
}

template <class ACE_LOCK, class TYPE>
void
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::dump (void) const
{






}

template <class ACE_LOCK, class TYPE>
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::ACE_Atomic_Op_Ex (ACE_LOCK & mtx)
  : mutex_ (mtx)
  , value_ (0)
{

}

template <class ACE_LOCK, class TYPE>
ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::ACE_Atomic_Op_Ex (
  ACE_LOCK & mtx,
  typename ACE_Atomic_Op_Ex<ACE_LOCK, TYPE>::arg_type c)
  : mutex_ (mtx)
  , value_ (c)
{

}



template <class ACE_LOCK, class TYPE>
ACE_Atomic_Op<ACE_LOCK, TYPE>::ACE_Atomic_Op (void)
  : impl_ (this->own_mutex_)
{

}

template <class ACE_LOCK, class TYPE>
ACE_Atomic_Op<ACE_LOCK, TYPE>::ACE_Atomic_Op (
  typename ACE_Atomic_Op<ACE_LOCK, TYPE>::arg_type c)
  : impl_ (own_mutex_, c)
{

}


# 362 "/usr/local/include/ace/Atomic_Op_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 369 "/usr/local/include/ace/Atomic_Op_T.h" 2 3
# 27 "/usr/local/include/ace/Atomic_Op.h" 2 3
# 57 "/usr/local/include/ace/Atomic_Op.h" 3
# 1 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 1 3
# 15 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 2 3
# 28 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 3

# 37 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 3
template<typename T>
class ACE_Atomic_Op_GCC
{
public:

  T operator++ (void);


  T operator++ (int);


  T operator+= (T rhs);


  T operator-- (void);


  T operator-- (int);


  T operator-= (T rhs);


  bool operator== (T rhs) const;


  bool operator!= (T rhs) const;


  bool operator>= (T rhs) const;


  bool operator> (T rhs) const;


  bool operator<= (T rhs) const;


  bool operator< (T rhs) const;


  T value (void) const;


  void dump (void) const;


  volatile T &value_i (void);




protected:

  ACE_Atomic_Op_GCC<T> &operator= (T rhs);


  ACE_Atomic_Op_GCC<T> &operator= (const ACE_Atomic_Op_GCC<T> &rhs);


  ACE_Atomic_Op_GCC (void);


  ACE_Atomic_Op_GCC (T c);


  ACE_Atomic_Op_GCC (const ACE_Atomic_Op_GCC<T> &c);

private:




  ACE_Thread_Mutex &mutex (void);

private:


  volatile T value_;
};




# 1 "/usr/local/include/ace/Atomic_Op_GCC_T.inl" 1 3








template <typename T>
inline
ACE_Atomic_Op_GCC<T>::ACE_Atomic_Op_GCC (void)
  : value_ (0)
{
}

template <typename T>
inline
ACE_Atomic_Op_GCC<T>::ACE_Atomic_Op_GCC (T c)
  : value_ (c)
{
}

template <typename T>
inline
ACE_Atomic_Op_GCC<T>::ACE_Atomic_Op_GCC (
  const ACE_Atomic_Op_GCC<T> &rhs)
  : value_ (rhs.value_)
{
}

template <typename T>
inline T
ACE_Atomic_Op_GCC<T>::operator++ (void)
{
  return __sync_add_and_fetch (&this->value_, 1);
}

template <typename T>
inline T
ACE_Atomic_Op_GCC<T>::operator++ (int)
{
  return __sync_fetch_and_add (&this->value_, 1);
}

template <typename T>
inline T
ACE_Atomic_Op_GCC<T>::operator-- (void)
{
  return __sync_sub_and_fetch (&this->value_, 1);
}

template <typename T>
inline T
ACE_Atomic_Op_GCC<T>::operator-- (int)
{
  return __sync_fetch_and_sub (&this->value_, 1);
}

template <typename T>
inline T
ACE_Atomic_Op_GCC<T>::operator+= (T rhs)
{
  return __sync_add_and_fetch (&this->value_, rhs);
}

template <typename T>
inline T
ACE_Atomic_Op_GCC<T>::operator-= (T rhs)
{
  return __sync_sub_and_fetch (&this->value_, rhs);
}

template <typename T>
inline bool
ACE_Atomic_Op_GCC<T>::operator== (T rhs) const
{
  return (this->value_ == rhs);
}

template <typename T>
inline bool
ACE_Atomic_Op_GCC<T>::operator!= (T rhs) const
{
  return (this->value_ != rhs);
}

template <typename T>
inline bool
ACE_Atomic_Op_GCC<T>::operator>= (T rhs) const
{
  return (this->value_ >= rhs);
}

template <typename T>
inline bool
ACE_Atomic_Op_GCC<T>::operator> (T rhs) const
{
  return (this->value_ > rhs);
}

template <typename T>
inline bool
ACE_Atomic_Op_GCC<T>::operator<= (T rhs) const
{
  return (this->value_ <= rhs);
}

template <typename T>
inline bool
ACE_Atomic_Op_GCC<T>::operator< (T rhs) const
{
  return (this->value_ < rhs);
}

template <typename T>
inline ACE_Atomic_Op_GCC<T> &
ACE_Atomic_Op_GCC<T>::operator= (T rhs)
{
  (void) __sync_lock_test_and_set (&this->value_, rhs);
  return *this;
}

template <typename T>
inline ACE_Atomic_Op_GCC<T> &
ACE_Atomic_Op_GCC<T>::operator= (
   const ACE_Atomic_Op_GCC<T> &rhs)
{
  (void) __sync_lock_test_and_set (&this->value_, rhs.value_);
  return *this;
}

template <typename T>
inline T
ACE_Atomic_Op_GCC<T>::value (void) const
{
  return this->value_;
}

template <typename T>
inline volatile T &
ACE_Atomic_Op_GCC<T>::value_i (void)
{
  return this->value_;
}


# 122 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 2 3



# 1 "/usr/local/include/ace/Atomic_Op_GCC_T.cpp" 1 3





# 15 "/usr/local/include/ace/Atomic_Op_GCC_T.cpp" 3


template <typename T>
void
ACE_Atomic_Op_GCC<T>::dump (void) const
{




}


# 126 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 2 3
# 135 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 136 "/usr/local/include/ace/Atomic_Op_GCC_T.h" 2 3
# 58 "/usr/local/include/ace/Atomic_Op.h" 2 3


# 261 "/usr/local/include/ace/Atomic_Op.h" 3
template<>
class ACE_Atomic_Op<ACE_Thread_Mutex, int>
: public ACE_Atomic_Op_GCC<int>
{
public:
  ACE_Atomic_Op (void);
  ACE_Atomic_Op (int c);
  ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, int> &c);
  ACE_Atomic_Op<ACE_Thread_Mutex, int> &operator= (int rhs);
};

template<>
class ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>
: public ACE_Atomic_Op_GCC<unsigned int>
{
public:
  ACE_Atomic_Op (void);
  ACE_Atomic_Op (unsigned int c);
  ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned> &c);
  ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int> &operator= (unsigned int rhs);
};



template<>
class ACE_Atomic_Op<ACE_Thread_Mutex, long>
: public ACE_Atomic_Op_GCC<long>
{
public:
  ACE_Atomic_Op (void);
  ACE_Atomic_Op (long c);
  ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, long> &c);
  ACE_Atomic_Op<ACE_Thread_Mutex, long> &operator= (long rhs);
};

template<>
class ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>
: public ACE_Atomic_Op_GCC<unsigned long>
{
public:
  ACE_Atomic_Op (void);
  ACE_Atomic_Op (unsigned long c);
  ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &c);
  ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &operator= (unsigned long rhs);
};


template<>
class ACE_Atomic_Op<ACE_Thread_Mutex, short>
: public ACE_Atomic_Op_GCC<short>
{
public:
  ACE_Atomic_Op (void);
  ACE_Atomic_Op (short c);
  ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, short> &c);
  ACE_Atomic_Op<ACE_Thread_Mutex, short> &operator= (short rhs);
};

template<>
class ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>
: public ACE_Atomic_Op_GCC<unsigned short>
{
public:
  ACE_Atomic_Op (void);
  ACE_Atomic_Op (unsigned short c);
  ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short> &c);
  ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short> &operator= (unsigned short rhs);
};



template<>
class ACE_Atomic_Op<ACE_Thread_Mutex, bool>
: public ACE_Atomic_Op_GCC<bool>
{
public:
  ACE_Atomic_Op (void);
  ACE_Atomic_Op (bool c);
  ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, bool> &c);
  ACE_Atomic_Op<ACE_Thread_Mutex, bool> &operator= (bool rhs);
};







# 1 "/usr/local/include/ace/Atomic_Op.inl" 1 3
# 14 "/usr/local/include/ace/Atomic_Op.inl" 3

# 364 "/usr/local/include/ace/Atomic_Op.inl" 3
inline
ACE_Atomic_Op<ACE_Thread_Mutex, int>::ACE_Atomic_Op (void) :
  ACE_Atomic_Op_GCC<int> ()
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, int>::ACE_Atomic_Op (int c) :
  ACE_Atomic_Op_GCC<int>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, int>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, int> &c) :
  ACE_Atomic_Op_GCC<int>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, int>&
ACE_Atomic_Op<ACE_Thread_Mutex, int>::operator= (int rhs)
{
  ACE_Atomic_Op_GCC<int>::operator= (rhs);
  return *this;
}


inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::ACE_Atomic_Op (void) :
  ACE_Atomic_Op_GCC<unsigned int>()
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int> &c) :
  ACE_Atomic_Op_GCC<unsigned int>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::ACE_Atomic_Op (unsigned int c) :
  ACE_Atomic_Op_GCC<unsigned int>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>&
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned int>::operator= (unsigned int rhs)
{
  ACE_Atomic_Op_GCC<unsigned int>::operator= (rhs);
  return *this;
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (void) :
  ACE_Atomic_Op_GCC<long>()
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (long c) :
  ACE_Atomic_Op_GCC<long>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, long>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, long> &c) :
  ACE_Atomic_Op_GCC<long>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, long>&
ACE_Atomic_Op<ACE_Thread_Mutex, long>::operator= (long rhs)
{
  ACE_Atomic_Op_GCC<long>::operator= (rhs);
  return *this;
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (void) :
  ACE_Atomic_Op_GCC<unsigned long> ()
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (unsigned long c) :
  ACE_Atomic_Op_GCC<unsigned long>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long> &c) :
  ACE_Atomic_Op_GCC<unsigned long>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>&
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned long>::operator= (unsigned long rhs)
{
  ACE_Atomic_Op_GCC<unsigned long>::operator= (rhs);
  return *this;
}


inline
ACE_Atomic_Op<ACE_Thread_Mutex, short>::ACE_Atomic_Op (void) :
  ACE_Atomic_Op_GCC<short>()
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, short>::ACE_Atomic_Op (short c) :
  ACE_Atomic_Op_GCC<short>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, short>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, short> &c) :
  ACE_Atomic_Op_GCC<short>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, short>&
ACE_Atomic_Op<ACE_Thread_Mutex, short>::operator= (short rhs)
{
  ACE_Atomic_Op_GCC<short>::operator= (rhs);
  return *this;
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::ACE_Atomic_Op (void) :
  ACE_Atomic_Op_GCC<unsigned short> ()
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::ACE_Atomic_Op (unsigned short c) :
  ACE_Atomic_Op_GCC<unsigned short>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short> &c) :
  ACE_Atomic_Op_GCC<unsigned short>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>&
ACE_Atomic_Op<ACE_Thread_Mutex, unsigned short>::operator= (unsigned short rhs)
{
  ACE_Atomic_Op_GCC<unsigned short>::operator= (rhs);
  return *this;
}



inline
ACE_Atomic_Op<ACE_Thread_Mutex, bool>::ACE_Atomic_Op (void) :
  ACE_Atomic_Op_GCC<bool> ()
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, bool>::ACE_Atomic_Op (bool c) :
  ACE_Atomic_Op_GCC<bool>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, bool>::ACE_Atomic_Op (const ACE_Atomic_Op<ACE_Thread_Mutex, bool> &c) :
  ACE_Atomic_Op_GCC<bool>(c)
{
}

inline
ACE_Atomic_Op<ACE_Thread_Mutex, bool>&
ACE_Atomic_Op<ACE_Thread_Mutex, bool>::operator= (bool rhs)
{
  ACE_Atomic_Op_GCC<bool>::operator= (rhs);
  return *this;
}





# 350 "/usr/local/include/ace/Atomic_Op.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 353 "/usr/local/include/ace/Atomic_Op.h" 2 3
# 28 "/usr/local/include/ace/Log_Msg.h" 2 3
# 1 "/usr/local/include/ace/Synch_Traits.h" 1 3
# 17 "/usr/local/include/ace/Synch_Traits.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Synch_Traits.h" 2 3
# 26 "/usr/local/include/ace/Synch_Traits.h" 3



class ACE_Null_Mutex;
class ACE_Null_Condition;
class ACE_Null_Semaphore;
class ACE_Null_Mutex;
class ACE_Thread_Mutex;
class ACE_Process_Mutex;
class ACE_Recursive_Thread_Mutex;
class ACE_RW_Thread_Mutex;
class ACE_Condition_Thread_Mutex;
class ACE_Condition_Recursive_Thread_Mutex;
class ACE_Thread_Semaphore;
# 50 "/usr/local/include/ace/Synch_Traits.h" 3
class ACE_NULL_SYNCH
{
public:
  typedef ACE_Null_Mutex MUTEX;
  typedef ACE_Null_Mutex NULL_MUTEX;
  typedef ACE_Null_Mutex PROCESS_MUTEX;
  typedef ACE_Null_Mutex RECURSIVE_MUTEX;
  typedef ACE_Null_Mutex RW_MUTEX;
  typedef ACE_Null_Condition CONDITION;
  typedef ACE_Null_Condition RECURSIVE_CONDITION;
  typedef ACE_Null_Semaphore SEMAPHORE;
  typedef ACE_Null_Mutex NULL_SEMAPHORE;
};



class ACE_Process_Mutex;
class ACE_Condition_Recursive_Thread_Mutex;
# 79 "/usr/local/include/ace/Synch_Traits.h" 3
class ACE_MT_SYNCH
{
public:
  typedef ACE_Thread_Mutex MUTEX;
  typedef ACE_Null_Mutex NULL_MUTEX;
  typedef ACE_Process_Mutex PROCESS_MUTEX;
  typedef ACE_Recursive_Thread_Mutex RECURSIVE_MUTEX;
  typedef ACE_RW_Thread_Mutex RW_MUTEX;
  typedef ACE_Condition_Thread_Mutex CONDITION;
  typedef ACE_Condition_Recursive_Thread_Mutex RECURSIVE_CONDITION;
  typedef ACE_Thread_Semaphore SEMAPHORE;
  typedef ACE_Null_Semaphore NULL_SEMAPHORE;
};
# 149 "/usr/local/include/ace/Synch_Traits.h" 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 152 "/usr/local/include/ace/Synch_Traits.h" 2 3
# 29 "/usr/local/include/ace/Log_Msg.h" 2 3
# 117 "/usr/local/include/ace/Log_Msg.h" 3
# 1 "/usr/local/include/ace/OS_Log_Msg_Attributes.h" 1 3
# 118 "/usr/local/include/ace/Log_Msg.h" 2 3
# 136 "/usr/local/include/ace/Log_Msg.h" 3


class ACE_Log_Msg_Callback;
class ACE_Log_Msg_Backend;






class ACE_Thread_Descriptor;
class ACE_Log_Record;
# 179 "/usr/local/include/ace/Log_Msg.h" 3
class ACE_Log_Msg
{
public:

  enum
  {

    STDERR = 1,

    LOGGER = 2,


    OSTREAM = 4,

    MSG_CALLBACK = 8,

    VERBOSE = 16,


    VERBOSE_LITE = 32,


    SILENT = 64,

    SYSLOG = 128,

    CUSTOM = 256
 };




  static ACE_Log_Msg *instance (void);


  static int last_error_adapter (void);


  static int exists (void);


  static const ACE_TCHAR * program_name (void);



  static void disable_debug_messages (ACE_Log_Priority priority = LM_DEBUG);



  static void enable_debug_messages (ACE_Log_Priority priority = LM_DEBUG);


  ACE_Log_Msg (void);


  ~ACE_Log_Msg (void);
# 255 "/usr/local/include/ace/Log_Msg.h" 3
  int open (const ACE_TCHAR *prog_name,
            u_long options_flags = ACE_Log_Msg::STDERR,
            const ACE_TCHAR *logger_key = 0);






  void set_flags (u_long f);




  void clr_flags (u_long f);




  u_long flags (void);
# 286 "/usr/local/include/ace/Log_Msg.h" 3
  int acquire (void);


  int release (void);




  void sync (const ACE_TCHAR *program_name);






  void op_status (int status);



  int op_status (void) const;



  void errnum (int);



  int errnum (void) const;


  void linenum (int);


  int linenum (void) const;


  void file (const char *);


  const char *file (void);


  void msg (const ACE_TCHAR *);


  const ACE_TCHAR *msg (void);



  void restart (bool r);



  bool restart (void) const;






  void msg_ostream (ostream *);






  void msg_ostream (ostream *, bool delete_ostream);


  ostream *msg_ostream (void) const;







  ACE_Log_Msg_Callback *msg_callback (ACE_Log_Msg_Callback *c);
  ACE_Log_Msg_Callback *msg_callback (void) const;
# 377 "/usr/local/include/ace/Log_Msg.h" 3
  static ACE_Log_Msg_Backend *msg_backend (ACE_Log_Msg_Backend *b);
  static ACE_Log_Msg_Backend *msg_backend (void);


  int inc (void);


  int dec (void);


  int trace_depth (void) const;


  void trace_depth (int);


  bool trace_active (void) const;


  void trace_active (bool value);


  ACE_Thread_Descriptor *thr_desc (void) const;






  void thr_desc (ACE_Thread_Descriptor *td);
# 430 "/usr/local/include/ace/Log_Msg.h" 3
  void stop_tracing (void);


  void start_tracing (void);


  bool tracing_enabled (void) const;

  typedef enum
  {
    PROCESS = 0,
    THREAD = 1
  } MASK_TYPE;



  u_long priority_mask (MASK_TYPE = THREAD);


  u_long priority_mask (u_long, MASK_TYPE = THREAD);


  int log_priority_enabled (ACE_Log_Priority log_priority);


  int log_priority_enabled (ACE_Log_Priority log_priority,
                            const char *,
                            ...);
# 472 "/usr/local/include/ace/Log_Msg.h" 3
  pid_t getpid (void) const;


  const ACE_TCHAR *local_host (void) const;


  void local_host (const ACE_TCHAR *);






  void set (const char *file,
            int line,
            int op_status = -1,
            int errnum = 0,
            bool restart = true,
            ostream *os = 0,
            ACE_Log_Msg_Callback *c = 0);



  void conditional_set (const char *file,
                        int line,
                        int op_status,
                        int errnum);
# 551 "/usr/local/include/ace/Log_Msg.h" 3
  ssize_t log (ACE_Log_Priority priority, const ACE_TCHAR *format, ...);


  ssize_t log (ACE_Log_Priority priority, const ACE_ANTI_TCHAR *format, ...);







  ssize_t log (const ACE_TCHAR *format,
               ACE_Log_Priority priority,
               va_list argp);



  ssize_t log (ACE_Log_Record &log_record,
               int suppress_stderr = 0);






  int log_hexdump (ACE_Log_Priority log_priority,
                   const char *buffer,
                   size_t size,
                   const ACE_TCHAR *text = 0);

  static void init_hook (ACE_OS_Log_Msg_Attributes &attributes
# 591 "/usr/local/include/ace/Log_Msg.h" 3
                         );






  static void inherit_hook (ACE_OS_Thread_Descriptor *thr_desc,
                            ACE_OS_Log_Msg_Attributes &attributes);


  void dump (void) const;


  struct __Ace {};

private:
  void cleanup_ostream ();


  int status_;


  int errnum_;


  int linenum_;


  char file_[4096 + 1];




  ACE_TCHAR* msg_;



  bool restart_;


  ostream *ostream_;







  typedef ACE_Atomic_Op<ACE_MT_SYNCH::MUTEX, unsigned long> Atomic_ULong;
  Atomic_ULong *ostream_refcount_;


  ACE_Log_Msg_Callback *msg_callback_;


  int trace_depth_;


  bool trace_active_;


  bool tracing_enabled_;







  ACE_Thread_Descriptor *thr_desc_;






  u_long priority_mask_;


  int timestamp_;
# 682 "/usr/local/include/ace/Log_Msg.h" 3
  static u_long process_priority_mask_;


  static const ACE_TCHAR *program_name_;


  static const ACE_TCHAR *local_host_;


  static pid_t pid_;



  static u_long flags_;


  static ptrdiff_t msg_off_;





  static int instance_count_;




  static u_long default_priority_mask_;




  struct
  {
    bool is_set_;
    const char *file_;
    int line_;
    int op_status_;
    int errnum_;
  } conditional_values_;


  static bool key_created_;



  static void close (void);


  static void sync_hook (const ACE_TCHAR *prg_name);


  static ACE_OS_Thread_Descriptor *thr_desc_hook (void);




  ACE_Log_Msg &operator= (const ACE_Log_Msg &);
  ACE_Log_Msg (const ACE_Log_Msg &);
};


# 762 "/usr/local/include/ace/Log_Msg.h" 3

void
ACE_TSS_cleanup (void *ptr);
# 773 "/usr/local/include/ace/Log_Msg.h" 3
# 1 "/usr/local/include/ace/Log_Msg.inl" 1 3









inline
u_long
ACE_Log_Msg::priority_mask (MASK_TYPE mask_type)
{
  return mask_type == THREAD
    ? this->priority_mask_
    : ACE_Log_Msg::process_priority_mask_;
}

inline
int
ACE_Log_Msg::log_priority_enabled (ACE_Log_Priority log_priority)
{
  return (((this->priority_mask_ | ACE_Log_Msg::process_priority_mask_) & (log_priority)) != 0);


}

inline
void
ACE_Log_Msg::op_status (int status)
{
  this->status_ = status;
}

inline
int
ACE_Log_Msg::op_status (void) const
{
  return this->status_;
}

inline
void
ACE_Log_Msg::restart (bool r)
{
  this->restart_ = r;
}

inline
bool
ACE_Log_Msg::restart (void) const
{
  return this->restart_;
}

inline
int
ACE_Log_Msg::errnum (void) const
{
  return this->errnum_;
}

inline
void
ACE_Log_Msg::errnum (int e)
{
  this->errnum_ = e;
}

inline
int
ACE_Log_Msg::linenum (void) const
{
  return this->linenum_;
}

inline
void
ACE_Log_Msg::linenum (int l)
{
  this->linenum_ = l;
}

inline
int
ACE_Log_Msg::inc (void)
{
  return this->trace_depth_++;
}

inline
int
ACE_Log_Msg::dec (void)
{
  return this->trace_depth_ == 0 ? 0 : --this->trace_depth_;
}

inline
int
ACE_Log_Msg::trace_depth (void) const
{
  return this->trace_depth_;
}

inline
void
ACE_Log_Msg::trace_depth (int depth)
{
  this->trace_depth_ = depth;
}

inline
bool
ACE_Log_Msg::trace_active (void) const
{
  return this->trace_active_;
}

inline
void
ACE_Log_Msg::trace_active (bool value)
{
  this->trace_active_ = value;
}

inline
ACE_Thread_Descriptor *
ACE_Log_Msg::thr_desc (void) const
{
  return this->thr_desc_;
}


inline
void
ACE_Log_Msg::start_tracing (void)
{
  this->tracing_enabled_ = true;
}


inline
void
ACE_Log_Msg::stop_tracing (void)
{
  this->tracing_enabled_ = false;
}

inline
bool
ACE_Log_Msg::tracing_enabled (void) const
{
  return this->tracing_enabled_;
}

inline
const char *
ACE_Log_Msg::file (void)
{
  return this->file_;
}

inline
void
ACE_Log_Msg::file (const char *s)
{
  ACE_OS::strsncpy (this->file_, s, sizeof this->file_);
}

inline
const ACE_TCHAR *
ACE_Log_Msg::msg (void)
{
  return this->msg_ + ACE_Log_Msg::msg_off_;
}

inline
void
ACE_Log_Msg::msg (const ACE_TCHAR *m)
{
  ACE_OS::strsncpy (this->msg_, m,
                    ((4 * 1024 +1) / sizeof (ACE_TCHAR)));
}

inline
ACE_Log_Msg_Callback *
ACE_Log_Msg::msg_callback (void) const
{
  return this->msg_callback_;
}

inline
ACE_Log_Msg_Callback *
ACE_Log_Msg::msg_callback (ACE_Log_Msg_Callback *c)
{
  ACE_Log_Msg_Callback *old = this->msg_callback_;
  this->msg_callback_ = c;
  return old;
}

inline
ostream *
ACE_Log_Msg::msg_ostream (void) const
{
  return this->ostream_;
}

inline
void
ACE_Log_Msg::msg_ostream (ostream *m)
{
  this->ostream_ = m;
}

inline
const ACE_TCHAR *
ACE_Log_Msg::local_host (void) const
{
  return ACE_Log_Msg::local_host_;
}

inline
pid_t
ACE_Log_Msg::getpid (void) const
{
  if (ACE_Log_Msg::pid_ == -2)
    ACE_Log_Msg::pid_ = ACE_OS::getpid ();

  return ACE_Log_Msg::pid_;
}




# 774 "/usr/local/include/ace/Log_Msg.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 777 "/usr/local/include/ace/Log_Msg.h" 2 3
# 5 "../../Gadgetron.h" 2

# 1 "../../Gadget.h" 1



# 1 "/usr/local/include/ace/Task.h" 1 3
# 15 "/usr/local/include/ace/Task.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Task.h" 2 3

# 1 "/usr/local/include/ace/Service_Object.h" 1 3
# 15 "/usr/local/include/ace/Service_Object.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Service_Object.h" 2 3

# 1 "/usr/local/include/ace/Shared_Object.h" 1 3
# 16 "/usr/local/include/ace/Shared_Object.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Shared_Object.h" 2 3
# 26 "/usr/local/include/ace/Shared_Object.h" 3








class ACE_Shared_Object
{
public:

  ACE_Shared_Object (void);


  virtual ~ACE_Shared_Object (void);


  virtual int init (int argc, ACE_TCHAR *argv[]);


  virtual int fini (void);


  virtual int info (ACE_TCHAR **info_string, size_t length = 0) const;

};




# 1 "/usr/local/include/ace/Shared_Object.inl" 1 3






inline
ACE_Shared_Object::ACE_Shared_Object (void)
{
}


# 58 "/usr/local/include/ace/Shared_Object.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 61 "/usr/local/include/ace/Shared_Object.h" 2 3
# 18 "/usr/local/include/ace/Service_Object.h" 2 3
# 1 "/usr/local/include/ace/Svc_Conf_Tokens.h" 1 3
# 25 "/usr/local/include/ace/Svc_Conf_Tokens.h" 3
# 1 "/usr/local/include/ace/Svc_Conf_Token_Table.h" 1 3
# 43 "/usr/local/include/ace/Svc_Conf_Token_Table.h" 3
   enum ace_yytokentype {
     ACE_DYNAMIC = 258,
     ACE_STATIC = 259,
     ACE_SUSPEND = 260,
     ACE_RESUME = 261,
     ACE_REMOVE = 262,
     ACE_USTREAM = 263,
     ACE_MODULE_T = 264,
     ACE_STREAM_T = 265,
     ACE_SVC_OBJ_T = 266,
     ACE_ACTIVE = 267,
     ACE_INACTIVE = 268,
     ACE_PATHNAME = 269,
     ACE_IDENT = 270,
     ACE_STRING = 271
   };
# 26 "/usr/local/include/ace/Svc_Conf_Tokens.h" 2 3
# 19 "/usr/local/include/ace/Service_Object.h" 2 3





# 1 "/usr/local/include/ace/Event_Handler.h" 1 3
# 15 "/usr/local/include/ace/Event_Handler.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Event_Handler.h" 2 3
# 27 "/usr/local/include/ace/Event_Handler.h" 3



class ACE_Message_Block;
class ACE_Reactor;
class ACE_Reactor_Timer_Interface;
class ACE_Thread_Manager;
class ACE_Process;

typedef unsigned long ACE_Reactor_Mask;
# 48 "/usr/local/include/ace/Event_Handler.h" 3
class ACE_Event_Handler
{
public:
  enum
  {
    LO_PRIORITY = 0,
    HI_PRIORITY = 10,
    NULL_MASK = 0,





    READ_MASK = (1 << 0),
    WRITE_MASK = (1 << 1),
    EXCEPT_MASK = (1 << 2),

    ACCEPT_MASK = (1 << 3),
    CONNECT_MASK = (1 << 4),
    TIMER_MASK = (1 << 5),
    QOS_MASK = (1 << 6),
    GROUP_QOS_MASK = (1 << 7),
    SIGNAL_MASK = (1 << 8),
    ALL_EVENTS_MASK = READ_MASK |
                      WRITE_MASK |
                      EXCEPT_MASK |
                      ACCEPT_MASK |
                      CONNECT_MASK |
                      TIMER_MASK |
                      QOS_MASK |
                      GROUP_QOS_MASK |
                      SIGNAL_MASK,
    RWE_MASK = READ_MASK |
               WRITE_MASK |
               EXCEPT_MASK,
    DONT_CALL = (1 << 9)
  };


  virtual ~ACE_Event_Handler (void);


  virtual ACE_HANDLE get_handle (void) const;


  virtual void set_handle (ACE_HANDLE);






  virtual int priority (void) const;


  virtual void priority (int priority);


  virtual int handle_input (ACE_HANDLE fd = -1);



  virtual int handle_output (ACE_HANDLE fd = -1);


  virtual int handle_exception (ACE_HANDLE fd = -1);







  virtual int handle_timeout (const ACE_Time_Value &current_time,
                              const void *act = 0);


  virtual int handle_exit (ACE_Process *);





  virtual int handle_close (ACE_HANDLE handle,
                            ACE_Reactor_Mask close_mask);



  virtual int handle_signal (int signum, siginfo_t * = 0, ucontext_t * = 0);

  enum
    {

      ACE_EVENT_HANDLER_NOT_RESUMED = -1,


      ACE_REACTOR_RESUMES_HANDLER = 0,

      ACE_APPLICATION_RESUMES_HANDLER
    };
# 159 "/usr/local/include/ace/Event_Handler.h" 3
  virtual int resume_handler (void);

  virtual int handle_qos (ACE_HANDLE = -1);
  virtual int handle_group_qos (ACE_HANDLE = -1);



  virtual void reactor (ACE_Reactor *reactor);


  virtual ACE_Reactor *reactor (void) const;


  virtual ACE_Reactor_Timer_Interface *reactor_timer_interface (void) const;
# 184 "/usr/local/include/ace/Event_Handler.h" 3
  static ACE_THR_FUNC_RETURN read_adapter (void *event_handler);






  static int register_stdin_handler (ACE_Event_Handler *eh,
                                     ACE_Reactor *reactor,
                                     ACE_Thread_Manager *thr_mgr,
                                     int flags = 0x00000040);


  static int remove_stdin_handler (ACE_Reactor *reactor,
                                   ACE_Thread_Manager *thr_mgr);


  typedef long Reference_Count;
# 211 "/usr/local/include/ace/Event_Handler.h" 3
  virtual Reference_Count add_reference (void);
# 222 "/usr/local/include/ace/Event_Handler.h" 3
  virtual Reference_Count remove_reference (void);






  class Policy
  {

  public:


    virtual ~Policy (void);
  };
# 250 "/usr/local/include/ace/Event_Handler.h" 3
  class Reference_Counting_Policy : public Policy
  {

    friend class ACE_Event_Handler;

  public:

    enum Value
      {

        ENABLED,

        DISABLED
      };


    Value value (void) const;


    void value (Value value);

  private:


    Reference_Counting_Policy (Value value);


    Value value_;
   };


  Reference_Counting_Policy &reference_counting_policy (void);

protected:

  ACE_Event_Handler (ACE_Reactor * = 0,
                     int priority = ACE_Event_Handler::LO_PRIORITY);


  typedef ACE_Atomic_Op<ACE_MT_SYNCH::MUTEX, Reference_Count> Atomic_Reference_Count;


  Atomic_Reference_Count reference_count_;

private:


  int priority_;


  ACE_Reactor *reactor_;


  Reference_Counting_Policy reference_counting_policy_;
};
# 314 "/usr/local/include/ace/Event_Handler.h" 3
class ACE_Event_Handler_var
{

public:


  ACE_Event_Handler_var (void);


  ACE_Event_Handler_var (ACE_Event_Handler *p);


  ACE_Event_Handler_var (const ACE_Event_Handler_var &b);


  ~ACE_Event_Handler_var (void);


  ACE_Event_Handler_var &operator= (ACE_Event_Handler *p);


  ACE_Event_Handler_var &operator= (const ACE_Event_Handler_var &b);


  ACE_Event_Handler *operator-> () const;


  ACE_Event_Handler *handler (void) const;


  ACE_Event_Handler *release (void);


  void reset (ACE_Event_Handler *p = 0);

private:


  ACE_Event_Handler *ptr_;
};







class ACE_Notification_Buffer
{
public:
  ACE_Notification_Buffer (void);

  ACE_Notification_Buffer (ACE_Event_Handler *eh,
                           ACE_Reactor_Mask mask);


  ~ACE_Notification_Buffer (void);



  ACE_Event_Handler *eh_;


  ACE_Reactor_Mask mask_;
};




# 1 "/usr/local/include/ace/Event_Handler.inl" 1 3






inline
ACE_Notification_Buffer::~ACE_Notification_Buffer (void)
{
}


# 384 "/usr/local/include/ace/Event_Handler.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 387 "/usr/local/include/ace/Event_Handler.h" 2 3
# 25 "/usr/local/include/ace/Service_Object.h" 2 3
# 1 "/usr/local/include/ace/DLL.h" 1 3
# 15 "/usr/local/include/ace/DLL.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/DLL.h" 2 3
# 24 "/usr/local/include/ace/DLL.h" 3
# 1 "/usr/local/include/ace/os_include/os_dlfcn.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_dlfcn.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_dlfcn.h" 2 3
# 28 "/usr/local/include/ace/os_include/os_dlfcn.h" 3
# 1 "/usr/include/dlfcn.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 26 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/bits/dlfcn.h" 1 3 4
# 58 "/usr/include/bits/dlfcn.h" 3 4
extern "C" {


extern void _dl_mcount_wrapper_check (void *__selfpc) throw ();

}
# 29 "/usr/include/dlfcn.h" 2 3 4
# 45 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;







extern "C" {



extern void *dlopen (__const char *__file, int __mode) throw ();



extern int dlclose (void *__handle) throw () __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      __const char *__restrict __name) throw () __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, __const char *__file, int __mode) throw ();



extern void *dlvsym (void *__restrict __handle,
       __const char *__restrict __name,
       __const char *__restrict __version)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) throw ();





typedef struct
{
  __const char *dli_fname;
  void *dli_fbase;
  __const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (__const void *__address, Dl_info *__info)
     throw () __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (__const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) throw () __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     throw () __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;
  Dl_serpath dls_serpath[1];
} Dl_serinfo;



}
# 29 "/usr/local/include/ace/os_include/os_dlfcn.h" 2 3
# 48 "/usr/local/include/ace/os_include/os_dlfcn.h" 3
extern "C"
{
# 69 "/usr/local/include/ace/os_include/os_dlfcn.h" 3
   typedef void *ACE_SHLIB_HANDLE;
# 97 "/usr/local/include/ace/os_include/os_dlfcn.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 101 "/usr/local/include/ace/os_include/os_dlfcn.h" 2 3
# 25 "/usr/local/include/ace/DLL.h" 2 3



class ACE_DLL_Handle;
# 42 "/usr/local/include/ace/DLL.h" 3
class ACE_DLL
{
public:
# 57 "/usr/local/include/ace/DLL.h" 3
  explicit ACE_DLL (bool close_handle_on_destruction = true);


  ACE_DLL& operator= (const ACE_DLL &rhs);
# 82 "/usr/local/include/ace/DLL.h" 3
  explicit ACE_DLL (const ACE_TCHAR *dll_name,
                    int open_mode = 0x00001 | 0x00100,
                    bool close_handle_on_destruction = true);


  ACE_DLL (const ACE_DLL &);
# 119 "/usr/local/include/ace/DLL.h" 3
  int open (const ACE_TCHAR *dll_name,
            int open_mode = 0x00001 | 0x00100,
            bool close_handle_on_destruction = true);


  int close (void);






  ~ACE_DLL (void);
# 143 "/usr/local/include/ace/DLL.h" 3
  void *symbol (const ACE_TCHAR *symbol_name, int ignore_errors = 0);




  ACE_TCHAR *error (void) const;







  ACE_SHLIB_HANDLE get_handle (int become_owner = 0) const;



  int set_handle (ACE_SHLIB_HANDLE handle,
                  bool close_handle_on_destruction = true);

private:

  int open_i (const ACE_TCHAR *dll_name,
              int open_mode = 0x00001 | 0x00100,
              bool close_handle_on_destruction = true,
              ACE_SHLIB_HANDLE handle = 0);



public:


  int open_mode_;




  ACE_TCHAR *dll_name_;



  bool close_handle_on_destruction_;

  ACE_DLL_Handle *dll_handle_;


  bool error_;

};



# 1 "/usr/local/include/ace/post.h" 1 3
# 196 "/usr/local/include/ace/DLL.h" 2 3
# 26 "/usr/local/include/ace/Service_Object.h" 2 3

# 1 "/usr/local/include/ace/Service_Gestalt.h" 1 3
# 16 "/usr/local/include/ace/Service_Gestalt.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Service_Gestalt.h" 2 3
# 25 "/usr/local/include/ace/Service_Gestalt.h" 3
# 1 "/usr/local/include/ace/Auto_Ptr.h" 1 3
# 18 "/usr/local/include/ace/Auto_Ptr.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/Auto_Ptr.h" 2 3
# 36 "/usr/local/include/ace/Auto_Ptr.h" 3








template <typename X>
class ACE_Auto_Basic_Ptr
{
public:
  typedef X element_type;


  explicit ACE_Auto_Basic_Ptr (X * p = 0) : p_ (p) {}

  ACE_Auto_Basic_Ptr (ACE_Auto_Basic_Ptr<X> & ap);
  ACE_Auto_Basic_Ptr<X> &operator= (ACE_Auto_Basic_Ptr<X> & rhs);
  ~ACE_Auto_Basic_Ptr (void);


  X &operator *() const;
  X *get (void) const;
  X *release (void);
  void reset (X * p = 0);


  void dump (void) const;


  struct __Ace {};

protected:
  X *p_;
};






# 1 "/usr/include/c++/4.4/memory" 1 3
# 47 "/usr/include/c++/4.4/memory" 3
       
# 48 "/usr/include/c++/4.4/memory" 3






# 1 "/usr/include/c++/4.4/bits/stl_raw_storage_iter.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {





  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(&*_M_iter, __element);
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>
      operator++(int)
      {
 raw_storage_iterator<_OutputIterator, _Tp> __tmp = *this;
 ++_M_iter;
 return __tmp;
      }
    };

}
# 55 "/usr/include/c++/4.4/memory" 2 3
# 90 "/usr/include/c++/4.4/memory" 3
# 1 "/usr/include/c++/4.4/backward/auto_ptr.h" 1 3
# 36 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 45 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } ;
# 84 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 110 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 122 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 133 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 150 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 168 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 178 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 ;
 return _M_ptr;
      }
# 208 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 222 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 237 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 258 "/usr/include/c++/4.4/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } ;



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } ;

}
# 91 "/usr/include/c++/4.4/memory" 2 3
# 79 "/usr/local/include/ace/Auto_Ptr.h" 2 3


using std::auto_ptr;
# 105 "/usr/local/include/ace/Auto_Ptr.h" 3








template <typename X>
class ACE_Auto_Ptr : public ACE_Auto_Basic_Ptr <X>
{
public:
  typedef X element_type;


  explicit ACE_Auto_Ptr (X * p = 0) : ACE_Auto_Basic_Ptr<X> (p) {}

  X *operator-> () const;
};
# 133 "/usr/local/include/ace/Auto_Ptr.h" 3
template<typename X>
class ACE_Auto_Basic_Array_Ptr
{
public:
  typedef X element_type;


  explicit ACE_Auto_Basic_Array_Ptr (X * p = 0) : p_ (p) {}

  ACE_Auto_Basic_Array_Ptr (ACE_Auto_Basic_Array_Ptr<X> & ap);
  ACE_Auto_Basic_Array_Ptr<X> &operator= (ACE_Auto_Basic_Array_Ptr<X> & rhs);
  ~ACE_Auto_Basic_Array_Ptr (void);


  X & operator* () const;
  X & operator[] (int i) const;
  X * get (void) const;
  X * release (void);
  void reset (X * p = 0);


  void dump (void) const;


  struct __Ace {};

protected:
  X * p_;
};







template<typename X>
class ACE_Auto_Array_Ptr : public ACE_Auto_Basic_Array_Ptr<X>
{
public:
  typedef X element_type;


  explicit ACE_Auto_Array_Ptr (X *p = 0)
    : ACE_Auto_Basic_Array_Ptr<X> (p) {}

  X *operator-> () const;
};
# 192 "/usr/local/include/ace/Auto_Ptr.h" 3
template<typename AUTO_PTR_TYPE, typename PTR_TYPE>
inline void
ACE_auto_ptr_reset (AUTO_PTR_TYPE & ap,
                    PTR_TYPE * p)
{
# 206 "/usr/local/include/ace/Auto_Ptr.h" 3
  ap.reset (p);

}


# 225 "/usr/local/include/ace/Auto_Ptr.h" 3
# 1 "/usr/local/include/ace/Auto_Ptr.inl" 1 3








template<class X> inline void
ACE_Auto_Basic_Ptr<X>::dump (void) const
{



}

template<class X> inline void
ACE_Auto_Basic_Array_Ptr<X>::dump (void) const
{



}

template<class X> inline
ACE_Auto_Basic_Ptr<X>::ACE_Auto_Basic_Ptr (ACE_Auto_Basic_Ptr<X> &rhs)
  : p_ (rhs.release ())
{
  ;
}

template<class X> inline X *
ACE_Auto_Basic_Ptr<X>::get (void) const
{
  ;
  return this->p_;
}

template<class X> inline X *
ACE_Auto_Basic_Ptr<X>::release (void)
{
  ;
  X *old = this->p_;
  this->p_ = 0;
  return old;
}

template<class X> inline void
ACE_Auto_Basic_Ptr<X>::reset (X *p)
{
  ;
  if (this->get () != p)
    delete this->get ();
  this->p_ = p;
}

template<class X> inline ACE_Auto_Basic_Ptr<X> &
ACE_Auto_Basic_Ptr<X>::operator= (ACE_Auto_Basic_Ptr<X> &rhs)
{
  ;
  if (this != &rhs)
    {
      this->reset (rhs.release ());
    }
  return *this;
}

template<class X> inline
ACE_Auto_Basic_Ptr<X>::~ACE_Auto_Basic_Ptr (void)
{
  ;
  delete this->get ();
}

template<class X> inline X &
ACE_Auto_Basic_Ptr<X>::operator *() const
{
  ;
  return *this->get ();
}
# 95 "/usr/local/include/ace/Auto_Ptr.inl" 3
template<class X> inline X *
ACE_Auto_Ptr<X>::operator-> () const
{
  ;
  return this->get ();
}

template<class X> inline X *
ACE_Auto_Basic_Array_Ptr<X>::get (void) const
{
  ;
  return this->p_;
}

template<class X> inline X *
ACE_Auto_Basic_Array_Ptr<X>::release (void)
{
  ;
  X *old = this->p_;
  this->p_ = 0;
  return old;
}

template<class X> inline void
ACE_Auto_Basic_Array_Ptr<X>::reset (X *p)
{
  ;
  if (this->get () != p)
    delete [] this->get ();
  this->p_ = p;
}

template<class X> inline
ACE_Auto_Basic_Array_Ptr<X>::ACE_Auto_Basic_Array_Ptr (ACE_Auto_Basic_Array_Ptr<X> &rhs)
  : p_ (rhs.release ())
{
  ;
}

template<class X> inline ACE_Auto_Basic_Array_Ptr<X> &
ACE_Auto_Basic_Array_Ptr<X>::operator= (ACE_Auto_Basic_Array_Ptr<X> &rhs)
{
  ;
  if (this != &rhs)
    {
      this->reset (rhs.release ());
    }
  return *this;
}

template<class X> inline
ACE_Auto_Basic_Array_Ptr<X>::~ACE_Auto_Basic_Array_Ptr (void)
{
  ;
  delete [] this->get ();
}

template<class X> inline X &
ACE_Auto_Basic_Array_Ptr<X>::operator *() const
{
  return *this->get ();
}

template<class X> inline X &
ACE_Auto_Basic_Array_Ptr<X>::operator[](int i) const
{
  X *array = this->get ();
  return array[i];
}

template<class X> inline X *
ACE_Auto_Array_Ptr<X>::operator->() const
{
  return this->get ();
}


# 226 "/usr/local/include/ace/Auto_Ptr.h" 2 3



# 1 "/usr/local/include/ace/Auto_Ptr.cpp" 1 3





# 1 "/usr/local/include/ace/Auto_Ptr.h" 1 3
# 7 "/usr/local/include/ace/Auto_Ptr.cpp" 2 3













# 230 "/usr/local/include/ace/Auto_Ptr.h" 2 3
# 241 "/usr/local/include/ace/Auto_Ptr.h" 3
# 1 "/usr/local/include/ace/post.h" 1 3
# 242 "/usr/local/include/ace/Auto_Ptr.h" 2 3
# 26 "/usr/local/include/ace/Service_Gestalt.h" 2 3
# 1 "/usr/local/include/ace/SString.h" 1 3
# 15 "/usr/local/include/ace/SString.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/SString.h" 2 3

# 1 "/usr/local/include/ace/SStringfwd.h" 1 3
# 20 "/usr/local/include/ace/SStringfwd.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/SStringfwd.h" 2 3

# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 23 "/usr/local/include/ace/SStringfwd.h" 2 3
# 34 "/usr/local/include/ace/SStringfwd.h" 3


template <class ACE_CHAR_T> class ACE_String_Base;

typedef wchar_t ACE_WSTRING_TYPE;

typedef ACE_String_Base<char> ACE_CString;
typedef ACE_String_Base<ACE_WSTRING_TYPE> ACE_WString;






typedef ACE_CString ACE_TString;




# 1 "/usr/local/include/ace/post.h" 1 3
# 54 "/usr/local/include/ace/SStringfwd.h" 2 3
# 18 "/usr/local/include/ace/SString.h" 2 3





# 1 "/usr/local/include/ace/String_Base.h" 1 3
# 17 "/usr/local/include/ace/String_Base.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/String_Base.h" 2 3







# 1 "/usr/local/include/ace/String_Base_Const.h" 1 3
# 16 "/usr/local/include/ace/String_Base_Const.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/String_Base_Const.h" 2 3


# 1 "/usr/local/include/ace/Malloc_Base.h" 1 3
# 16 "/usr/local/include/ace/Malloc_Base.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Malloc_Base.h" 2 3
# 28 "/usr/local/include/ace/Malloc_Base.h" 3

# 39 "/usr/local/include/ace/Malloc_Base.h" 3
class ACE_Allocator
{
public:


  typedef size_t size_type;




  static ACE_Allocator *instance (void);



  static ACE_Allocator *instance (ACE_Allocator *);


  static void close_singleton (void);


  ACE_Allocator (void);


  virtual ~ACE_Allocator (void);


  virtual void *malloc (size_type nbytes) = 0;


  virtual void *calloc (size_type nbytes, char initial_value = '\0') = 0;



  virtual void *calloc (size_type n_elem,
                        size_type elem_size,
                        char initial_value = '\0') = 0;


  virtual void free (void *ptr) = 0;


  virtual int remove (void) = 0;
# 93 "/usr/local/include/ace/Malloc_Base.h" 3
  virtual int bind (const char *name, void *pointer, int duplicates = 0) = 0;
# 105 "/usr/local/include/ace/Malloc_Base.h" 3
  virtual int trybind (const char *name, void *&pointer) = 0;



  virtual int find (const char *name, void *&pointer) = 0;


  virtual int find (const char *name) = 0;



  virtual int unbind (const char *name) = 0;



  virtual int unbind (const char *name, void *&pointer) = 0;
# 130 "/usr/local/include/ace/Malloc_Base.h" 3
  virtual int sync (ssize_t len = -1, int flags = 4) = 0;



  virtual int sync (void *addr, size_type len, int flags = 4) = 0;






  virtual int protect (ssize_t len = -1, int prot = (0x1|0x2)) = 0;



  virtual int protect (void *addr, size_type len, int prot = (0x1|0x2)) = 0;







  virtual void dump (void) const = 0;
private:




  static ACE_Allocator *allocator_;


  static int delete_allocator_;
};



# 1 "/usr/local/include/ace/post.h" 1 3
# 168 "/usr/local/include/ace/Malloc_Base.h" 2 3
# 20 "/usr/local/include/ace/String_Base_Const.h" 2 3







# 37 "/usr/local/include/ace/String_Base_Const.h" 3
class ACE_String_Base_Const
{
public:

  typedef ACE_Allocator::size_type size_type;



  static size_type const npos;

};



# 1 "/usr/local/include/ace/post.h" 1 3
# 52 "/usr/local/include/ace/String_Base_Const.h" 2 3
# 26 "/usr/local/include/ace/String_Base.h" 2 3
# 1 "/usr/include/c++/4.4/iterator" 1 3
# 58 "/usr/include/c++/4.4/iterator" 3
       
# 59 "/usr/include/c++/4.4/iterator" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 62 "/usr/include/c++/4.4/iterator" 2 3





# 1 "/usr/include/c++/4.4/bits/stream_iterator.h" 1 3
# 33 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
       
# 34 "/usr/include/c++/4.4/bits/stream_iterator.h" 3



namespace std __attribute__ ((__visibility__ ("default"))) {


  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public:

      istream_iterator()
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(&__s)
      { _M_read(); }

      istream_iterator(const istream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }

      const _Tp&
      operator*() const
      {
 ;


 return _M_value;
      }

      const _Tp*
      operator->() const { return &(operator*()); }

      istream_iterator&
      operator++()
      {
 ;


 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {
 ;


 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

      bool
      _M_equal(const istream_iterator& __x) const
      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }

    private:
      void
      _M_read()
      {
 _M_ok = (_M_stream && *_M_stream) ? true : false;
 if (_M_ok)
   {
     *_M_stream >> _M_value;
     _M_ok = *_M_stream ? true : false;
   }
      }
    };


  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>
    inline bool
    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return __x._M_equal(__y); }


  template <class _Tp, class _CharT, class _Traits, class _Dist>
    inline bool
    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return !__x._M_equal(__y); }
# 145 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}
# 176 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c)
      : _M_stream(&__s), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }



      ostream_iterator&
      operator=(const _Tp& __value)
      {
 ;


 *_M_stream << __value;
 if (_M_string) *_M_stream << _M_string;
 return *this;
      }

      ostream_iterator&
      operator*()
      { return *this; }

      ostream_iterator&
      operator++()
      { return *this; }

      ostream_iterator&
      operator++(int)
      { return *this; }
    };

}
# 68 "/usr/include/c++/4.4/iterator" 2 3
# 27 "/usr/local/include/ace/String_Base.h" 2 3




template <class ACE_CHAR_T>
class ACE_String_Base_Iterator;


template <class ACE_CHAR_T>
class ACE_String_Base_Const_Iterator;
# 66 "/usr/local/include/ace/String_Base.h" 3
template <class ACE_CHAR_T>
class ACE_String_Base : public ACE_String_Base_Const
{
public:
  using ACE_String_Base_Const::size_type;

  friend class ACE_String_Base_Iterator <ACE_CHAR_T>;
  friend class ACE_String_Base_Const_Iterator <ACE_CHAR_T>;


  typedef ACE_String_Base_Iterator <ACE_CHAR_T> ITERATOR;
  typedef ACE_String_Base_Const_Iterator <ACE_CHAR_T> CONST_ITERATOR;


  typedef ACE_String_Base_Iterator <ACE_CHAR_T> iterator;
  typedef ACE_String_Base_Const_Iterator <ACE_CHAR_T> const_iterator;







  ACE_String_Base (ACE_Allocator *the_allocator = 0);
# 106 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base (const ACE_CHAR_T *s,
                   ACE_Allocator *the_allocator = 0,
                   bool release = true);
# 127 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base (const ACE_CHAR_T *s,
                   size_type len,
                   ACE_Allocator *the_allocator = 0,
                   bool release = true);







  ACE_String_Base (const ACE_String_Base < ACE_CHAR_T > &s);
# 147 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base (ACE_CHAR_T c, ACE_Allocator *the_allocator = 0);
# 162 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base (size_type len,
                   ACE_CHAR_T c = 0,
                   ACE_Allocator *the_allocator = 0);




  ~ACE_String_Base (void);
# 178 "/usr/local/include/ace/String_Base.h" 3
  const ACE_CHAR_T & operator[] (size_type slot) const;
# 187 "/usr/local/include/ace/String_Base.h" 3
  ACE_CHAR_T & operator[] (size_type slot);







  ACE_String_Base < ACE_CHAR_T > &operator = (const ACE_CHAR_T * s);







  ACE_String_Base < ACE_CHAR_T > &operator = (const ACE_String_Base < ACE_CHAR_T > &s);







  ACE_String_Base < ACE_CHAR_T > &assign_nocopy (const ACE_String_Base < ACE_CHAR_T > &s);
# 230 "/usr/local/include/ace/String_Base.h" 3
  void set (const ACE_CHAR_T * s, bool release = true);
# 250 "/usr/local/include/ace/String_Base.h" 3
  void set (const ACE_CHAR_T * s, size_type len, bool release);
# 263 "/usr/local/include/ace/String_Base.h" 3
  void clear (bool release = false);
# 283 "/usr/local/include/ace/String_Base.h" 3
  void fast_clear (void);
# 294 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base < ACE_CHAR_T > substring (size_type offset,
                                      size_type length = npos) const;
# 304 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base < ACE_CHAR_T > substr (size_type offset,
                                   size_type length = npos) const;
# 314 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base < ACE_CHAR_T > &operator += (const ACE_String_Base < ACE_CHAR_T > &s);
# 323 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base < ACE_CHAR_T >& operator += (const ACE_CHAR_T* s);
# 332 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base < ACE_CHAR_T >& operator += (const ACE_CHAR_T c);
# 342 "/usr/local/include/ace/String_Base.h" 3
  ACE_String_Base < ACE_CHAR_T >& append (const ACE_CHAR_T* s, size_type slen);






  u_long hash (void) const;






  size_type length (void) const;
# 365 "/usr/local/include/ace/String_Base.h" 3
  size_t capacity (void) const;




  bool is_empty (void) const;






  bool empty (void) const;
# 389 "/usr/local/include/ace/String_Base.h" 3
  ACE_CHAR_T *rep (void) const;
# 400 "/usr/local/include/ace/String_Base.h" 3
  const ACE_CHAR_T *fast_rep (void) const;




  const ACE_CHAR_T *c_str (void) const;
# 415 "/usr/local/include/ace/String_Base.h" 3
  size_type strstr (const ACE_String_Base<ACE_CHAR_T> &s) const;
# 426 "/usr/local/include/ace/String_Base.h" 3
  size_type find (const ACE_String_Base<ACE_CHAR_T> &str, size_type pos = 0) const;
# 437 "/usr/local/include/ace/String_Base.h" 3
  size_type find (const ACE_CHAR_T *s, size_type pos = 0) const;
# 448 "/usr/local/include/ace/String_Base.h" 3
  size_type find (ACE_CHAR_T c, size_type pos = 0) const;
# 459 "/usr/local/include/ace/String_Base.h" 3
  size_type rfind (ACE_CHAR_T c, size_type pos = npos) const;







  bool operator == (const ACE_String_Base<ACE_CHAR_T> &s) const;







  bool operator == (const ACE_CHAR_T *s) const;







  bool operator < (const ACE_String_Base<ACE_CHAR_T> &s) const;







  bool operator > (const ACE_String_Base<ACE_CHAR_T> &s) const;







  bool operator != (const ACE_String_Base<ACE_CHAR_T> &s) const;







  bool operator != (const ACE_CHAR_T *s) const;
# 516 "/usr/local/include/ace/String_Base.h" 3
  int compare (const ACE_String_Base<ACE_CHAR_T> &s) const;




  void dump (void) const;
# 542 "/usr/local/include/ace/String_Base.h" 3
  void resize (size_type len, ACE_CHAR_T c = 0);
  void fast_resize (size_t len);





  void swap (ACE_String_Base<ACE_CHAR_T> & str);

  iterator begin (void);
  const_iterator begin (void) const;

  iterator end (void);
  const_iterator end (void) const;




  struct __Ace {};

protected:



  ACE_Allocator *allocator_;




  size_type len_;





  size_type buf_len_;




  ACE_CHAR_T *rep_;




  bool release_;




  static ACE_CHAR_T NULL_String_;
};
# 606 "/usr/local/include/ace/String_Base.h" 3
template <class ACE_CHAR_T>
class ACE_String_Base_Iterator
{
public:

  typedef std::bidirectional_iterator_tag iterator_category;
  typedef ACE_CHAR_T value_type;
  typedef ACE_CHAR_T & reference;
  typedef ACE_CHAR_T * pointer;
  typedef ptrdiff_t difference_type;






  ACE_String_Base_Iterator (ACE_String_Base <ACE_CHAR_T> & str, int end = 0);






  ACE_String_Base_Iterator (const ACE_String_Base_Iterator <ACE_CHAR_T> & iter);


  ~ACE_String_Base_Iterator (void);







  int done (void) const;
# 649 "/usr/local/include/ace/String_Base.h" 3
  int next (ACE_CHAR_T * & ch) const;







  int advance (void);







  const ACE_String_Base_Iterator <ACE_CHAR_T> & operator = (const ACE_String_Base_Iterator <ACE_CHAR_T> & iter);






  ACE_CHAR_T & operator * (void);




  ACE_String_Base_Iterator <ACE_CHAR_T> & operator ++ (void);




  ACE_String_Base_Iterator <ACE_CHAR_T> operator ++ (int);




  ACE_String_Base_Iterator <ACE_CHAR_T> & operator -- (void);




  ACE_String_Base_Iterator <ACE_CHAR_T> operator -- (int);






  bool operator == (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const;






  bool operator != (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const;

  bool operator < (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const;
  bool operator > (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const;

  bool operator <= (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const;
  bool operator >= (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const;

private:

  ACE_String_Base <ACE_CHAR_T> * str_;


  size_t index_;
};
# 733 "/usr/local/include/ace/String_Base.h" 3
template <class ACE_CHAR_T>
class ACE_String_Base_Const_Iterator
{
public:

  typedef std::bidirectional_iterator_tag iterator_category;
  typedef const ACE_CHAR_T value_type;
  typedef const ACE_CHAR_T & reference;
  typedef const ACE_CHAR_T * pointer;
  typedef ptrdiff_t difference_type;






  ACE_String_Base_Const_Iterator (const ACE_String_Base <ACE_CHAR_T> & str, int end = 0);






  ACE_String_Base_Const_Iterator (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & iter);


  ~ACE_String_Base_Const_Iterator (void);







  int done (void) const;
# 776 "/usr/local/include/ace/String_Base.h" 3
  int next (const ACE_CHAR_T * & ch) const;







  int advance (void);







  const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & operator = (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & iter);






  const ACE_CHAR_T & operator * (void);




  ACE_String_Base_Const_Iterator <ACE_CHAR_T> & operator ++ (void);




  ACE_String_Base_Const_Iterator <ACE_CHAR_T> operator ++ (int);




  ACE_String_Base_Const_Iterator <ACE_CHAR_T> & operator -- (void);




  ACE_String_Base_Const_Iterator <ACE_CHAR_T> operator -- (int);






  bool operator == (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const;






  bool operator != (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const;

  bool operator < (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const;
  bool operator > (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const;

  bool operator <= (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const;
  bool operator >= (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const;

private:

  const ACE_String_Base <ACE_CHAR_T> * str_;


  size_t index_;
};

template < class ACE_CHAR_T >
  ACE_String_Base < ACE_CHAR_T > operator + (const ACE_String_Base < ACE_CHAR_T > &,
                                       const ACE_String_Base < ACE_CHAR_T > &);
template < class ACE_CHAR_T >
  ACE_String_Base < ACE_CHAR_T > operator + (const ACE_String_Base < ACE_CHAR_T > &,
                                       const ACE_CHAR_T *);
template < class ACE_CHAR_T >
  ACE_String_Base < ACE_CHAR_T > operator + (const ACE_CHAR_T *,
                                       const ACE_String_Base < ACE_CHAR_T > &);

template < class ACE_CHAR_T >
  ACE_String_Base < ACE_CHAR_T > operator + (const ACE_String_Base < ACE_CHAR_T > &t,
                                       const ACE_CHAR_T c);

template < class ACE_CHAR_T >
  ACE_String_Base < ACE_CHAR_T > operator + (const ACE_CHAR_T c,
                                       const ACE_String_Base < ACE_CHAR_T > &t);

template <class ACE_CHAR_T>
  bool operator == (const ACE_CHAR_T *s,
                    const ACE_String_Base<ACE_CHAR_T> &t);

template <class ACE_CHAR_T>
  bool operator != (const ACE_CHAR_T *s,
                    const ACE_String_Base<ACE_CHAR_T> &t);




# 1 "/usr/local/include/ace/String_Base.inl" 1 3





# 1 "/usr/local/include/ace/Min_Max.h" 1 3
# 18 "/usr/local/include/ace/Min_Max.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/Min_Max.h" 2 3









template <class T>
inline const T &
ace_min (const T &t1, const T &t2)
{
  return t2 > t1 ? t1 : t2;
}

template <class T>
inline const T &
ace_max (const T &t1, const T &t2)
{
  return t1 > t2 ? t1 : t2;
}

template <class T>
inline const T &
ace_min (const T &t1, const T &t2, const T &t3)
{
  return ace_min (ace_min (t1, t2), t3);
}

template <class T>
inline const T &
ace_max (const T &t1, const T &t2, const T &t3)
{
  return ace_max (ace_max (t1, t2), t3);
}

template <class T>
inline const T &
ace_range (const T &min, const T &max, const T &val)
{
  return ace_min (ace_max (min, val), max);
}







# 1 "/usr/local/include/ace/post.h" 1 3
# 70 "/usr/local/include/ace/Min_Max.h" 2 3
# 7 "/usr/local/include/ace/String_Base.inl" 2 3





template <class ACE_CHAR_T> inline void
ACE_String_Base<ACE_CHAR_T>::dump (void) const
{



}


template <class ACE_CHAR_T> inline ACE_String_Base<ACE_CHAR_T> &
ACE_String_Base<ACE_CHAR_T>::assign_nocopy (const ACE_String_Base<ACE_CHAR_T> &s)
{
  ;
  this->set (s.rep_, s.len_, false);
  return *this;
}

template <class ACE_CHAR_T> inline typename ACE_String_Base<ACE_CHAR_T>::size_type
ACE_String_Base<ACE_CHAR_T>::length (void) const
{
  ;
  return this->len_;
}

template <class ACE_CHAR_T> inline size_t
ACE_String_Base<ACE_CHAR_T>::capacity (void) const
{
  ;
  return this->buf_len_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base<ACE_CHAR_T>::is_empty (void) const
{
  return this->len_ == 0;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base<ACE_CHAR_T>::empty (void) const
{
  return this->is_empty ();
}

template <class ACE_CHAR_T> inline ACE_String_Base<ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::substr (
  typename ACE_String_Base<ACE_CHAR_T>::size_type offset,
  typename ACE_String_Base<ACE_CHAR_T>::size_type length) const
{
  ;
  return this->substring (offset, length);
}



template <class ACE_CHAR_T> inline const ACE_CHAR_T &
ACE_String_Base<ACE_CHAR_T>::operator[] (
  typename ACE_String_Base<ACE_CHAR_T>::size_type slot) const
{
  ;
  return this->rep_[slot];
}



template <class ACE_CHAR_T> inline ACE_CHAR_T &
ACE_String_Base<ACE_CHAR_T>::operator[] (
  typename ACE_String_Base<ACE_CHAR_T>::size_type slot)
{
  ;
  return this->rep_[slot];
}

template <class ACE_CHAR_T> inline const ACE_CHAR_T *
ACE_String_Base<ACE_CHAR_T>::fast_rep (void) const
{
  return this->rep_;
}

template <class ACE_CHAR_T> inline const ACE_CHAR_T *
ACE_String_Base<ACE_CHAR_T>::c_str (void) const
{
  return this->rep_;
}



template <class ACE_CHAR_T> inline bool
ACE_String_Base<ACE_CHAR_T>::operator < (const ACE_String_Base<ACE_CHAR_T> &s) const
{
  ;
  return compare (s) < 0;
}



template <class ACE_CHAR_T> inline bool
ACE_String_Base<ACE_CHAR_T>::operator > (const ACE_String_Base &s) const
{
  ;
  return compare (s) > 0;
}




template <class ACE_CHAR_T> inline bool
ACE_String_Base<ACE_CHAR_T>::operator!= (const ACE_String_Base<ACE_CHAR_T> &s) const
{
  ;
  return !(*this == s);
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base<ACE_CHAR_T>::operator!= (const ACE_CHAR_T *s) const
{
  return !(*this == s);
}

template <class ACE_CHAR_T> inline typename ACE_String_Base<ACE_CHAR_T>::size_type
ACE_String_Base<ACE_CHAR_T>::find (const ACE_String_Base<ACE_CHAR_T>&str,
                             typename ACE_String_Base<ACE_CHAR_T>::size_type pos) const
{
  ;
  return this->find (str.rep_, pos);
}

template <class ACE_CHAR_T> inline typename ACE_String_Base<ACE_CHAR_T>::size_type
ACE_String_Base<ACE_CHAR_T>::strstr (const ACE_String_Base<ACE_CHAR_T> &s) const
{
  ;
  return this->find (s.rep_);
}

template <class ACE_CHAR_T> inline typename ACE_String_Base<ACE_CHAR_T>::iterator
ACE_String_Base<ACE_CHAR_T>::begin (void)
{
  ;
  return iterator (*this);
}

template <class ACE_CHAR_T> inline typename ACE_String_Base<ACE_CHAR_T>::const_iterator
ACE_String_Base<ACE_CHAR_T>::begin (void) const
{
  ;
  return const_iterator (*this);
}

template <class ACE_CHAR_T> inline typename ACE_String_Base<ACE_CHAR_T>::iterator
ACE_String_Base<ACE_CHAR_T>::end (void)
{
  ;
  return iterator (*this, 1);
}

template <class ACE_CHAR_T> inline typename ACE_String_Base<ACE_CHAR_T>::const_iterator
ACE_String_Base<ACE_CHAR_T>::end (void) const
{
  ;
  return const_iterator (*this, 1);
}



template <class ACE_CHAR_T> inline
ACE_String_Base_Iterator <ACE_CHAR_T>::
ACE_String_Base_Iterator (ACE_String_Base <ACE_CHAR_T> & str, int end)
: str_ (&str),
  index_ (0 == end ? 0 : str.length ())
{
  ;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Iterator <ACE_CHAR_T>::
ACE_String_Base_Iterator (const ACE_String_Base_Iterator <ACE_CHAR_T> & iter)
: str_ (iter.str_),
  index_ (iter.index_)
{
  ;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Iterator <ACE_CHAR_T>::~ACE_String_Base_Iterator (void)
{
  ;
}

template <class ACE_CHAR_T> inline
int ACE_String_Base_Iterator <ACE_CHAR_T>::done (void) const
{
  ;

  return this->index_ >= this->str_->length () ? 1 : 0;
}

template <class ACE_CHAR_T> inline
ACE_CHAR_T & ACE_String_Base_Iterator <ACE_CHAR_T>::operator * (void)
{
  ;

  return this->str_->rep_[this->index_];
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Iterator <ACE_CHAR_T> &
ACE_String_Base_Iterator <ACE_CHAR_T>::operator ++ (void)
{
  ;

  if (0 == this->done ())
    ++ this->index_;

  return *this;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Iterator <ACE_CHAR_T>
ACE_String_Base_Iterator <ACE_CHAR_T>::operator ++ (int)
{
  ;

  ACE_String_Base_Iterator <ACE_CHAR_T> temp (*this);

  if (0 == this->done ())
    ++ this->index_;

  return temp;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Iterator <ACE_CHAR_T> &
ACE_String_Base_Iterator <ACE_CHAR_T>::operator -- (void)
{
  ;

  if (0 < this->index_)
    -- this->index_;

  return *this;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Iterator <ACE_CHAR_T>
ACE_String_Base_Iterator <ACE_CHAR_T>::operator -- (int)
{
  ;

  ACE_String_Base_Iterator <ACE_CHAR_T> temp (*this);

  if (0 < this->index_)
    -- this->index_;

  return temp;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Iterator <ACE_CHAR_T>::
operator == (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ == rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Iterator <ACE_CHAR_T>::
operator != (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ != rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Iterator <ACE_CHAR_T>::
operator < (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ < rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Iterator <ACE_CHAR_T>::
operator > (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ > rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Iterator <ACE_CHAR_T>::
operator >= (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ >= rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Iterator <ACE_CHAR_T>::
operator <= (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ <= rhs.index_;
}



template <class ACE_CHAR_T> inline
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
ACE_String_Base_Const_Iterator (const ACE_String_Base <ACE_CHAR_T> & str, int end)
: str_ (&str),
  index_ (0 == end ? 0 : str.length ())
{
  ;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
ACE_String_Base_Const_Iterator (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & iter)
: str_ (iter.str_),
  index_ (iter.index_)
{
  ;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::~ACE_String_Base_Const_Iterator (void)
{
  ;
}

template <class ACE_CHAR_T> inline
int ACE_String_Base_Const_Iterator <ACE_CHAR_T>::done (void) const
{
  ;

  return this->index_ >= this->str_->length () ? 1 : 0;
}

template <class ACE_CHAR_T> inline
const ACE_CHAR_T & ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator * (void)
{
  ;

  return this->str_->rep_[this->index_];
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Const_Iterator <ACE_CHAR_T> &
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator ++ (void)
{
  ;

  if (0 == this->done ())
    ++ this->index_;

  return *this;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Const_Iterator <ACE_CHAR_T>
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator ++ (int)
{
  ;

  ACE_String_Base_Const_Iterator <ACE_CHAR_T> temp (*this);

  if (0 == this->done ())
    ++ this->index_;

  return temp;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Const_Iterator <ACE_CHAR_T> &
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator -- (void)
{
  ;

  if (0 < this->index_)
    -- this->index_;

  return *this;
}

template <class ACE_CHAR_T> inline
ACE_String_Base_Const_Iterator <ACE_CHAR_T>
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::operator -- (int)
{
  ;

  ACE_String_Base_Const_Iterator <ACE_CHAR_T> temp (*this);

  if (0 < this->index_)
    -- this->index_;

  return temp;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
operator == (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ == rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
operator != (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ != rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
operator < (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ < rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
operator > (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ > rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
operator >= (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ >= rhs.index_;
}

template <class ACE_CHAR_T> inline bool
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
operator <= (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs) const
{
  return this->index_ <= rhs.index_;
}



template <class ACE_CHAR_T> inline bool
operator== (const ACE_CHAR_T *s,
            const ACE_String_Base<ACE_CHAR_T> &t)
{
  return t == s;
}

template <class ACE_CHAR_T> inline bool
operator!= (const ACE_CHAR_T *s,
            const ACE_String_Base<ACE_CHAR_T> &t)
{
  return !(t == s);
}


# 879 "/usr/local/include/ace/String_Base.h" 2 3



# 1 "/usr/local/include/ace/String_Base.cpp" 1 3





# 1 "/usr/local/include/ace/ACE.h" 1 3
# 23 "/usr/local/include/ace/ACE.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 24 "/usr/local/include/ace/ACE.h" 2 3







# 1 "/usr/local/include/ace/OS_NS_math.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_math.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_math.h" 2 3







# 1 "/usr/local/include/ace/os_include/os_math.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_math.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_math.h" 2 3
# 35 "/usr/local/include/ace/os_include/os_math.h" 3
extern "C"
{



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 44 "/usr/local/include/ace/os_include/os_math.h" 2 3
# 29 "/usr/local/include/ace/OS_NS_math.h" 2 3
# 45 "/usr/local/include/ace/OS_NS_math.h" 3
inline double ace_log2_helper (double x)
{





  return ::log2 (x);
# 83 "/usr/local/include/ace/OS_NS_math.h" 3
}




namespace ACE_OS
{

  template <typename T>
  T floor (T x)
  {
    return ::floor (x);
  }


  template <typename T>
  T ceil (T x)
  {
    return ::ceil (x);
  }


  extern inline
  double log2 (double x);

}








# 1 "/usr/local/include/ace/OS_NS_math.inl" 1 3






namespace ACE_OS {

  inline double
  log2 (double x)
  {
    return ace_log2_helper (x);
  }

}


# 118 "/usr/local/include/ace/OS_NS_math.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 121 "/usr/local/include/ace/OS_NS_math.h" 2 3
# 32 "/usr/local/include/ace/ACE.h" 2 3
# 1 "/usr/local/include/ace/Flag_Manip.h" 1 3
# 18 "/usr/local/include/ace/Flag_Manip.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/Flag_Manip.h" 2 3
# 34 "/usr/local/include/ace/Flag_Manip.h" 3


namespace ACE
{


  extern int set_flags (ACE_HANDLE handle,
                                   int flags);


  extern int clr_flags (ACE_HANDLE handle,
                                   int flags);


  extern inline int get_flags (ACE_HANDLE handle);
}




# 1 "/usr/local/include/ace/Flag_Manip.inl" 1 3









inline int
ACE::get_flags (ACE_HANDLE handle)
{
  ;
# 22 "/usr/local/include/ace/Flag_Manip.inl" 3
  return ACE_OS::fcntl (handle, 3, 0);

}


# 55 "/usr/local/include/ace/Flag_Manip.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 58 "/usr/local/include/ace/Flag_Manip.h" 2 3
# 33 "/usr/local/include/ace/ACE.h" 2 3
# 1 "/usr/local/include/ace/Handle_Ops.h" 1 3
# 16 "/usr/local/include/ace/Handle_Ops.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Handle_Ops.h" 2 3
# 26 "/usr/local/include/ace/Handle_Ops.h" 3


class ACE_Time_Value;


namespace ACE
{





  extern ACE_HANDLE handle_timed_open (
    ACE_Time_Value *timeout,
    const ACE_TCHAR *name,
    int flags,
    int perms,
    int sa = 0);
}



# 1 "/usr/local/include/ace/post.h" 1 3
# 49 "/usr/local/include/ace/Handle_Ops.h" 2 3
# 34 "/usr/local/include/ace/ACE.h" 2 3
# 1 "/usr/local/include/ace/Lib_Find.h" 1 3
# 16 "/usr/local/include/ace/Lib_Find.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Lib_Find.h" 2 3
# 25 "/usr/local/include/ace/Lib_Find.h" 3


namespace ACE
{
# 41 "/usr/local/include/ace/Lib_Find.h" 3
  extern int ldfind (const ACE_TCHAR* filename,
                                ACE_TCHAR pathname[],
                                size_t maxpathnamelen);






  extern FILE *ldopen (const ACE_TCHAR *filename,
                                  const ACE_TCHAR *type);
# 60 "/usr/local/include/ace/Lib_Find.h" 3
  extern ACE_TCHAR *ldname (const ACE_TCHAR *entry_point);
# 87 "/usr/local/include/ace/Lib_Find.h" 3
  extern int get_temp_dir (ACE_TCHAR *buffer, size_t buffer_len);



  extern ACE_HANDLE open_temp_file (const ACE_TCHAR *name,
                                               int mode,
                                               int perm = 0);







  extern size_t strrepl (char *s, char search, char replace);
# 110 "/usr/local/include/ace/Lib_Find.h" 3
  extern char *strsplit_r (char *s,
                                      const char *token,
                                      char *&next_start);



  extern size_t strrepl (wchar_t *s,
                                    wchar_t search,
                                    wchar_t replace);


  extern wchar_t *strsplit_r (wchar_t *s,
                                         const wchar_t *token,
                                         wchar_t *&next_start);

}



# 1 "/usr/local/include/ace/post.h" 1 3
# 130 "/usr/local/include/ace/Lib_Find.h" 2 3
# 35 "/usr/local/include/ace/ACE.h" 2 3
# 1 "/usr/local/include/ace/Init_ACE.h" 1 3
# 21 "/usr/local/include/ace/Init_ACE.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 22 "/usr/local/include/ace/Init_ACE.h" 2 3









namespace ACE
{
# 42 "/usr/local/include/ace/Init_ACE.h" 3
  extern int init (void);
# 53 "/usr/local/include/ace/Init_ACE.h" 3
  extern int fini (void);
# 63 "/usr/local/include/ace/Init_ACE.h" 3
  extern unsigned int init_fini_count_;
}



# 1 "/usr/local/include/ace/post.h" 1 3
# 69 "/usr/local/include/ace/Init_ACE.h" 2 3
# 36 "/usr/local/include/ace/ACE.h" 2 3
# 1 "/usr/local/include/ace/Sock_Connect.h" 1 3
# 17 "/usr/local/include/ace/Sock_Connect.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Sock_Connect.h" 2 3







# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 26 "/usr/local/include/ace/Sock_Connect.h" 2 3
# 1 "/usr/local/include/ace/os_include/netinet/os_in.h" 1 3
# 20 "/usr/local/include/ace/os_include/netinet/os_in.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/os_include/netinet/os_in.h" 2 3
# 29 "/usr/local/include/ace/os_include/netinet/os_in.h" 3
# 1 "/usr/local/include/ace/os_include/sys/os_socket.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_socket.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_socket.h" 2 3







# 1 "/usr/local/include/ace/os_include/sys/os_uio.h" 1 3
# 19 "/usr/local/include/ace/os_include/sys/os_uio.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/sys/os_uio.h" 2 3
# 31 "/usr/local/include/ace/os_include/sys/os_uio.h" 3
# 1 "/usr/include/sys/uio.h" 1 3 4
# 26 "/usr/include/sys/uio.h" 3 4
extern "C" {


# 1 "/usr/include/bits/uio.h" 1 3 4
# 30 "/usr/include/sys/uio.h" 2 3 4
# 40 "/usr/include/sys/uio.h" 3 4
extern ssize_t readv (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 51 "/usr/include/sys/uio.h" 3 4
extern ssize_t writev (int __fd, __const struct iovec *__iovec, int __count)
  ;
# 66 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv (int __fd, __const struct iovec *__iovec, int __count,
         __off_t __offset) ;
# 78 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev (int __fd, __const struct iovec *__iovec, int __count,
   __off_t __offset) ;
# 104 "/usr/include/sys/uio.h" 3 4
extern ssize_t preadv64 (int __fd, __const struct iovec *__iovec, int __count,
    __off64_t __offset) ;
# 116 "/usr/include/sys/uio.h" 3 4
extern ssize_t pwritev64 (int __fd, __const struct iovec *__iovec, int __count,
     __off64_t __offset) ;



}
# 32 "/usr/local/include/ace/os_include/sys/os_uio.h" 2 3




extern "C"
{
# 60 "/usr/local/include/ace/os_include/sys/os_uio.h" 3
  ssize_t readv_timedwait (ACE_HANDLE handle,
                           const iovec *iov,
                           int iovcnt,
                           struct timespec* timeout);

  ssize_t writev_timedwait (ACE_HANDLE handle,
                            const iovec *iov,
                            int iovcnt,
                            struct timespec *timeout);




}


# 1 "/usr/local/include/ace/post.h" 1 3
# 77 "/usr/local/include/ace/os_include/sys/os_uio.h" 2 3
# 28 "/usr/local/include/ace/os_include/sys/os_socket.h" 2 3


# 1 "/usr/include/sys/socket.h" 1 3 4
# 26 "/usr/include/sys/socket.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 31 "/usr/include/sys/socket.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 34 "/usr/include/sys/socket.h" 2 3 4






# 1 "/usr/include/bits/socket.h" 1 3 4
# 29 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 30 "/usr/include/bits/socket.h" 2 3 4
# 40 "/usr/include/bits/socket.h" 3 4
enum __socket_type
{
  SOCK_STREAM = 1,


  SOCK_DGRAM = 2,


  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,


  SOCK_DCCP = 6,

  SOCK_PACKET = 10,







  SOCK_CLOEXEC = 02000000,


  SOCK_NONBLOCK = 04000


};
# 171 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/bits/sockaddr.h" 1 3 4
# 29 "/usr/include/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 172 "/usr/include/bits/socket.h" 2 3 4


struct sockaddr
  {
    sa_family_t sa_family;
    char sa_data[14];
  };
# 187 "/usr/include/bits/socket.h" 3 4
struct sockaddr_storage
  {
    sa_family_t ss_family;
    unsigned long int __ss_align;
    char __ss_padding[(128 - (2 * sizeof (unsigned long int)))];
  };



enum
  {
    MSG_OOB = 0x01,

    MSG_PEEK = 0x02,

    MSG_DONTROUTE = 0x04,



    MSG_TRYHARD = MSG_DONTROUTE,


    MSG_CTRUNC = 0x08,

    MSG_PROXY = 0x10,

    MSG_TRUNC = 0x20,

    MSG_DONTWAIT = 0x40,

    MSG_EOR = 0x80,

    MSG_WAITALL = 0x100,

    MSG_FIN = 0x200,

    MSG_SYN = 0x400,

    MSG_CONFIRM = 0x800,

    MSG_RST = 0x1000,

    MSG_ERRQUEUE = 0x2000,

    MSG_NOSIGNAL = 0x4000,

    MSG_MORE = 0x8000,

    MSG_WAITFORONE = 0x10000,


    MSG_CMSG_CLOEXEC = 0x40000000



  };




struct msghdr
  {
    void *msg_name;
    socklen_t msg_namelen;

    struct iovec *msg_iov;
    size_t msg_iovlen;

    void *msg_control;
    size_t msg_controllen;




    int msg_flags;
  };



struct mmsghdr
  {
    struct msghdr msg_hdr;
    unsigned int msg_len;
  };



struct cmsghdr
  {
    size_t cmsg_len;




    int cmsg_level;
    int cmsg_type;

    __extension__ unsigned char __cmsg_data [];

  };
# 304 "/usr/include/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,
          struct cmsghdr *__cmsg) throw ();
# 331 "/usr/include/bits/socket.h" 3 4
enum
  {
    SCM_RIGHTS = 0x01


    , SCM_CREDENTIALS = 0x02


  };



struct ucred
{
  pid_t pid;
  uid_t uid;
  gid_t gid;
};
# 377 "/usr/include/bits/socket.h" 3 4
# 1 "/usr/include/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4



# 1 "/usr/include/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 1 "/usr/include/asm/sockios.h" 2 3 4
# 5 "/usr/include/asm-generic/socket.h" 2 3 4
# 1 "/usr/include/asm/socket.h" 2 3 4
# 378 "/usr/include/bits/socket.h" 2 3 4
# 411 "/usr/include/bits/socket.h" 3 4
struct linger
  {
    int l_onoff;
    int l_linger;
  };


extern "C" {






extern int recvmmsg (int __fd, struct mmsghdr *__vmessages,
       unsigned int __vlen, int __flags,
       __const struct timespec *__tmo);

}
# 41 "/usr/include/sys/socket.h" 2 3 4




struct osockaddr
  {
    unsigned short int sa_family;
    unsigned char sa_data[14];
  };




enum
{
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 105 "/usr/include/sys/socket.h" 3 4
extern int socket (int __domain, int __type, int __protocol) throw ();





extern int socketpair (int __domain, int __type, int __protocol,
         int __fds[2]) throw ();


extern int bind (int __fd, __const struct sockaddr * __addr, socklen_t __len)
     throw ();


extern int getsockname (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();
# 129 "/usr/include/sys/socket.h" 3 4
extern int connect (int __fd, __const struct sockaddr * __addr, socklen_t __len);



extern int getpeername (int __fd, struct sockaddr *__restrict __addr,
   socklen_t *__restrict __len) throw ();






extern ssize_t send (int __fd, __const void *__buf, size_t __n, int __flags);






extern ssize_t recv (int __fd, void *__buf, size_t __n, int __flags);






extern ssize_t sendto (int __fd, __const void *__buf, size_t __n,
         int __flags, __const struct sockaddr * __addr,
         socklen_t __addr_len);
# 166 "/usr/include/sys/socket.h" 3 4
extern ssize_t recvfrom (int __fd, void *__restrict __buf, size_t __n,
    int __flags, struct sockaddr *__restrict __addr,
    socklen_t *__restrict __addr_len);







extern ssize_t sendmsg (int __fd, __const struct msghdr *__message,
   int __flags);






extern ssize_t recvmsg (int __fd, struct msghdr *__message, int __flags);





extern int getsockopt (int __fd, int __level, int __optname,
         void *__restrict __optval,
         socklen_t *__restrict __optlen) throw ();




extern int setsockopt (int __fd, int __level, int __optname,
         __const void *__optval, socklen_t __optlen) throw ();





extern int listen (int __fd, int __n) throw ();
# 214 "/usr/include/sys/socket.h" 3 4
extern int accept (int __fd, struct sockaddr *__restrict __addr,
     socklen_t *__restrict __addr_len);






extern int accept4 (int __fd, struct sockaddr *__restrict __addr,
      socklen_t *__restrict __addr_len, int __flags);
# 232 "/usr/include/sys/socket.h" 3 4
extern int shutdown (int __fd, int __how) throw ();




extern int sockatmark (int __fd) throw ();







extern int isfdtype (int __fd, int __fdtype) throw ();
# 254 "/usr/include/sys/socket.h" 3 4
}
# 31 "/usr/local/include/ace/os_include/sys/os_socket.h" 2 3
# 39 "/usr/local/include/ace/os_include/sys/os_socket.h" 3
extern "C"
{
# 238 "/usr/local/include/ace/os_include/sys/os_socket.h" 3
typedef socklen_t ACE_SOCKET_LEN;
# 262 "/usr/local/include/ace/os_include/sys/os_socket.h" 3
  ssize_t recv_timedwait (ACE_HANDLE handle,
                          char *buf,
                          int len,
                          int flags,
                          struct timespec *timeout);

  ssize_t recvmsg_timedwait (ACE_HANDLE handle,
                             struct msghdr *msg,
                             int flags,
                             struct timespec *timeout);

  ssize_t recvfrom_timedwait (ACE_HANDLE handle,
                              char *buf,
                              int len,
                              int flags,
                              struct sockaddr *addr,
                              int *addrlen,
                              struct timespec *timeout);

  ssize_t send_timedwait (ACE_HANDLE handle,
                          const char *buf,
                          int len,
                          int flags,
                          struct timespec *timeout);

  ssize_t sendmsg_timedwait (ACE_HANDLE handle,
                             const struct msghdr *msg,
                             int flags,
                             struct timespec *timeout);

  ssize_t sendto_timedwait (ACE_HANDLE handle,
                            const char *buf,
                            int len,
                            int flags,
                            const struct sockaddr *addr,
                            int addrlen,
                            struct timespec *timeout);




}


# 1 "/usr/local/include/ace/post.h" 1 3
# 307 "/usr/local/include/ace/os_include/sys/os_socket.h" 2 3
# 30 "/usr/local/include/ace/os_include/netinet/os_in.h" 2 3







extern "C"
{



# 1 "/usr/include/netinet/in.h" 1 3 4
# 29 "/usr/include/netinet/in.h" 3 4
extern "C" {


enum
  {
    IPPROTO_IP = 0,

    IPPROTO_HOPOPTS = 0,

    IPPROTO_ICMP = 1,

    IPPROTO_IGMP = 2,

    IPPROTO_IPIP = 4,

    IPPROTO_TCP = 6,

    IPPROTO_EGP = 8,

    IPPROTO_PUP = 12,

    IPPROTO_UDP = 17,

    IPPROTO_IDP = 22,

    IPPROTO_TP = 29,

    IPPROTO_DCCP = 33,

    IPPROTO_IPV6 = 41,

    IPPROTO_ROUTING = 43,

    IPPROTO_FRAGMENT = 44,

    IPPROTO_RSVP = 46,

    IPPROTO_GRE = 47,

    IPPROTO_ESP = 50,

    IPPROTO_AH = 51,

    IPPROTO_ICMPV6 = 58,

    IPPROTO_NONE = 59,

    IPPROTO_DSTOPTS = 60,

    IPPROTO_MTP = 92,

    IPPROTO_ENCAP = 98,

    IPPROTO_PIM = 103,

    IPPROTO_COMP = 108,

    IPPROTO_SCTP = 132,

    IPPROTO_UDPLITE = 136,

    IPPROTO_RAW = 255,

    IPPROTO_MAX
  };



typedef uint16_t in_port_t;


enum
  {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,

    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,


    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,


    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,


    IPPORT_RESERVED = 1024,


    IPPORT_USERRESERVED = 5000
  };



typedef uint32_t in_addr_t;
struct in_addr
  {
    in_addr_t s_addr;
  };
# 198 "/usr/include/netinet/in.h" 3 4
struct in6_addr
  {
    union
      {
 uint8_t __u6_addr8[16];

 uint16_t __u6_addr16[8];
 uint32_t __u6_addr32[4];

      } __in6_u;





  };

extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 225 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in
  {
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;


    unsigned char sin_zero[sizeof (struct sockaddr) -
      (sizeof (unsigned short int)) -
      sizeof (in_port_t) -
      sizeof (struct in_addr)];
  };


struct sockaddr_in6
  {
    sa_family_t sin6_family;
    in_port_t sin6_port;
    uint32_t sin6_flowinfo;
    struct in6_addr sin6_addr;
    uint32_t sin6_scope_id;
  };




struct ip_mreq
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;
  };

struct ip_mreq_source
  {

    struct in_addr imr_multiaddr;


    struct in_addr imr_interface;


    struct in_addr imr_sourceaddr;
  };




struct ipv6_mreq
  {

    struct in6_addr ipv6mr_multiaddr;


    unsigned int ipv6mr_interface;
  };




struct group_req
  {

    uint32_t gr_interface;


    struct sockaddr_storage gr_group;
  };

struct group_source_req
  {

    uint32_t gsr_interface;


    struct sockaddr_storage gsr_group;


    struct sockaddr_storage gsr_source;
  };



struct ip_msfilter
  {

    struct in_addr imsf_multiaddr;


    struct in_addr imsf_interface;


    uint32_t imsf_fmode;


    uint32_t imsf_numsrc;

    struct in_addr imsf_slist[1];
  };





struct group_filter
  {

    uint32_t gf_interface;


    struct sockaddr_storage gf_group;


    uint32_t gf_fmode;


    uint32_t gf_numsrc;

    struct sockaddr_storage gf_slist[1];
};
# 356 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/bits/in.h" 1 3 4
# 98 "/usr/include/bits/in.h" 3 4
struct ip_opts
  {
    struct in_addr ip_dst;
    char ip_opts[40];
  };


struct ip_mreqn
  {
    struct in_addr imr_multiaddr;
    struct in_addr imr_address;
    int imr_ifindex;
  };


struct in_pktinfo
  {
    int ipi_ifindex;
    struct in_addr ipi_spec_dst;
    struct in_addr ipi_addr;
  };
# 357 "/usr/include/netinet/in.h" 2 3 4
# 365 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl (uint32_t __netlong) throw () __attribute__ ((__const__));
extern uint16_t ntohs (uint16_t __netshort)
     throw () __attribute__ ((__const__));
extern uint32_t htonl (uint32_t __hostlong)
     throw () __attribute__ ((__const__));
extern uint16_t htons (uint16_t __hostshort)
     throw () __attribute__ ((__const__));




# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 377 "/usr/include/netinet/in.h" 2 3 4
# 440 "/usr/include/netinet/in.h" 3 4
extern int bindresvport (int __sockfd, struct sockaddr_in *__sock_in) throw ();


extern int bindresvport6 (int __sockfd, struct sockaddr_in6 *__sock_in)
     throw ();
# 471 "/usr/include/netinet/in.h" 3 4
struct in6_pktinfo
  {
    struct in6_addr ipi6_addr;
    unsigned int ipi6_ifindex;
  };


struct ip6_mtuinfo
  {
    struct sockaddr_in6 ip6m_addr;
    uint32_t ip6m_mtu;
  };



extern int inet6_option_space (int __nbytes)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_init (void *__bp, struct cmsghdr **__cmsgp,
         int __type) throw () __attribute__ ((__deprecated__));
extern int inet6_option_append (struct cmsghdr *__cmsg,
    __const uint8_t *__typep, int __multx,
    int __plusy) throw () __attribute__ ((__deprecated__));
extern uint8_t *inet6_option_alloc (struct cmsghdr *__cmsg, int __datalen,
        int __multx, int __plusy)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_next (__const struct cmsghdr *__cmsg,
         uint8_t **__tptrp)
     throw () __attribute__ ((__deprecated__));
extern int inet6_option_find (__const struct cmsghdr *__cmsg,
         uint8_t **__tptrp, int __type)
     throw () __attribute__ ((__deprecated__));



extern int inet6_opt_init (void *__extbuf, socklen_t __extlen) throw ();
extern int inet6_opt_append (void *__extbuf, socklen_t __extlen, int __offset,
        uint8_t __type, socklen_t __len, uint8_t __align,
        void **__databufp) throw ();
extern int inet6_opt_finish (void *__extbuf, socklen_t __extlen, int __offset)
     throw ();
extern int inet6_opt_set_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();
extern int inet6_opt_next (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t *__typep, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_find (void *__extbuf, socklen_t __extlen, int __offset,
      uint8_t __type, socklen_t *__lenp,
      void **__databufp) throw ();
extern int inet6_opt_get_val (void *__databuf, int __offset, void *__val,
         socklen_t __vallen) throw ();



extern socklen_t inet6_rth_space (int __type, int __segments) throw ();
extern void *inet6_rth_init (void *__bp, socklen_t __bp_len, int __type,
        int __segments) throw ();
extern int inet6_rth_add (void *__bp, __const struct in6_addr *__addr) throw ();
extern int inet6_rth_reverse (__const void *__in, void *__out) throw ();
extern int inet6_rth_segments (__const void *__bp) throw ();
extern struct in6_addr *inet6_rth_getaddr (__const void *__bp, int __index)
     throw ();





extern int getipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t *__fmode,
    uint32_t *__numsrc, struct in_addr *__slist)
     throw ();


extern int setipv4sourcefilter (int __s, struct in_addr __interface_addr,
    struct in_addr __group, uint32_t __fmode,
    uint32_t __numsrc,
    __const struct in_addr *__slist)
     throw ();



extern int getsourcefilter (int __s, uint32_t __interface_addr,
       __const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t *__fmode,
       uint32_t *__numsrc,
       struct sockaddr_storage *__slist) throw ();


extern int setsourcefilter (int __s, uint32_t __interface_addr,
       __const struct sockaddr *__group,
       socklen_t __grouplen, uint32_t __fmode,
       uint32_t __numsrc,
       __const struct sockaddr_storage *__slist) throw ();


}
# 43 "/usr/local/include/ace/os_include/netinet/os_in.h" 2 3
# 175 "/usr/local/include/ace/os_include/netinet/os_in.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 179 "/usr/local/include/ace/os_include/netinet/os_in.h" 2 3
# 27 "/usr/local/include/ace/Sock_Connect.h" 2 3




class ACE_INET_Addr;

namespace ACE
{



  extern int bind_port (ACE_HANDLE handle,
                                   ACE_UINT32 ip_addr = ((in_addr_t) 0x00000000),
                                   int address_family = 0);
# 50 "/usr/local/include/ace/Sock_Connect.h" 3
  extern int get_bcast_addr (
    ACE_UINT32 &bcast_addr,
    const ACE_TCHAR *hostname = 0,
    ACE_UINT32 host_addr = 0,
    ACE_HANDLE handle = -1);


  extern int get_fqdn (ACE_INET_Addr const & addr,
                                  char hostname[],
                                  size_t len);






  extern int get_ip_interfaces (size_t &count,
                                           ACE_INET_Addr *&addr_array);






  extern int count_interfaces (ACE_HANDLE handle,
                                          size_t &how_many);



  extern ACE_HANDLE get_handle (void);
# 90 "/usr/local/include/ace/Sock_Connect.h" 3
  extern bool ipv4_enabled (void);
# 100 "/usr/local/include/ace/Sock_Connect.h" 3
  extern int ipv6_enabled (void);
}



# 1 "/usr/local/include/ace/post.h" 1 3
# 106 "/usr/local/include/ace/Sock_Connect.h" 2 3
# 37 "/usr/local/include/ace/ACE.h" 2 3
# 45 "/usr/local/include/ace/ACE.h" 3



class ACE_Time_Value;
class ACE_Message_Block;
class ACE_Handle_Set;
# 61 "/usr/local/include/ace/ACE.h" 3
namespace ACE
{


  extern u_int major_version (void);


  extern u_int minor_version (void);



  extern u_int beta_version (void);



  extern const ACE_TCHAR * compiler_name (void);


  extern u_int compiler_major_version (void);


  extern u_int compiler_minor_version (void);


  extern u_int compiler_beta_version (void);



  extern int out_of_handles (int error);
# 98 "/usr/local/include/ace/ACE.h" 3
  extern bool wild_match(const char* s, const char* pattern,
    bool case_sensitive = true, bool character_classes = false);
# 150 "/usr/local/include/ace/ACE.h" 3
  extern ssize_t recv (ACE_HANDLE handle,
                                  void *buf,
                                  size_t len,
                                  int flags,
                                  const ACE_Time_Value *timeout = 0);
# 166 "/usr/local/include/ace/ACE.h" 3
  extern ssize_t recv (ACE_HANDLE handle,
                                  void *buf,
                                  size_t len,
                                  const ACE_Time_Value *timeout = 0);

  extern ssize_t recvmsg (ACE_HANDLE handle,
                                     struct msghdr *msg,
                                     int flags,
                                     const ACE_Time_Value *timeout = 0);

  extern ssize_t recvfrom (ACE_HANDLE handle,
                                      char *buf,
                                      int len,
                                      int flags,
                                      struct sockaddr *addr,
                                      int *addrlen,
                                      const ACE_Time_Value *timeout = 0);

  extern inline
  ssize_t recv_n (ACE_HANDLE handle,
                  void *buf,
                  size_t len,
                  int flags,
                  const ACE_Time_Value *timeout = 0,
                  size_t *bytes_transferred = 0);
# 204 "/usr/local/include/ace/ACE.h" 3
  extern inline
  ssize_t recv_n (ACE_HANDLE handle,
                  void *buf,
                  size_t len,
                  const ACE_Time_Value *timeout = 0,
                  size_t *bytes_transferred = 0);
# 221 "/usr/local/include/ace/ACE.h" 3
  extern ssize_t recv (ACE_HANDLE handle, size_t n, ...);

  extern ssize_t recvv (ACE_HANDLE handle,
                                   iovec *iov,
                                   int iovcnt,
                                   const ACE_Time_Value *timeout = 0);

  extern inline
  ssize_t recvv_n (ACE_HANDLE handle,
                   iovec *iov,
                   int iovcnt,
                   const ACE_Time_Value *timeout = 0,
                   size_t *bytes_transferred = 0);

  extern ssize_t recv_n (ACE_HANDLE handle,
                                    ACE_Message_Block *message_block,
                                    const ACE_Time_Value *timeout = 0,
                                    size_t *bytes_transferred = 0);

  extern ssize_t send (ACE_HANDLE handle,
                                  const void *buf,
                                  size_t len,
                                  int flags,
                                  const ACE_Time_Value *timeout = 0);
# 256 "/usr/local/include/ace/ACE.h" 3
  extern ssize_t send (ACE_HANDLE handle,
                                  const void *buf,
                                  size_t len,
                                  const ACE_Time_Value *timeout = 0);

  extern ssize_t sendmsg (ACE_HANDLE handle,
                                     const struct msghdr *msg,
                                     int flags,
                                     const ACE_Time_Value *timeout = 0);

  extern ssize_t sendto (ACE_HANDLE handle,
                                    const char *buf,
                                    int len,
                                    int flags,
                                    const struct sockaddr *addr,
                                    int addrlen,
                                    const ACE_Time_Value *timeout = 0);

  extern inline
  ssize_t send_n (ACE_HANDLE handle,
                  const void *buf,
                  size_t len,
                  int flags,
                  const ACE_Time_Value *timeout = 0,
                  size_t *bytes_transferred = 0);
# 294 "/usr/local/include/ace/ACE.h" 3
  extern inline
  ssize_t send_n (ACE_HANDLE handle,
                  const void *buf,
                  size_t len,
                  const ACE_Time_Value *timeout = 0,
                  size_t *bytes_transferred = 0);


  extern ssize_t send (ACE_HANDLE handle, size_t n, ...);

  extern ssize_t sendv (ACE_HANDLE handle,
                                   const iovec *iov,
                                   int iovcnt,
                                   const ACE_Time_Value *timeout = 0);

  extern inline
  ssize_t sendv_n (ACE_HANDLE handle,
                   const iovec *iov,
                   int iovcnt,
                   const ACE_Time_Value *timeout = 0,
                   size_t *bytes_transferred = 0);




  extern ssize_t send_n (ACE_HANDLE handle,
                                    const ACE_Message_Block *message_block,
                                    const ACE_Time_Value *timeout = 0,
                                    size_t *bytes_transferred = 0);



  extern inline
  ssize_t read_n (ACE_HANDLE handle,
                  void *buf,
                  size_t len,
                  size_t *bytes_transferred = 0);

  extern inline
  ssize_t write_n (ACE_HANDLE handle,
                   const void *buf,
                   size_t len,
                   size_t *bytes_transferred = 0);




  extern ssize_t write_n (ACE_HANDLE handle,
                                     const ACE_Message_Block *message_block,
                                     size_t *bytes_transferred = 0);

  extern ssize_t readv_n (ACE_HANDLE handle,
                                     iovec *iov,
                                     int iovcnt,
                                     size_t *bytes_transferred = 0);

  extern ssize_t writev_n (ACE_HANDLE handle,
                                      const iovec *iov,
                                      int iovcnt,
                                      size_t *bytes_transferred = 0);







  extern int handle_timed_accept (ACE_HANDLE listener,
                                             ACE_Time_Value *timeout,
                                             bool restart);







  extern ACE_HANDLE handle_timed_complete (
    ACE_HANDLE listener,
    const ACE_Time_Value *timeout,
    int is_tli = 0);







  extern int set_handle_limit (int new_limit = -1,
                                          int increase_limit_only = 0);






  extern int max_handles (void);
# 399 "/usr/local/include/ace/ACE.h" 3
  extern ACE_TCHAR *strenvdup (const ACE_TCHAR *str);



  extern const char *strend (const char *s);




  extern char *strnew (const char *s);


  extern inline void strdelete (char *s);



  extern char *strndup (const char *str, size_t n);



  extern char *strnnew (const char *str, size_t n);


  extern inline bool isdotdir (const char *s);


  extern const wchar_t *strend (const wchar_t *s);

  extern wchar_t *strnew (const wchar_t *s);

  extern inline void strdelete (wchar_t *s);

  extern wchar_t *strndup (const wchar_t *str, size_t n);

  extern wchar_t *strnnew (const wchar_t *str, size_t n);

  extern inline bool isdotdir (const wchar_t *s);
# 455 "/usr/local/include/ace/ACE.h" 3
  extern const ACE_TCHAR *execname (const ACE_TCHAR *pathname);






  extern const ACE_TCHAR *basename (const ACE_TCHAR *pathname,
                                               ACE_TCHAR delim =
                                               '/');







  extern const ACE_TCHAR *dirname (const ACE_TCHAR *pathname,
                                              ACE_TCHAR delim =
                                              '/');
# 487 "/usr/local/include/ace/ACE.h" 3
  extern ACE_TCHAR *timestamp (const ACE_Time_Value& time_value,
                                          ACE_TCHAR date_and_time[],
                                          size_t time_len,
                                          bool return_pointer_to_first_digit = false);
# 503 "/usr/local/include/ace/ACE.h" 3
  extern ACE_TCHAR *timestamp (ACE_TCHAR date_and_time[],
                                          size_t time_len,
                                          bool return_pointer_to_first_digit = false);
# 516 "/usr/local/include/ace/ACE.h" 3
  extern pid_t fork (
    const ACE_TCHAR *program_name = "<unknown>",
    int avoid_zombies = 0);







  extern int daemonize (
    const ACE_TCHAR pathname[] = "/",
    bool close_all_handles = true,
    const ACE_TCHAR program_name[] = "<unknown>");



  extern size_t round_to_pagesize (size_t len);


  extern size_t round_to_allocation_granularity (size_t len);




  extern size_t format_hexdump (const char *buffer, size_t size,
                                           ACE_TCHAR *obuf, size_t obuf_sz);


  extern u_long hash_pjw (const char *str);


  extern u_long hash_pjw (const char *str, size_t len);



  extern u_long hash_pjw (const wchar_t *str);


  extern u_long hash_pjw (const wchar_t *str, size_t len);



  extern ACE_UINT16 crc_ccitt(const char *str);


  extern ACE_UINT16 crc_ccitt(const void *buf, size_t len,
           ACE_UINT16 crc = 0);


  extern ACE_UINT16 crc_ccitt(const iovec *iov, int len,
           ACE_UINT16 crc = 0);


  extern ACE_UINT32 crc32 (const char *str);


  extern ACE_UINT32 crc32 (const void *buf, size_t len,
              ACE_UINT32 crc = 0);



  extern ACE_UINT32 crc32 (const iovec *iov, int len,
              ACE_UINT32 crc = 0);


  extern u_long gcd (u_long x, u_long y);


  extern u_long minimum_frame_size (u_long period1, u_long period2);
# 595 "/usr/local/include/ace/ACE.h" 3
  extern u_long is_prime (const u_long n,
                                     const u_long min_factor,
                                     const u_long max_factor);



  extern int map_errno (int error);




  extern const ACE_TCHAR * sock_error (int error);




  extern bool is_sock_error (int error);






  extern int process_active (pid_t pid);
# 628 "/usr/local/include/ace/ACE.h" 3
  extern int terminate_process (pid_t pid);
# 638 "/usr/local/include/ace/ACE.h" 3
  extern inline void unique_name (const void *object,
                                                  ACE_TCHAR *name,
                                                  size_t length);


  extern inline u_long log2 (u_long num);


  extern ACE_TCHAR nibble2hex (u_int n);


  extern inline u_char hex2byte (ACE_TCHAR c);


  extern bool debug (void);
  extern void debug (bool onoff);


  extern int select (int width,
                                ACE_Handle_Set *readfds,
                                ACE_Handle_Set *writefds = 0,
                                ACE_Handle_Set *exceptfds = 0,
                                const ACE_Time_Value *timeout = 0);



  extern int select (int width,
                                ACE_Handle_Set &readfds,
                                const ACE_Time_Value *timeout = 0);


  extern inline
  int handle_read_ready (ACE_HANDLE handle,
                         const ACE_Time_Value *timeout);


  extern inline
  int handle_write_ready (ACE_HANDLE handle,
                          const ACE_Time_Value *timeout);


  extern inline
  int handle_exception_ready (ACE_HANDLE handle,
                              const ACE_Time_Value *timeout);


  extern int handle_ready (ACE_HANDLE handle,
                                      const ACE_Time_Value *timeout,
                                      int read_ready,
                                      int write_ready,
                                      int exception_ready);




  extern int enter_recv_timedwait (ACE_HANDLE handle,
                                              const ACE_Time_Value *timeout,
                                              int &val);




  extern int enter_send_timedwait (ACE_HANDLE handle,
                                              const ACE_Time_Value* timeout,
                                              int &val);



  extern void record_and_set_non_blocking_mode (ACE_HANDLE handle,
                                                           int &val);



  extern void restore_non_blocking_mode (ACE_HANDLE handle,
                                                    int val);
# 722 "/usr/local/include/ace/ACE.h" 3
  extern inline ssize_t recv_i (ACE_HANDLE handle,
                                                void *buf,
                                                size_t len);

  extern ssize_t recv_n_i (ACE_HANDLE handle,
                                      void *buf,
                                      size_t len,
                                      int flags,
                                      size_t *bytes_transferred);

  extern ssize_t recv_n_i (ACE_HANDLE handle,
                                      void *buf,
                                      size_t len,
                                      int flags,
                                      const ACE_Time_Value *timeout,
                                      size_t *bytes_transferred);
# 756 "/usr/local/include/ace/ACE.h" 3
  extern ssize_t recv_n_i (ACE_HANDLE handle,
                                      void *buf,
                                      size_t len,
                                      size_t *bytes_transferred);

  extern ssize_t recv_n_i (ACE_HANDLE handle,
                                      void *buf,
                                      size_t len,
                                      const ACE_Time_Value *timeout,
                                      size_t *bytes_transferred);

  extern ssize_t recvv_n_i (ACE_HANDLE handle,
                                       iovec *iov,
                                       int iovcnt,
                                       size_t *bytes_transferred);

  extern ssize_t recvv_n_i (ACE_HANDLE handle,
                                       iovec *iov,
                                       int iovcnt,
                                       const ACE_Time_Value *timeout,
                                       size_t *bytes_transferred);





  extern inline ssize_t send_i (ACE_HANDLE handle,
                                                const void *buf,
                                                size_t len);

  extern ssize_t send_n_i (ACE_HANDLE handle,
                                      const void *buf,
                                      size_t len,
                                      int flags,
                                      size_t *bytes_transferred);

  extern ssize_t send_n_i (ACE_HANDLE handle,
                                      const void *buf,
                                      size_t len,
                                      int flags,
                                      const ACE_Time_Value *timeout,
                                      size_t *bytes_transferred);
# 816 "/usr/local/include/ace/ACE.h" 3
  extern ssize_t send_n_i (ACE_HANDLE handle,
                                      const void *buf,
                                      size_t len,
                                      size_t *bytes_transferred);

  extern ssize_t send_n_i (ACE_HANDLE handle,
                                      const void *buf,
                                      size_t len,
                                      const ACE_Time_Value *timeout,
                                      size_t *bytes_transferred);

  extern ssize_t sendv_n_i (ACE_HANDLE handle,
                                       const iovec *iov,
                                       int iovcnt,
                                       size_t *bytes_transferred);

  extern ssize_t sendv_n_i (ACE_HANDLE handle,
                                       const iovec *iov,
                                       int iovcnt,
                                       const ACE_Time_Value *timeout,
                                       size_t *bytes_transferred);

}





# 1 "/usr/local/include/ace/ACE.inl" 1 3






# 1 "/usr/local/include/ace/OS_NS_ctype.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_ctype.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_ctype.h" 2 3
# 37 "/usr/local/include/ace/OS_NS_ctype.h" 3
# 1 "/usr/local/include/ace/os_include/os_wctype.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_wctype.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_wctype.h" 2 3
# 36 "/usr/local/include/ace/os_include/os_wctype.h" 3
extern "C"
{



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 45 "/usr/local/include/ace/os_include/os_wctype.h" 2 3
# 38 "/usr/local/include/ace/OS_NS_ctype.h" 2 3




namespace ACE_OS {
# 57 "/usr/local/include/ace/OS_NS_ctype.h" 3
  extern inline
  int ace_isalnum (ACE_TCHAR c);


  extern inline
  int ace_isalpha (ACE_TCHAR c);


  extern inline
  int ace_isblank (ACE_TCHAR c);


  extern inline
  int ace_isascii (ACE_TCHAR c);


  extern inline
  int ace_iscntrl (ACE_TCHAR c);


  extern inline
  int ace_isdigit (ACE_TCHAR c);


  extern inline
  int ace_isgraph (ACE_TCHAR c);


  extern inline
  int ace_islower (ACE_TCHAR c);


  extern inline
  int ace_isprint (ACE_TCHAR c);


  extern inline
  int ace_ispunct (ACE_TCHAR c);


  extern inline
  int ace_isspace (ACE_TCHAR c);


  extern inline
  int ace_isupper (ACE_TCHAR c);


  extern inline
  int ace_isxdigit (ACE_TCHAR c);


  extern inline
  int ace_tolower (int c);



  extern inline
  wint_t ace_towlower (wint_t c);



  extern inline
  int ace_toupper (int c);



  extern inline
  wint_t ace_towupper (wint_t c);



  extern inline
  int ace_isctype (int c, ctype_t desc);


}








# 1 "/usr/local/include/ace/OS_NS_ctype.inl" 1 3
# 13 "/usr/local/include/ace/OS_NS_ctype.inl" 3


inline int
ACE_OS::ace_isalnum (ACE_TCHAR c)
{
# 27 "/usr/local/include/ace/OS_NS_ctype.inl" 3
  return isalnum ((unsigned char) c);

}

inline int
ACE_OS::ace_isascii (ACE_TCHAR c)
{
# 47 "/usr/local/include/ace/OS_NS_ctype.inl" 3
  return isascii ((unsigned char) c);


}

inline int
ACE_OS::ace_isblank (ACE_TCHAR c)
{
# 68 "/usr/local/include/ace/OS_NS_ctype.inl" 3
  return isblank ((unsigned char) c);

}

inline int
ACE_OS::ace_isalpha (ACE_TCHAR c)
{



  return isalpha ((unsigned char) c);

}

inline int
ACE_OS::ace_iscntrl (ACE_TCHAR c)
{



  return iscntrl ((unsigned char) c);

}

inline int
ACE_OS::ace_isdigit (ACE_TCHAR c)
{



  return isdigit ((unsigned char) c);

}

inline int
ACE_OS::ace_isgraph (ACE_TCHAR c)
{



  return isgraph ((unsigned char) c);

}

inline int
ACE_OS::ace_islower (ACE_TCHAR c)
{



  return islower ((unsigned char) c);

}

inline int
ACE_OS::ace_isprint (ACE_TCHAR c)
{
# 138 "/usr/local/include/ace/OS_NS_ctype.inl" 3
  return isprint ((unsigned char) c);

}

inline int
ACE_OS::ace_ispunct (ACE_TCHAR c)
{



  return ispunct ((unsigned char) c);

}

inline int
ACE_OS::ace_isspace (ACE_TCHAR c)
{



  return isspace ((unsigned char) c);

}

inline int
ACE_OS::ace_isupper (ACE_TCHAR c)
{



  return isupper ((unsigned char) c);

}

inline int
ACE_OS::ace_isxdigit (ACE_TCHAR c)
{



  return isxdigit ((unsigned char) c);

}

inline int
ACE_OS::ace_tolower (int c)
{
  return tolower (c);
}


inline wint_t
ACE_OS::ace_towlower (wint_t c)
{






  return towlower (c);

}


inline int
ACE_OS::ace_toupper (int c)
{
  return toupper (c);
}


inline wint_t
ACE_OS::ace_towupper (wint_t c)
{
  return towupper (c);
}


inline int
ACE_OS::ace_isctype(int c, ctype_t desc)
{



  return isctype (c, desc);





}


# 143 "/usr/local/include/ace/OS_NS_ctype.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 146 "/usr/local/include/ace/OS_NS_ctype.h" 2 3
# 8 "/usr/local/include/ace/ACE.inl" 2 3
# 1 "/usr/local/include/ace/OS_NS_sys_socket.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_sys_socket.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_sys_socket.h" 2 3
# 29 "/usr/local/include/ace/OS_NS_sys_socket.h" 3
# 1 "/usr/local/include/ace/os_include/net/os_if.h" 1 3
# 19 "/usr/local/include/ace/os_include/net/os_if.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/net/os_if.h" 2 3
# 28 "/usr/local/include/ace/os_include/net/os_if.h" 3
# 1 "/usr/include/net/if.h" 1 3 4
# 34 "/usr/include/net/if.h" 3 4
struct if_nameindex
  {
    unsigned int if_index;
    char *if_name;
  };




enum
  {
    IFF_UP = 0x1,

    IFF_BROADCAST = 0x2,

    IFF_DEBUG = 0x4,

    IFF_LOOPBACK = 0x8,

    IFF_POINTOPOINT = 0x10,

    IFF_NOTRAILERS = 0x20,

    IFF_RUNNING = 0x40,

    IFF_NOARP = 0x80,

    IFF_PROMISC = 0x100,



    IFF_ALLMULTI = 0x200,


    IFF_MASTER = 0x400,

    IFF_SLAVE = 0x800,


    IFF_MULTICAST = 0x1000,


    IFF_PORTSEL = 0x2000,

    IFF_AUTOMEDIA = 0x4000,

    IFF_DYNAMIC = 0x8000

  };






struct ifaddr
  {
    struct sockaddr ifa_addr;
    union
      {
 struct sockaddr ifu_broadaddr;
 struct sockaddr ifu_dstaddr;
      } ifa_ifu;
    struct iface *ifa_ifp;
    struct ifaddr *ifa_next;
  };
# 112 "/usr/include/net/if.h" 3 4
struct ifmap
  {
    unsigned long int mem_start;
    unsigned long int mem_end;
    unsigned short int base_addr;
    unsigned char irq;
    unsigned char dma;
    unsigned char port;

  };





struct ifreq
  {


    union
      {
 char ifrn_name[16];
      } ifr_ifrn;

    union
      {
 struct sockaddr ifru_addr;
 struct sockaddr ifru_dstaddr;
 struct sockaddr ifru_broadaddr;
 struct sockaddr ifru_netmask;
 struct sockaddr ifru_hwaddr;
 short int ifru_flags;
 int ifru_ivalue;
 int ifru_mtu;
 struct ifmap ifru_map;
 char ifru_slave[16];
 char ifru_newname[16];
 __caddr_t ifru_data;
      } ifr_ifru;
  };
# 177 "/usr/include/net/if.h" 3 4
struct ifconf
  {
    int ifc_len;
    union
      {
 __caddr_t ifcu_buf;
 struct ifreq *ifcu_req;
      } ifc_ifcu;
  };





extern "C" {


extern unsigned int if_nametoindex (__const char *__ifname) throw ();
extern char *if_indextoname (unsigned int __ifindex, char *__ifname) throw ();


extern struct if_nameindex *if_nameindex (void) throw ();


extern void if_freenameindex (struct if_nameindex *__ptr) throw ();

}
# 29 "/usr/local/include/ace/os_include/net/os_if.h" 2 3
# 46 "/usr/local/include/ace/os_include/net/os_if.h" 3
extern "C"
{
# 108 "/usr/local/include/ace/os_include/net/os_if.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 112 "/usr/local/include/ace/os_include/net/os_if.h" 2 3
# 30 "/usr/local/include/ace/OS_NS_sys_socket.h" 2 3
# 1 "/usr/local/include/ace/OS_NS_stropts.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_stropts.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_stropts.h" 2 3
# 32 "/usr/local/include/ace/OS_NS_stropts.h" 3
# 1 "/usr/local/include/ace/os_include/os_stropts.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_stropts.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_stropts.h" 2 3
# 36 "/usr/local/include/ace/os_include/os_stropts.h" 3
# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 24 "/usr/include/sys/ioctl.h" 3 4
extern "C" {


# 1 "/usr/include/bits/ioctls.h" 1 3 4
# 24 "/usr/include/bits/ioctls.h" 3 4
# 1 "/usr/include/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4



# 1 "/usr/include/linux/ioctl.h" 1 3 4



# 1 "/usr/include/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 1 "/usr/include/asm/ioctl.h" 2 3 4
# 5 "/usr/include/linux/ioctl.h" 2 3 4
# 5 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 1 "/usr/include/asm/ioctls.h" 2 3 4
# 25 "/usr/include/bits/ioctls.h" 2 3 4
# 28 "/usr/include/sys/ioctl.h" 2 3 4


# 1 "/usr/include/bits/ioctl-types.h" 1 3 4
# 25 "/usr/include/bits/ioctl-types.h" 3 4
# 1 "/usr/include/asm/ioctls.h" 1 3 4
# 26 "/usr/include/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 31 "/usr/include/sys/ioctl.h" 2 3 4






# 1 "/usr/include/sys/ttydefaults.h" 1 3 4
# 38 "/usr/include/sys/ioctl.h" 2 3 4




extern int ioctl (int __fd, unsigned long int __request, ...) throw ();

}
# 37 "/usr/local/include/ace/os_include/os_stropts.h" 2 3
# 58 "/usr/local/include/ace/os_include/os_stropts.h" 3
# 1 "/usr/include/stropts.h" 1 3 4
# 24 "/usr/include/stropts.h" 3 4
# 1 "/usr/include/bits/xtitypes.h" 1 3 4
# 30 "/usr/include/bits/xtitypes.h" 3 4
typedef int __t_scalar_t;
typedef unsigned int __t_uscalar_t;
# 25 "/usr/include/stropts.h" 2 3 4
# 36 "/usr/include/stropts.h" 3 4
typedef __t_uscalar_t t_uscalar_t;


# 1 "/usr/include/bits/stropts.h" 1 3 4
# 174 "/usr/include/bits/stropts.h" 3 4
struct bandinfo
  {
    unsigned char bi_pri;
    int bi_flag;
  };

struct strbuf
  {
    int maxlen;
    int len;
    char *buf;
  };

struct strpeek
  {
    struct strbuf ctlbuf;
    struct strbuf databuf;
    t_uscalar_t flags;
  };

struct strfdinsert
  {
    struct strbuf ctlbuf;
    struct strbuf databuf;
    t_uscalar_t flags;
    int fildes;
    int offset;
  };

struct strioctl
  {
    int ic_cmd;
    int ic_timout;
    int ic_len;
    char *ic_dp;
  };

struct strrecvfd
  {
    int fd;
    uid_t uid;
    gid_t gid;
    char __fill[8];
  };


struct str_mlist
  {
    char l_name[8 + 1];
  };

struct str_list
  {
    int sl_nmods;
    struct str_mlist *sl_modlist;
  };
# 40 "/usr/include/stropts.h" 2 3 4


extern "C" {


extern int isastream (int __fildes) throw ();





extern int getmsg (int __fildes, struct strbuf *__restrict __ctlptr,
     struct strbuf *__restrict __dataptr,
     int *__restrict __flagsp);






extern int getpmsg (int __fildes, struct strbuf *__restrict __ctlptr,
      struct strbuf *__restrict __dataptr,
      int *__restrict __bandp, int *__restrict __flagsp);




extern int ioctl (int __fd, unsigned long int __request, ...) throw ();





extern int putmsg (int __fildes, __const struct strbuf *__ctlptr,
     __const struct strbuf *__dataptr, int __flags);





extern int putpmsg (int __fildes, __const struct strbuf *__ctlptr,
      __const struct strbuf *__dataptr, int __band, int __flags);



extern int fattach (int __fildes, __const char *__path) throw ();


extern int fdetach (__const char *__path) throw ();

}
# 59 "/usr/local/include/ace/os_include/os_stropts.h" 2 3
# 76 "/usr/local/include/ace/os_include/os_stropts.h" 3
extern "C"
{
# 110 "/usr/local/include/ace/os_include/os_stropts.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 114 "/usr/local/include/ace/os_include/os_stropts.h" 2 3
# 33 "/usr/local/include/ace/OS_NS_stropts.h" 2 3
# 41 "/usr/local/include/ace/OS_NS_stropts.h" 3

# 51 "/usr/local/include/ace/OS_NS_stropts.h" 3
struct ACE_Protocol_Info
{
  unsigned long dwServiceFlags1;
  int iAddressFamily;
  int iProtocol;
  char szProtocol[255+1];
};



typedef void (*ACE_OVERLAPPED_COMPLETION_FUNC) (unsigned long error,
                                                unsigned long bytes_transferred,
                                                ACE_OVERLAPPED *overlapped,
                                                unsigned long flags);
typedef unsigned long ACE_SOCK_GROUP;
# 75 "/usr/local/include/ace/OS_NS_stropts.h" 3
class ACE_Str_Buf : public strbuf
{
public:


  ACE_Str_Buf (void *b = 0, int l = 0, int max = 0);


  ACE_Str_Buf (strbuf &);
};

class ACE_QoS;

namespace ACE_OS {

  extern inline
  int getmsg (ACE_HANDLE handle,
              struct strbuf *ctl,
              struct strbuf
              *data, int *flags);

  extern inline
  int getpmsg (ACE_HANDLE handle,
               struct strbuf *ctl,
               struct strbuf
               *data,
               int *band,
               int *flags);

  extern inline
  int fattach (int handle,
               const char *path);

  extern inline
  int fdetach (const char *file);


  extern inline
  int ioctl (ACE_HANDLE handle,
             int cmd,
             void * = 0);


  extern
  int ioctl (ACE_HANDLE socket,
             unsigned long io_control_code,
             void *in_buffer_p,
             unsigned long in_buffer,
             void *out_buffer_p,
             unsigned long out_buffer,
             unsigned long *bytes_returned,
             ACE_OVERLAPPED *overlapped,
             ACE_OVERLAPPED_COMPLETION_FUNC func);



  extern
  int ioctl (ACE_HANDLE socket,
             unsigned long io_control_code,
             ACE_QoS &ace_qos,
             unsigned long *bytes_returned,
             void *buffer_p = 0,
             unsigned long buffer = 0,
             ACE_OVERLAPPED *overlapped = 0,
             ACE_OVERLAPPED_COMPLETION_FUNC func = 0);

  extern inline
  int isastream (ACE_HANDLE handle);

  extern inline
  int putmsg (ACE_HANDLE handle,
              const struct strbuf *ctl,
              const struct strbuf *data,
              int flags);

  extern inline
  int putpmsg (ACE_HANDLE handle,
               const struct strbuf *ctl,
               const struct strbuf *data,
               int band,
               int flags);

}








# 1 "/usr/local/include/ace/OS_NS_stropts.inl" 1 3
# 10 "/usr/local/include/ace/OS_NS_stropts.inl" 3
# 1 "/usr/local/include/ace/OS_QoS.h" 1 3
# 17 "/usr/local/include/ace/OS_QoS.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/OS_QoS.h" 2 3
# 26 "/usr/local/include/ace/OS_QoS.h" 3
# 1 "/usr/local/include/ace/OS_NS_stropts.h" 1 3
# 27 "/usr/local/include/ace/OS_QoS.h" 2 3






typedef unsigned long ACE_SERVICE_TYPE;
# 163 "/usr/local/include/ace/OS_QoS.h" 3
class ACE_Flow_Spec



{
public:

  ACE_Flow_Spec (void);


  ACE_Flow_Spec (unsigned long token_rate,
                 unsigned long token_bucket_size,
                 unsigned long peak_bandwidth,
                 unsigned long latency,
                 unsigned long delay_variation,
                 ACE_SERVICE_TYPE service_type,
                 unsigned long max_sdu_size,
                 unsigned long minimum_policed_size,
                 int ttl,
                 int priority);


  unsigned long token_rate (void) const;


  void token_rate (unsigned long tr);


  unsigned long token_bucket_size (void) const;


  void token_bucket_size (unsigned long tbs);


  unsigned long peak_bandwidth (void) const;


  void peak_bandwidth (unsigned long pb);


  unsigned long latency (void) const;


  void latency (unsigned long l);


  unsigned long delay_variation (void) const;


  void delay_variation (unsigned long dv);


  ACE_SERVICE_TYPE service_type (void) const;


  void service_type (ACE_SERVICE_TYPE st);


  unsigned long max_sdu_size (void) const;


  void max_sdu_size (unsigned long mss);


  unsigned long minimum_policed_size (void) const;


  void minimum_policed_size (unsigned long mps);


  int ttl (void) const;


  void ttl (int t);


  int priority (void) const;


  void priority (int p);




private:
  unsigned long token_rate_;
  unsigned long token_bucket_size_;
  unsigned long peak_bandwidth_;
  unsigned long latency_;
  unsigned long delay_variation_;
  ACE_SERVICE_TYPE service_type_;
  unsigned long max_sdu_size_;
  unsigned long minimum_policed_size_;
  int ttl_;
  int priority_;


};







class ACE_QoS



{
public:

  ACE_QoS (void);


  ACE_Flow_Spec *sending_flowspec (void) const;


  void sending_flowspec (ACE_Flow_Spec *fs);


  ACE_Flow_Spec *receiving_flowspec (void) const;


  void receiving_flowspec (ACE_Flow_Spec *fs);


  iovec provider_specific (void) const;


  void provider_specific (const iovec &ps);



private:

  ACE_Flow_Spec *sending_flowspec_;
  ACE_Flow_Spec *receiving_flowspec_;


};







class ACE_QoS_Params
{
public:
# 325 "/usr/local/include/ace/OS_QoS.h" 3
  ACE_QoS_Params (iovec *caller_data = 0,
                  iovec *callee_data = 0,
                  ACE_QoS *socket_qos = 0,
                  ACE_QoS *group_socket_qos = 0,
                  unsigned long flags = 0);


  iovec *caller_data (void) const;


  void caller_data (iovec *);


  iovec *callee_data (void) const;


  void callee_data (iovec *);


  ACE_QoS *socket_qos (void) const;


  void socket_qos (ACE_QoS *);


  ACE_QoS *group_socket_qos (void) const;


  void group_socket_qos (ACE_QoS *);


  unsigned long flags (void) const;


  void flags (unsigned long);

private:


  iovec *caller_data_;



  iovec *callee_data_;



  ACE_QoS *socket_qos_;



  ACE_QoS *group_socket_qos_;


  unsigned long flags_;
};



typedef int (*ACE_QOS_CONDITION_FUNC) (iovec *caller_id,
                                       iovec *caller_data,
                                       ACE_QoS *socket_qos,
                                       ACE_QoS *group_socket_qos,
                                       iovec *callee_id,
                                       iovec *callee_data,
                                       ACE_SOCK_GROUP *g,
                                       unsigned long callbackdata);
# 400 "/usr/local/include/ace/OS_QoS.h" 3
class ACE_Accept_QoS_Params
{
public:
# 413 "/usr/local/include/ace/OS_QoS.h" 3
  ACE_Accept_QoS_Params (ACE_QOS_CONDITION_FUNC qos_condition_callback = 0,
                         unsigned long callback_data = 0);


  ACE_QOS_CONDITION_FUNC qos_condition_callback (void) const;


  void qos_condition_callback (ACE_QOS_CONDITION_FUNC qcc);


  unsigned long callback_data (void) const;


  void callback_data (unsigned long cd);

private:







  ACE_QOS_CONDITION_FUNC qos_condition_callback_;






  unsigned long callback_data_;
};



# 1 "/usr/local/include/ace/post.h" 1 3
# 449 "/usr/local/include/ace/OS_QoS.h" 2 3
# 11 "/usr/local/include/ace/OS_NS_stropts.inl" 2 3






typedef const struct strbuf *ACE_STRBUF_TYPE;


inline
ACE_Str_Buf::ACE_Str_Buf (void *b, int l, int max)
{
  this->maxlen = max;
  this->len = l;
  this->buf = (char *) b;
}

inline
ACE_Str_Buf::ACE_Str_Buf (strbuf &sb)
{
  this->maxlen = sb.maxlen;
  this->len = sb.len;
  this->buf = sb.buf;
}



inline int
ACE_OS::getmsg (ACE_HANDLE handle,
                struct strbuf *ctl,
                struct strbuf *data,
                int *flags)
{
  ;



  (void) (handle);
  (void) (ctl);
  (void) (data);
  (void) (flags);


  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}

inline int
ACE_OS::getpmsg (ACE_HANDLE handle,
                 struct strbuf *ctl,
                 struct strbuf *data,
                 int *band,
                 int *flags)
{
  ;



  (void) (handle);
  (void) (ctl);
  (void) (data);
  (void) (band);
  (void) (flags);


  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}

inline int
ACE_OS::fattach (int handle, const char *path)
{
  ;



  (void) (handle);
  (void) (path);

  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}

inline int
ACE_OS::fdetach (const char *file)
{
  ;



  (void) (file);

  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}

inline int
ACE_OS::ioctl (ACE_HANDLE handle,
               int cmd,
               void *val)
{
  ;
# 121 "/usr/local/include/ace/OS_NS_stropts.inl" 3
  do return (int) (::ioctl (handle, cmd, val)); while (0);

}

inline int
ACE_OS::isastream (ACE_HANDLE handle)
{
  ;



  (void) (handle);

  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}

inline int
ACE_OS::putmsg (ACE_HANDLE handle, const struct strbuf *ctl,
                const struct strbuf *data, int flags)
{
  ;






  (void) (flags);
  ssize_t result;
  if (ctl == 0 && data == 0)
    {
      (*__errno_location ()) = 22;
      return 0;
    }

  else if (ctl != 0)
    {
      result = ACE_OS::write (handle, ctl->buf, ctl->len);
      return static_cast<int> (result);
    }
  else if (data != 0)
    {
      result = ACE_OS::write (handle, data->buf, data->len);
      return static_cast<int> (result);
    }
  else
    {

      char *buf;
      do { buf = new (::std::nothrow) char [ctl->len + data->len]; if (buf == 0) { (*__errno_location ()) = 12; return -1; } } while (0);
      ACE_OS::memcpy (buf, ctl->buf, ctl->len);
      ACE_OS::memcpy (buf + ctl->len, data->buf, data->len);
      result = ACE_OS::write (handle, buf, ctl->len + data->len);
      delete [] buf;
      return static_cast<int> (result);
    }

}

inline int
ACE_OS::putpmsg (ACE_HANDLE handle,
                 const struct strbuf *ctl,
                 const struct strbuf *data,
                 int band,
                 int flags)
{
  ;






  (void) (flags);
  (void) (band);
  return ACE_OS::putmsg (handle, ctl, data, flags);

}


# 167 "/usr/local/include/ace/OS_NS_stropts.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 170 "/usr/local/include/ace/OS_NS_stropts.h" 2 3
# 31 "/usr/local/include/ace/OS_NS_sys_socket.h" 2 3
# 63 "/usr/local/include/ace/OS_NS_sys_socket.h" 3


class ACE_Accept_QoS_Params;
class ACE_QoS_Params;

namespace ACE_OS
{
# 78 "/usr/local/include/ace/OS_NS_sys_socket.h" 3
  extern inline
  ACE_HANDLE accept (ACE_HANDLE handle,
                     struct sockaddr *addr,
                     int *addrlen);






  extern
  ACE_HANDLE accept (ACE_HANDLE handle,
                     struct sockaddr *addr,
                     int *addrlen,
                     const ACE_Accept_QoS_Params &qos_params);

  extern inline
  int bind (ACE_HANDLE s,
            struct sockaddr *name,
            int namelen);


  extern inline
  int closesocket (ACE_HANDLE s);


  extern inline
  int connect (ACE_HANDLE handle,
               struct sockaddr *addr,
               int addrlen);






  extern
  int connect (ACE_HANDLE handle,
               const sockaddr *addr,
               int addrlen,
               const ACE_QoS_Params &qos_params);



  extern inline
  int enum_protocols (int *protocols,
                      ACE_Protocol_Info *protocol_buffer,
                      u_long *buffer_length);

  extern inline
  int getpeername (ACE_HANDLE handle,
                   struct sockaddr *addr,
                   int *addrlen);

  extern inline
  int getsockname (ACE_HANDLE handle,
                   struct sockaddr *addr,
                   int *addrlen);
  extern inline
  int getsockopt (ACE_HANDLE handle,
                  int level,
                  int optname,
                  char *optval,
                  int *optlen);


  extern
  ACE_HANDLE join_leaf (ACE_HANDLE socket,
                        const sockaddr *name,
                        int namelen,
                        const ACE_QoS_Params &qos_params);

  extern inline
  int listen (ACE_HANDLE handle,
              int backlog);

  extern inline
  ssize_t recv (ACE_HANDLE handle,
                char *buf,
                size_t len,
                int flags = 0);

  extern inline
  ssize_t recvfrom (ACE_HANDLE handle,
                    char *buf,
                    size_t len,
                    int flags,
                    struct sockaddr *addr,
                    int *addrlen);

  extern inline
  ssize_t recvfrom (ACE_HANDLE handle,
                    iovec *buffers,
                    int buffer_count,
                    size_t &number_of_bytes_recvd,
                    int &flags,
                    struct sockaddr *addr,
                    int *addrlen,
                    ACE_OVERLAPPED *overlapped,
                    ACE_OVERLAPPED_COMPLETION_FUNC func);

  extern inline
  ssize_t recvmsg (ACE_HANDLE handle,
                   struct msghdr *msg,
                   int flags);

  extern inline
  ssize_t recvv (ACE_HANDLE handle,
                 iovec *iov,
                 int iovlen);

  extern inline
  ssize_t send (ACE_HANDLE handle,
                const char *buf,
                size_t len,
                int flags = 0);

  extern inline
  ssize_t sendmsg (ACE_HANDLE handle,
                   const struct msghdr *msg,
                   int flags);

  extern inline
  ssize_t sendto (ACE_HANDLE handle,
                  const char *buf,
                  size_t len,
                  int flags,
                  const struct sockaddr *addr,
                  int addrlen);

  extern inline
  ssize_t sendto (ACE_HANDLE handle,
                  const iovec *buffers,
                  int buffer_count,
                  size_t &number_of_bytes_sent,
                  int flags,
                  const struct sockaddr *addr,
                  int addrlen,
                  ACE_OVERLAPPED *overlapped,
                  ACE_OVERLAPPED_COMPLETION_FUNC func);

  extern inline
  ssize_t sendv (ACE_HANDLE handle,
                 const iovec *iov,
                 int iovcnt);



  extern inline
  int setsockopt (ACE_HANDLE handle,
                  int level,
                  int optname,
                  const char *optval,
                  int optlen);

  extern inline
  int shutdown (ACE_HANDLE handle,
                int how);
# 253 "/usr/local/include/ace/OS_NS_sys_socket.h" 3
  extern
  int socket_init (int version_high = 1,
                   int version_low = 1);


  extern
  int socket_fini (void);


  extern inline
  ACE_HANDLE socket (int protocol_family,
                     int type,
                     int proto);



  extern inline
  ACE_HANDLE socket (int protocol_family,
                     int type,
                     int proto,
                     ACE_Protocol_Info *protocolinfo,
                     ACE_SOCK_GROUP g,
                     u_long flags);

  extern inline
  int socketpair (int domain,
                  int type,
                  int protocol,
                  ACE_HANDLE sv[2]);

}








# 1 "/usr/local/include/ace/OS_NS_sys_socket.inl" 1 3






# 1 "/usr/local/include/ace/OS_NS_sys_uio.h" 1 3
# 20 "/usr/local/include/ace/OS_NS_sys_uio.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 21 "/usr/local/include/ace/OS_NS_sys_uio.h" 2 3
# 36 "/usr/local/include/ace/OS_NS_sys_uio.h" 3


namespace ACE_OS
{

  extern inline
  ssize_t readv (ACE_HANDLE handle,
                 const iovec *iov,
                 int iovlen);
# 53 "/usr/local/include/ace/OS_NS_sys_uio.h" 3
  extern inline
  ssize_t writev (ACE_HANDLE handle,
                  const iovec *iov,
                  int iovcnt);
# 67 "/usr/local/include/ace/OS_NS_sys_uio.h" 3
}








# 1 "/usr/local/include/ace/OS_NS_sys_uio.inl" 1 3








inline ssize_t
ACE_OS::readv (ACE_HANDLE handle,
               const iovec *iov,
               int iovlen)
{
  ;
# 25 "/usr/local/include/ace/OS_NS_sys_uio.inl" 3
  do return (ssize_t) (::readv (handle, iov, iovlen)); while (0);




}

inline ssize_t
ACE_OS::writev (ACE_HANDLE handle,
                const iovec *iov,
                int iovcnt)
{
  ;
# 48 "/usr/local/include/ace/OS_NS_sys_uio.inl" 3
  do return (ssize_t) (::writev (handle, iov, iovcnt)); while (0);




}


# 77 "/usr/local/include/ace/OS_NS_sys_uio.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 80 "/usr/local/include/ace/OS_NS_sys_uio.h" 2 3
# 8 "/usr/local/include/ace/OS_NS_sys_socket.inl" 2 3
# 18 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3



typedef void *ACE_SOCKOPT_TYPE1;






inline ACE_HANDLE
ACE_OS::accept (ACE_HANDLE handle,
                struct sockaddr *addr,
                int *addrlen)
{
  ;
# 72 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  ACE_HANDLE ace_result = ::accept ((ACE_SOCKET) handle,
                                    addr,
                                    (ACE_SOCKET_LEN *) addrlen);
# 92 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  return ace_result;


}

inline int
ACE_OS::bind (ACE_HANDLE handle, struct sockaddr *addr, int addrlen)
{
  ;
# 120 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (int) (::bind ((ACE_SOCKET) handle, addr, (ACE_SOCKET_LEN) addrlen)); while (0);



}

inline int
ACE_OS::closesocket (ACE_HANDLE handle)
{
  ;
# 139 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (int) (::close (handle)); while (0);


}

inline int
ACE_OS::connect (ACE_HANDLE handle,
                 struct sockaddr *addr,
                 int addrlen)
{
  ;






  do return (int) (::connect ((ACE_SOCKET) handle, addr, (ACE_SOCKET_LEN) addrlen)); while (0);



}

inline int
ACE_OS::enum_protocols (int *protocols,
                        ACE_Protocol_Info *protocol_buffer,
                        u_long *buffer_length)
{
# 176 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  (void) (protocols);
  (void) (protocol_buffer);
  (void) (buffer_length);
  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}

inline int
ACE_OS::getpeername (ACE_HANDLE handle, struct sockaddr *addr,
                     int *addrlen)
{
  ;
# 223 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (int) (::getpeername ((ACE_SOCKET) handle, addr, (ACE_SOCKET_LEN *) addrlen)); while (0);





}

inline int
ACE_OS::getsockname (ACE_HANDLE handle,
                     struct sockaddr *addr,
                     int *addrlen)
{
  ;
# 269 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (int) (::getsockname ((ACE_SOCKET) handle, addr, (ACE_SOCKET_LEN *) addrlen)); while (0);




}

inline int
ACE_OS::getsockopt (ACE_HANDLE handle,
                    int level,
                    int optname,
                    char *optval,
                    int *optlen)
{
  ;
# 292 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (int) (::getsockopt ((ACE_SOCKET) handle, level, optname, optval, (ACE_SOCKET_LEN *) optlen)); while (0);







}

inline int
ACE_OS::listen (ACE_HANDLE handle, int backlog)
{
  ;





  do return (int) (::listen ((ACE_SOCKET) handle, backlog)); while (0);

}

inline ssize_t
ACE_OS::recv (ACE_HANDLE handle, char *buf, size_t len, int flags)
{
  ;
# 339 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  ssize_t ace_result_;
  ace_result_ = ::recv ((ACE_SOCKET) handle, buf, len, flags);
# 358 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  return ace_result_;

}

inline ssize_t
ACE_OS::recvfrom (ACE_HANDLE handle,
                  char *buf,
                  size_t len,
                  int flags,
                  struct sockaddr *addr,
                  int *addrlen)
{
  ;
# 408 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (ssize_t) (::recvfrom ((ACE_SOCKET) handle, buf, len, flags, addr, (ACE_SOCKET_LEN *) addrlen)); while (0);







}

inline ssize_t
ACE_OS::recvfrom (ACE_HANDLE handle,
                  iovec *buffers,
                  int buffer_count,
                  size_t &number_of_bytes_recvd,
                  int &flags,
                  struct sockaddr *addr,
                  int *addrlen,
                  ACE_OVERLAPPED *overlapped,
                  ACE_OVERLAPPED_COMPLETION_FUNC func)
{
  ;
# 450 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  (void) (handle);
  (void) (buffers);
  (void) (buffer_count);
  (void) (number_of_bytes_recvd);
  (void) (flags);
  (void) (addr);
  (void) (addrlen);
  (void) (overlapped);
  (void) (func);
  do { (*__errno_location ()) = 95 ; return -1; } while (0);

}

inline ssize_t
ACE_OS::recvmsg (ACE_HANDLE handle, struct msghdr *msg, int flags)
{
  ;
# 489 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (ssize_t) (::recvmsg (handle, msg, flags)); while (0);
# 498 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
}

inline ssize_t
ACE_OS::recvv (ACE_HANDLE handle,
               iovec *buffers,
               int n)
{
# 550 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  return ACE_OS::readv (handle, buffers, n);

}

inline ssize_t
ACE_OS::send (ACE_HANDLE handle, const char *buf, size_t len, int flags)
{
  ;
# 580 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  ssize_t const ace_result_ = ::send ((ACE_SOCKET) handle, buf, len, flags);
# 598 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  return ace_result_;

}

inline ssize_t
ACE_OS::sendmsg (ACE_HANDLE handle,
                 const struct msghdr *msg,
                 int flags)
{
  ;
# 633 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (ssize_t) (::sendmsg (handle, msg, flags)); while (0);
# 642 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
}

inline ssize_t
ACE_OS::sendto (ACE_HANDLE handle,
                const char *buf,
                size_t len,
                int flags,
                const struct sockaddr *addr,
                int addrlen)
{
  ;
# 678 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (ssize_t) (::sendto ((ACE_SOCKET) handle, buf, len, flags, const_cast<struct sockaddr *> (addr), addrlen)); while (0);







}

inline ssize_t
ACE_OS::sendto (ACE_HANDLE handle,
                const iovec *buffers,
                int buffer_count,
                size_t &number_of_bytes_sent,
                int flags,
                const struct sockaddr *addr,
                int addrlen,
                ACE_OVERLAPPED *overlapped,
                ACE_OVERLAPPED_COMPLETION_FUNC func)
{
  ;
# 717 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  (void) (overlapped);
  (void) (func);

  number_of_bytes_sent = 0;

  ssize_t result = 0;

  for (int i = 0; i < buffer_count; ++i)
    {
       result = ACE_OS::sendto (handle,
                                reinterpret_cast<char *> (
                                                 buffers[i].iov_base),
                                buffers[i].iov_len,
                                flags,
                                addr,
                                addrlen);
       if (result == -1)
         break;
       number_of_bytes_sent += static_cast<size_t> (result);
    }

  return result;

}

inline ssize_t
ACE_OS::sendv (ACE_HANDLE handle,
               const iovec *buffers,
               int n)
{
# 827 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  return ACE_OS::writev (handle, buffers, n);

}

inline int
ACE_OS::setsockopt (ACE_HANDLE handle,
                    int level,
                    int optname,
                    const char *optval,
                    int optlen)
{
  ;
# 868 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  int result;
  do result = (int) (::setsockopt ((ACE_SOCKET) handle, level, optname, (ACE_SOCKOPT_TYPE1) optval, optlen)); while (0);
# 880 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  if (result == -1)

    (*__errno_location ()) = 95;
  return result;

}

inline int
ACE_OS::shutdown (ACE_HANDLE handle, int how)
{
  ;





  do return (int) (::shutdown ((ACE_SOCKET) handle, how)); while (0);

}

inline ACE_HANDLE
ACE_OS::socket (int domain,
                int type,
                int proto)
{
  ;






  do return (ACE_HANDLE) (::socket (domain, type, proto)); while (0);





}

inline ACE_HANDLE
ACE_OS::socket (int domain,
                int type,
                int proto,
                ACE_Protocol_Info *protocolinfo,
                ACE_SOCK_GROUP g,
                u_long flags)
{
  ;
# 940 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  (void) (protocolinfo);
  (void) (g);
  (void) (flags);

  return ACE_OS::socket (domain,
                         type,
                         proto);

}

inline int
ACE_OS::socketpair (int domain, int type,
                    int protocol, ACE_HANDLE sv[2])
{
  ;
# 963 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3
  do return (int) (::socketpair (domain, type, protocol, sv)); while (0);


}
# 999 "/usr/local/include/ace/OS_NS_sys_socket.inl" 3

# 293 "/usr/local/include/ace/OS_NS_sys_socket.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 296 "/usr/local/include/ace/OS_NS_sys_socket.h" 2 3
# 9 "/usr/local/include/ace/ACE.inl" 2 3







inline ssize_t
ACE::read_n (ACE_HANDLE handle,
             void *buf,
             size_t len,
             size_t *bytes_transferred)
{
  return ACE_OS::read_n (handle,
                         buf,
                         len,
                         bytes_transferred);
}

inline ssize_t
ACE::write_n (ACE_HANDLE handle,
              const void *buf,
              size_t len,
              size_t *bytes_transferred)
{
  return ACE_OS::write_n (handle,
                          buf,
                          len,
                          bytes_transferred);
}

inline ssize_t
ACE::recv_n (ACE_HANDLE handle,
             void *buf,
             size_t len,
             int flags,
             const ACE_Time_Value *timeout,
             size_t *bytes_transferred)
{
  if (timeout == 0)
    return ACE::recv_n_i (handle,
                          buf,
                          len,
                          flags,
                          bytes_transferred);
  else
    return ACE::recv_n_i (handle,
                          buf,
                          len,
                          flags,
                          timeout,
                          bytes_transferred);
}
# 90 "/usr/local/include/ace/ACE.inl" 3
inline ssize_t
ACE::recv_n (ACE_HANDLE handle,
             void *buf,
             size_t len,
             const ACE_Time_Value *timeout,
             size_t *bytes_transferred)
{
  if (timeout == 0)
    return ACE::recv_n_i (handle,
                          buf,
                          len,
                          bytes_transferred);
  else
    return ACE::recv_n_i (handle,
                          buf,
                          len,
                          timeout,
                          bytes_transferred);
}

inline ssize_t
ACE::recvv_n (ACE_HANDLE handle,
              iovec *iov,
              int iovcnt,
              const ACE_Time_Value *timeout,
              size_t *bytes_transferred)
{
  if (timeout == 0)
    return ACE::recvv_n_i (handle,
                           iov,
                           iovcnt,
                           bytes_transferred);
  else
    return ACE::recvv_n_i (handle,
                           iov,
                           iovcnt,
                           timeout,
                           bytes_transferred);
}

inline ssize_t
ACE::send_n (ACE_HANDLE handle,
             const void *buf,
             size_t len,
             int flags,
             const ACE_Time_Value *timeout,
             size_t *bytes_transferred)
{
  if (timeout == 0)
    return ACE::send_n_i (handle,
                          buf,
                          len,
                          flags,
                          bytes_transferred);
  else
    return ACE::send_n_i (handle,
                          buf,
                          len,
                          flags,
                          timeout,
                          bytes_transferred);
}
# 180 "/usr/local/include/ace/ACE.inl" 3
inline ssize_t
ACE::send_n (ACE_HANDLE handle,
             const void *buf,
             size_t len,
             const ACE_Time_Value *timeout,
             size_t *bytes_transferred)
{
  if (timeout == 0)
    return ACE::send_n_i (handle,
                          buf,
                          len,
                          bytes_transferred);
  else
    return ACE::send_n_i (handle,
                          buf,
                          len,
                          timeout,
                          bytes_transferred);
}

inline ssize_t
ACE::sendv_n (ACE_HANDLE handle,
              const iovec *iov,
              int iovcnt,
              const ACE_Time_Value *timeout,
              size_t *bytes_transferred)
{
  if (timeout == 0)
    return ACE::sendv_n_i (handle,
                           iov,
                           iovcnt,
                           bytes_transferred);
  else
    return ACE::sendv_n_i (handle,
                           iov,
                           iovcnt,
                           timeout,
                           bytes_transferred);
}

inline ssize_t
ACE::send_i (ACE_HANDLE handle, const void *buf, size_t len)
{



  return ACE_OS::write (handle, (const char *) buf, len);

}

inline ssize_t
ACE::recv_i (ACE_HANDLE handle, void *buf, size_t len)
{



  return ACE_OS::read (handle, (char *) buf, len);

}

inline int
ACE::handle_read_ready (ACE_HANDLE handle,
                        const ACE_Time_Value *timeout)
{
  return ACE::handle_ready (handle,
                            timeout,
                            1,
                            0,
                            0);
}

inline int
ACE::handle_write_ready (ACE_HANDLE handle,
                         const ACE_Time_Value *timeout)
{
  return ACE::handle_ready (handle,
                            timeout,
                            0,
                            1,
                            0);
}

inline int
ACE::handle_exception_ready (ACE_HANDLE handle,
                             const ACE_Time_Value *timeout)
{
  return ACE::handle_ready (handle,
                            timeout,
                            0,
                            0,
                            1);
}

inline void
ACE::strdelete (char *s)
{
  delete [] s;
}


inline void
ACE::strdelete (wchar_t *s)
{
  delete [] s;
}


inline bool
ACE::isdotdir (const char *s)
{
  return (s[0] == '.' &&
          ((s[1] == 0) || (s[1] == '.' && s[2] == 0)));
}


inline bool
ACE::isdotdir (const wchar_t *s)
{
  return (s[0] == '.' &&
          ((s[1] == 0) || (s[1] == '.' && s[2] == 0)));
}


inline void
ACE::unique_name (const void *object,
                  ACE_TCHAR *name,
                  size_t length)
{
  ACE_OS::unique_name (object, name, length);
}

inline u_long
ACE::log2 (u_long num)
{
  u_long log = 0;

  for (; num > 1; ++log)
    num >>= 1;

  return log;
}

inline int
ACE::map_errno (int error)
{
# 333 "/usr/local/include/ace/ACE.inl" 3
  return error;
}

inline u_char
ACE::hex2byte (ACE_TCHAR c)
{
  if (ACE_OS::ace_isdigit (c))
    return (u_char) (c - '0');
  else if (ACE_OS::ace_islower (c))
    return (u_char) (10 + c - 'a');
  else
    return (u_char) (10 + c - 'A');
}



# 845 "/usr/local/include/ace/ACE.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 848 "/usr/local/include/ace/ACE.h" 2 3
# 7 "/usr/local/include/ace/String_Base.cpp" 2 3

# 1 "/usr/local/include/ace/String_Base.h" 1 3
# 9 "/usr/local/include/ace/String_Base.cpp" 2 3
# 18 "/usr/local/include/ace/String_Base.cpp" 3




template <class ACE_CHAR_T>
ACE_CHAR_T ACE_String_Base<ACE_CHAR_T>::NULL_String_ = 0;



template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::ACE_String_Base (ACE_Allocator *the_allocator)
  : allocator_ (the_allocator ? the_allocator : ACE_Allocator::instance ()),
    len_ (0),
    buf_len_ (0),
    rep_ (&ACE_String_Base<ACE_CHAR_T>::NULL_String_),
    release_ (false)
{
  ;
}



template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::ACE_String_Base (const ACE_CHAR_T *s,
                                        ACE_Allocator *the_allocator,
                                        bool release)
  : allocator_ (the_allocator ? the_allocator : ACE_Allocator::instance ()),
    len_ (0),
    buf_len_ (0),
    rep_ (0),
    release_ (false)
{
  ;
  this->set (s, release);
}

template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::ACE_String_Base (ACE_CHAR_T c,
                                        ACE_Allocator *the_allocator)
  : allocator_ (the_allocator ? the_allocator : ACE_Allocator::instance ()),
    len_ (0),
    buf_len_ (0),
    rep_ (0),
    release_ (false)
{
  ;

  this->set (&c, 1, true);
}



template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::ACE_String_Base (
  const ACE_CHAR_T *s,
  typename ACE_String_Base<ACE_CHAR_T>::size_type len,
  ACE_Allocator *the_allocator,
  bool release)
  : allocator_ (the_allocator ? the_allocator : ACE_Allocator::instance ()),
    len_ (0),
    buf_len_ (0),
    rep_ (0),
    release_ (false)
{
  ;

  this->set (s, len, release);
}



template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::ACE_String_Base (const ACE_String_Base<ACE_CHAR_T> &s)
  : allocator_ (s.allocator_ ? s.allocator_ : ACE_Allocator::instance ()),
    len_ (0),
    buf_len_ (0),
    rep_ (0),
    release_ (false)
{
  ;

  this->set (s.rep_, s.len_, true);
}

template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::ACE_String_Base (
  typename ACE_String_Base<ACE_CHAR_T>::size_type len,
  ACE_CHAR_T c,
  ACE_Allocator *the_allocator)
  : allocator_ (the_allocator ? the_allocator : ACE_Allocator::instance ()),
    len_ (0),
    buf_len_ (0),
    rep_ (0),
    release_ (false)
{
  ;

  this->resize (len, c);
}

template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::~ACE_String_Base (void)
{
  ;

  if (this->buf_len_ != 0 && this->release_)
      this->allocator_->free (this->rep_);
}


template <class ACE_CHAR_T> void
ACE_String_Base<ACE_CHAR_T>::set (const ACE_CHAR_T *s,
                            typename ACE_String_Base<ACE_CHAR_T>::size_type len,
                            bool release)
{

  size_type new_buf_len = len + 1;
  if (s != 0 && len != 0 && release && this->buf_len_ < new_buf_len)
    {
      ACE_CHAR_T *temp = 0;
      do { temp = (ACE_CHAR_T *) this->allocator_->malloc (new_buf_len * sizeof (ACE_CHAR_T)); if (temp == 0) { (*__errno_location ()) = 12; return; } } while (0);


      if (this->buf_len_ != 0 && this->release_)
        this->allocator_->free (this->rep_);

      this->rep_ = temp;
      this->buf_len_ = new_buf_len;
      this->release_ = true;
      this->len_ = len;
      ACE_OS::memcpy (this->rep_, s, len * sizeof (ACE_CHAR_T));
      this->rep_[len] = 0;
    }
  else
    {

      if (!release || s == 0 || len == 0)
        {
          if (this->buf_len_ != 0 && this->release_)
            {
              this->allocator_->free (this->rep_);
              this->release_ = false;
            }
        }

      if (s == 0 || len == 0)
        {
          this->buf_len_ = 0;
          this->len_ = 0;
          this->rep_ = &ACE_String_Base<ACE_CHAR_T>::NULL_String_;
          this->release_ = false;
        }
      else if (!release)
        {
          this->buf_len_ = len;
          this->len_ = len;
          this->rep_ = const_cast <ACE_CHAR_T *> (s);
          this->release_ = false;
        }
      else
        {
          ACE_OS::memcpy (this->rep_, s, len * sizeof (ACE_CHAR_T));
          this->rep_[len] = 0;
          this->len_ = len;
        }
    }
}


template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T>::substring (
  typename ACE_String_Base<ACE_CHAR_T>::size_type offset,
  typename ACE_String_Base<ACE_CHAR_T>::size_type length) const
{
  ACE_String_Base<ACE_CHAR_T> nill;
  size_type count = length;


  if (this->len_ == 0)
    return nill;


  if (offset >= this->len_)
    return nill;

  else if (length == 0)
    return nill;

  else if (length == npos || count > (this->len_ - offset))
    count = this->len_ - offset;

  return ACE_String_Base<ACE_CHAR_T> (&this->rep_[offset], count, this->allocator_);
}

template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T> &
ACE_String_Base<ACE_CHAR_T>::append (const ACE_CHAR_T* s,
                               typename ACE_String_Base<ACE_CHAR_T>::size_type slen)
{
  ;
  if (slen > 0 && slen != npos)
  {

    if (this->buf_len_ >= this->len_ + slen + 1)
    {

      ACE_OS::memcpy (this->rep_ + this->len_, s, slen * sizeof (ACE_CHAR_T));
    }
    else
    {
      const size_type new_buf_len =
        ace_max(this->len_ + slen + 1, this->buf_len_ + this->buf_len_ / 2);

      ACE_CHAR_T *t = 0;

      do { t = (ACE_CHAR_T *) this->allocator_->malloc (new_buf_len * sizeof (ACE_CHAR_T)); if (t == 0) { (*__errno_location ()) = 12; return *this; } } while (0);



      ACE_OS::memcpy (t, this->rep_, this->len_ * sizeof (ACE_CHAR_T));

      ACE_OS::memcpy (t + this->len_, s, slen * sizeof (ACE_CHAR_T));

      if (this->buf_len_ != 0 && this->release_)
        this->allocator_->free (this->rep_);

      this->release_ = true;
      this->rep_ = t;
      this->buf_len_ = new_buf_len;
    }

    this->len_ += slen;
    this->rep_[this->len_] = 0;
  }

  return *this;
}

template <class ACE_CHAR_T> u_long
ACE_String_Base<ACE_CHAR_T>::hash (void) const
{
  return
    ACE::hash_pjw (reinterpret_cast<char *> (
                      const_cast<ACE_CHAR_T *> (this->rep_)),
                   this->len_ * sizeof (ACE_CHAR_T));
}

template <class ACE_CHAR_T> void
ACE_String_Base<ACE_CHAR_T>::resize (typename ACE_String_Base<ACE_CHAR_T>::size_type len,
                               ACE_CHAR_T c)
{
  ;

  fast_resize(len);
  ACE_OS::memset (this->rep_, c, this->buf_len_ * sizeof (ACE_CHAR_T));
}

template <class ACE_CHAR_T> void
ACE_String_Base<ACE_CHAR_T>::fast_resize (size_t len)
{
  ;


  if (this->buf_len_ <= len)
    {
      if (this->buf_len_ != 0 && this->release_)
        this->allocator_->free (this->rep_);

      this->rep_ = static_cast<ACE_CHAR_T*>
                     (this->allocator_->malloc ((len + 1) * sizeof (ACE_CHAR_T)));
      this->buf_len_ = len + 1;
      this->release_ = true;
    }
  this->len_ = 0;
  if (len > 0)
    this->rep_[0] = 0;
}

template <class ACE_CHAR_T> void
ACE_String_Base<ACE_CHAR_T>::clear (bool release)
{

  if (release)
  {
    if (this->buf_len_ != 0 && this->release_)
      this->allocator_->free (this->rep_);

    this->rep_ = &ACE_String_Base<ACE_CHAR_T>::NULL_String_;
    this->len_ = 0;
    this->buf_len_ = 0;
    this->release_ = false;
  }
  else
    {
      this->fast_clear ();
    }
}


template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T> &
ACE_String_Base<ACE_CHAR_T>::operator= (const ACE_CHAR_T *s)
{
  ;
  if (s != 0)
    this->set (s, true);
  return *this;
}


template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T> &
ACE_String_Base<ACE_CHAR_T>::operator= (const ACE_String_Base<ACE_CHAR_T> &s)
{
  ;


  if (this != &s)
    {
      this->set (s.rep_, s.len_, true);
    }

  return *this;
}

template <class ACE_CHAR_T> void
ACE_String_Base<ACE_CHAR_T>::set (const ACE_CHAR_T *s, bool release)
{
  size_t length = 0;
  if (s != 0)
    length = ACE_OS::strlen (s);

  this->set (s, length, release);
}

template <class ACE_CHAR_T> void
ACE_String_Base<ACE_CHAR_T>::fast_clear (void)
{
  this->len_ = 0;
  if (this->release_)
    {

      if (this->rep_ != &ACE_String_Base<ACE_CHAR_T>::NULL_String_)
        this->rep_[0] = 0;
    }
  else
    {

      this->buf_len_ = 0;
      this->rep_ = &ACE_String_Base<ACE_CHAR_T>::NULL_String_;
    }
}



template <class ACE_CHAR_T> ACE_CHAR_T *
ACE_String_Base<ACE_CHAR_T>::rep (void) const
{
  ;

  ACE_CHAR_T *new_string;
  do { new_string = new (::std::nothrow) ACE_CHAR_T[this->len_ + 1]; if (new_string == 0) { (*__errno_location ()) = 12; return 0; } } while (0);
  ACE_OS::strsncpy (new_string, this->rep_, this->len_+1);

  return new_string;
}

template <class ACE_CHAR_T> int
ACE_String_Base<ACE_CHAR_T>::compare (const ACE_String_Base<ACE_CHAR_T> &s) const
{
  ;

  if (this->rep_ == s.rep_)
    return 0;


  size_type smaller_length = ace_min (this->len_, s.len_);

  int result = ACE_OS::memcmp (this->rep_,
                               s.rep_,
                               smaller_length * sizeof (ACE_CHAR_T));

  if (result == 0 && this->len_ != s.len_)
    result = this->len_ > s.len_ ? 1 : -1;
  return result;
}



template <class ACE_CHAR_T> bool
ACE_String_Base<ACE_CHAR_T>::operator== (const ACE_String_Base<ACE_CHAR_T> &s) const
{
  return this->len_ == s.len_ &&
         ACE_OS::memcmp (this->rep_,
                         s.rep_,
                         this->len_ * sizeof (ACE_CHAR_T)) == 0;
}

template <class ACE_CHAR_T> bool
ACE_String_Base<ACE_CHAR_T>::operator== (const ACE_CHAR_T *s) const
{
  size_t len = ACE_OS::strlen (s);
  return this->len_ == len &&
         ACE_OS::memcmp (this->rep_,
                         s,
                         len * sizeof (ACE_CHAR_T)) == 0;
}

template <class ACE_CHAR_T> typename ACE_String_Base<ACE_CHAR_T>::size_type
ACE_String_Base<ACE_CHAR_T>::find (
  const ACE_CHAR_T *s,
  typename ACE_String_Base<ACE_CHAR_T>::size_type pos) const
{
  ACE_CHAR_T *substr = this->rep_ + pos;
  size_t len = ACE_OS::strlen (s);
  ACE_CHAR_T *pointer = ACE_OS::strnstr (substr, s, len);
  if (pointer == 0)
    return ACE_String_Base<ACE_CHAR_T>::npos;
  else
    return pointer - this->rep_;
}

template <class ACE_CHAR_T> typename ACE_String_Base<ACE_CHAR_T>::size_type
ACE_String_Base<ACE_CHAR_T>::find (
  ACE_CHAR_T c,
  typename ACE_String_Base<ACE_CHAR_T>::size_type pos) const
{
  ACE_CHAR_T *substr = this->rep_ + pos;
  ACE_CHAR_T *pointer = ACE_OS::strnchr (substr, c, this->len_ - pos);
  if (pointer == 0)
    return ACE_String_Base<ACE_CHAR_T>::npos;
  else
    return pointer - this->rep_;
}

template <class ACE_CHAR_T> typename ACE_String_Base<ACE_CHAR_T>::size_type
ACE_String_Base<ACE_CHAR_T>::rfind (
  ACE_CHAR_T c,
  typename ACE_String_Base<ACE_CHAR_T>::size_type pos) const
{
  if (pos == npos || pos > this->len_)
    pos = this->len_;



  for (size_type i = pos; i-- != 0; )
    if (this->rep_[i] == c)
      return i;

  return ACE_String_Base<ACE_CHAR_T>::npos;
}

template <class ACE_CHAR_T> void
ACE_String_Base<ACE_CHAR_T>::swap (ACE_String_Base<ACE_CHAR_T> & str)
{
  std::swap (this->allocator_ , str.allocator_);
  std::swap (this->len_ , str.len_);
  std::swap (this->buf_len_ , str.buf_len_);
  std::swap (this->rep_ , str.rep_);
  std::swap (this->release_ , str.release_);
}



template <class ACE_CHAR_T>
int ACE_String_Base_Iterator <ACE_CHAR_T>::next (ACE_CHAR_T * & ch) const
{
  ;

  if (0 == this->done ())
  {
    ch = &this->str_->rep_[this->index_];
    return 1;
  }
  else
  {
    ch = 0;
    return 0;
  }
}

template <class ACE_CHAR_T>
int ACE_String_Base_Iterator <ACE_CHAR_T>::advance (void)
{
  ;

  if (this->index_ < this->str_->length ())
  {
    ++ this->index_;
    return 1;
  }
  else
  {
    return 0;
  }
}

template <class ACE_CHAR_T>
const ACE_String_Base_Iterator <ACE_CHAR_T> &
ACE_String_Base_Iterator <ACE_CHAR_T>::
operator = (const ACE_String_Base_Iterator <ACE_CHAR_T> & rhs)
{
  ;

  if (this == &rhs)
    return *this;

  this->str_ = rhs.str_;
  this->index_ = rhs.index_;
  return *this;
}



template <class ACE_CHAR_T>
int ACE_String_Base_Const_Iterator <ACE_CHAR_T>::next (const ACE_CHAR_T * & ch) const
{
  ;

  if (0 == this->done ())
  {
    ch = &this->str_->rep_[this->index_];
    return 1;
  }
  else
  {
    ch = 0;
    return 0;
  }
}

template <class ACE_CHAR_T>
int ACE_String_Base_Const_Iterator <ACE_CHAR_T>::advance (void)
{
  ;

  if (this->index_ < this->str_->length ())
  {
    ++ this->index_;
    return 1;
  }
  else
  {
    return 0;
  }
}

template <class ACE_CHAR_T>
const ACE_String_Base_Const_Iterator <ACE_CHAR_T> &
ACE_String_Base_Const_Iterator <ACE_CHAR_T>::
operator = (const ACE_String_Base_Const_Iterator <ACE_CHAR_T> & rhs)
{
  ;

  if (this == &rhs)
    return *this;

  this->str_ = rhs.str_;
  this->index_ = rhs.index_;
  return *this;
}



template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T>
operator+ (const ACE_String_Base<ACE_CHAR_T> &s, const ACE_String_Base<ACE_CHAR_T> &t)
{
  ACE_String_Base<ACE_CHAR_T> temp (s.length () + t.length ());
  temp += s;
  temp += t;
  return temp;
}

template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T>
operator+ (const ACE_CHAR_T *s, const ACE_String_Base<ACE_CHAR_T> &t)
{
  size_t slen = 0;
  if (s != 0)
    slen = ACE_OS::strlen (s);
  ACE_String_Base<ACE_CHAR_T> temp (slen + t.length ());
  if (slen > 0)
    temp.append (s, slen);
  temp += t;
  return temp;
}

template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T>
operator+ (const ACE_String_Base<ACE_CHAR_T> &s, const ACE_CHAR_T *t)
{
  size_t tlen = 0;
  if (t != 0)
    tlen = ACE_OS::strlen (t);
  ACE_String_Base<ACE_CHAR_T> temp (s.length () + tlen);
  temp += s;
  if (tlen > 0)
    temp.append (t, tlen);
  return temp;
}

template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T>
operator + (const ACE_String_Base<ACE_CHAR_T> &t,
            const ACE_CHAR_T c)
{
  ACE_String_Base<ACE_CHAR_T> temp (t.length () + 1);
  temp += t;
  temp += c;
  return temp;
}

template <class ACE_CHAR_T> ACE_String_Base<ACE_CHAR_T>
operator + (const ACE_CHAR_T c,
            const ACE_String_Base<ACE_CHAR_T> &t)
{
  ACE_String_Base<ACE_CHAR_T> temp (t.length () + 1);
  temp += c;
  temp += t;
  return temp;
}

template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T> &
ACE_String_Base<ACE_CHAR_T>::operator+= (const ACE_CHAR_T* s)
{
  size_t slen = 0;
  if (s != 0)
    slen = ACE_OS::strlen (s);
  return this->append (s, slen);
}

template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T> &
ACE_String_Base<ACE_CHAR_T>::operator+= (const ACE_String_Base<ACE_CHAR_T> &s)
{
  ;
  return this->append (s.rep_, s.len_);
}

template <class ACE_CHAR_T>
ACE_String_Base<ACE_CHAR_T> &
ACE_String_Base<ACE_CHAR_T>::operator+= (const ACE_CHAR_T c)
{
  ;
  const size_type slen = 1;
  return this->append (&c, slen);
}


# 883 "/usr/local/include/ace/String_Base.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 890 "/usr/local/include/ace/String_Base.h" 2 3
# 24 "/usr/local/include/ace/SString.h" 2 3








 ostream &operator << (ostream &, const ACE_CString &);
 ostream &operator << (ostream &, const ACE_WString &);




# 58 "/usr/local/include/ace/SString.h" 3
class ACE_NS_WString : public ACE_WString
{
public:

  using ACE_WString::size_type;


  ACE_NS_WString (ACE_Allocator *alloc = 0);


  ACE_NS_WString (const char *s,
                  ACE_Allocator *alloc = 0);


  ACE_NS_WString (const ACE_WSTRING_TYPE *s,
                  ACE_Allocator *alloc = 0);




  ACE_NS_WString (const ACE_USHORT16 *s,
                  size_type len,
                  ACE_Allocator *alloc = 0);




  ACE_NS_WString (const ACE_WSTRING_TYPE *s,
                  size_type len,
                  ACE_Allocator *alloc = 0);



  ACE_NS_WString (size_type len, ACE_Allocator *alloc = 0);


  ACE_NS_WString (const ACE_NS_WString &s);


  ACE_NS_WString (ACE_WSTRING_TYPE c, ACE_Allocator *alloc = 0);



  char *char_rep (void) const;



  ACE_USHORT16 *ushort_rep (void) const;
};


ACE_NS_WString operator + (const ACE_NS_WString &,
                           const ACE_NS_WString &);
# 133 "/usr/local/include/ace/SString.h" 3
class ACE_SString
{
public:

  typedef ACE_Allocator::size_type size_type;


  static const size_type npos;


  ACE_SString (ACE_Allocator *alloc = 0);


  ACE_SString (const char *s, ACE_Allocator *alloc = 0);



  ACE_SString (const char *s, size_type len, ACE_Allocator *alloc = 0);


  ACE_SString (const ACE_SString &);


  ACE_SString (char c, ACE_Allocator *alloc = 0);


  ~ACE_SString (void);



  char operator [] (size_type slot) const;



  char &operator [] (size_type slot);


  ACE_SString &operator = (const ACE_SString &);






  ACE_SString substring (size_type offset, size_type length = npos) const;


  ACE_SString substr (size_type offset, size_type length = npos) const;


  u_long hash (void) const;


  size_type length (void) const;



  void rep (char *s);


  const char *rep (void) const;


  const char *fast_rep (void) const;


  const char *c_str (void) const;



  size_type strstr (const ACE_SString &s) const;



  size_type find (const ACE_SString &str, size_type pos = 0) const;



  size_type find (const char *s, size_type pos = 0) const;



  size_type find (char c, size_type pos = 0) const;



  size_type rfind (char c, size_type pos = npos) const;


  bool operator == (const ACE_SString &s) const;


  bool operator < (const ACE_SString &s) const;


  bool operator > (const ACE_SString &s) const;


  bool operator != (const ACE_SString &s) const;


  int compare (const ACE_SString &s) const;


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Allocator *allocator_;


  size_type len_;


  char *rep_;
};


 ostream &operator << (ostream &, const ACE_SString &);







typedef ACE_CString ACE_TString;
# 278 "/usr/local/include/ace/SString.h" 3
class ACE_Auto_String_Free
{
public:
  explicit ACE_Auto_String_Free (char* p = 0);
  ACE_Auto_String_Free (ACE_Auto_String_Free &rhs);
  ACE_Auto_String_Free& operator= (ACE_Auto_String_Free &rhs);
  ~ACE_Auto_String_Free (void);

  char* operator* () const;
  char operator[] (size_t i) const;
  char* get (void) const;
  char* release (void);
  void reset (char* p = 0);

private:
  char* p_;
};




# 1 "/usr/local/include/ace/SString.inl" 1 3
# 14 "/usr/local/include/ace/SString.inl" 3


inline
ACE_NS_WString::ACE_NS_WString (ACE_Allocator *alloc)
  : ACE_WString (alloc)
{
}

inline
ACE_NS_WString::ACE_NS_WString (const ACE_WSTRING_TYPE *s,
                                size_type len,
                                ACE_Allocator *alloc)
  : ACE_WString (s, len, alloc)
{
}

inline
ACE_NS_WString::ACE_NS_WString (const ACE_WSTRING_TYPE *s,
                                ACE_Allocator *alloc)
  : ACE_WString (s, alloc)
{
}

inline
ACE_NS_WString::ACE_NS_WString (size_type len, ACE_Allocator *alloc)
  : ACE_WString (len, 0, alloc)
{
}

inline
ACE_NS_WString::ACE_NS_WString (const ACE_NS_WString &s)
  : ACE_WString (s)
{
}

inline
ACE_NS_WString::ACE_NS_WString (ACE_WSTRING_TYPE c, ACE_Allocator *alloc)
  : ACE_WString (c, alloc)
{
}

inline ACE_NS_WString
operator+ (const ACE_NS_WString &s, const ACE_NS_WString &t)
{
  ACE_NS_WString temp (s);
  temp += t;
  return temp;
}



inline
ACE_SString::~ACE_SString (void)
{
}

inline ACE_SString
ACE_SString::substr (size_type offset,
                     size_type length) const
{
  return this->substring (offset, length);
}



inline char
ACE_SString::operator[] (size_type slot) const
{
  ;
  return this->rep_[slot];
}



inline char &
ACE_SString::operator[] (size_type slot)
{
  ;
  return this->rep_[slot];
}



inline const char *
ACE_SString::rep (void) const
{
  ;
  return this->rep_;
}



inline const char *
ACE_SString::fast_rep (void) const
{
  ;
  return this->rep_;
}



inline const char *
ACE_SString::c_str (void) const
{
  ;
  return this->rep_;
}



inline bool
ACE_SString::operator== (const ACE_SString &s) const
{
  ;
  return this->len_ == s.len_
    && ACE_OS::strcmp (this->rep_, s.rep_) == 0;
}



inline bool
ACE_SString::operator < (const ACE_SString &s) const
{
  ;

  return (this->rep_ && s.rep_)
    ? ACE_OS::strcmp (this->rep_, s.rep_) < 0
    : ((s.rep_) ? true : false);
}



inline bool
ACE_SString::operator > (const ACE_SString &s) const
{
  ;

  return (this->rep_ && s.rep_)
    ? ACE_OS::strcmp (this->rep_, s.rep_) > 0
    : ((this->rep_) ? true : false );
}



inline bool
ACE_SString::operator!= (const ACE_SString &s) const
{
  ;
  return !(*this == s);
}

inline int
ACE_SString::compare (const ACE_SString &s) const
{
  ;
  return ACE_OS::strcmp (this->rep_, s.rep_);
}

inline ACE_SString::size_type
ACE_SString::find (const char *s, size_type pos) const
{
  char *substr = this->rep_ + pos;
  char *pointer = ACE_OS::strstr (substr, s);
  if (pointer == 0)
    return ACE_SString::npos;
  else
    return pointer - this->rep_;
}

inline ACE_SString::size_type
ACE_SString::find (char c, size_type pos) const
{
  char *substr = this->rep_ + pos;
  char *pointer = ACE_OS::strchr (substr, c);
  if (pointer == 0)
    return ACE_SString::npos;
  else
    return pointer - this->rep_;
}

inline ACE_SString::size_type
ACE_SString::strstr (const ACE_SString &s) const
{
  ;

  return this->find (s.rep_);
}

inline ACE_SString::size_type
ACE_SString::find (const ACE_SString &str, size_type pos) const
{
  return this->find (str.rep_, pos);
}

inline ACE_SString::size_type
ACE_SString::rfind (char c, size_type pos) const
{
  if (pos == ACE_SString::npos)
    pos = this->len_;



  for (size_type i = pos; i-- != 0; )
    if (this->rep_[i] == c)
      return i;

  return ACE_SString::npos;
}

inline u_long
ACE_SString::hash (void) const
{
  return ACE::hash_pjw (this->rep_);
}

inline ACE_SString::size_type
ACE_SString::length (void) const
{
  ;
  return this->len_;
}

inline
ACE_Auto_String_Free::ACE_Auto_String_Free (char* p)
  : p_ (p)
{
}

inline
ACE_Auto_String_Free::ACE_Auto_String_Free (ACE_Auto_String_Free& rhs)
  : p_ (rhs.p_)
{
  rhs.p_ = 0;
}

inline void
ACE_Auto_String_Free::reset (char* p)
{
  ACE_OS::free (this->p_);
  this->p_ = p;
}

inline ACE_Auto_String_Free&
ACE_Auto_String_Free::operator= (ACE_Auto_String_Free& rhs)
{
  if (this != &rhs)
    {
      this->reset (rhs.p_);
      rhs.p_ = 0;
    }
  return *this;
}

inline
ACE_Auto_String_Free::~ACE_Auto_String_Free (void)
{
  this->reset (0);
}

inline char*
ACE_Auto_String_Free::operator* (void) const
{
  return this->p_;
}

inline char
ACE_Auto_String_Free::operator[] (size_t i) const
{
  return this->p_[i];
}

inline char*
ACE_Auto_String_Free::get (void) const
{
  return this->p_;
}

inline char*
ACE_Auto_String_Free::release (void)
{
  char* p = this->p_;
  this->p_ = 0;
  return p;
}


# 300 "/usr/local/include/ace/SString.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 303 "/usr/local/include/ace/SString.h" 2 3
# 27 "/usr/local/include/ace/Service_Gestalt.h" 2 3
# 1 "/usr/local/include/ace/Unbounded_Queue.h" 1 3
# 15 "/usr/local/include/ace/Unbounded_Queue.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Unbounded_Queue.h" 2 3

# 1 "/usr/local/include/ace/Node.h" 1 3
# 16 "/usr/local/include/ace/Node.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Node.h" 2 3










template <class T, class C> class ACE_Unbounded_Set_Ex;
template <class T, class C> class ACE_Unbounded_Set_Ex_Iterator;
template <class T, class C> class ACE_Unbounded_Set_Ex_Const_Iterator;
template <class T> class ACE_Unbounded_Queue;
template <class T> class ACE_Unbounded_Queue_Iterator;
template <class T> class ACE_Unbounded_Queue_Const_Iterator;
template <class T> class ACE_Unbounded_Stack;
template <class T> class ACE_Unbounded_Stack_Iterator;






template<class T, class C = void>
class ACE_Node
{
public:
  friend class ACE_Unbounded_Queue<T>;
  friend class ACE_Unbounded_Queue_Iterator<T>;
  friend class ACE_Unbounded_Queue_Const_Iterator<T>;
  friend class ACE_Unbounded_Set_Ex<T, C>;
  friend class ACE_Unbounded_Set_Ex_Iterator<T, C>;
  friend class ACE_Unbounded_Set_Ex_Const_Iterator<T, C>;
  friend class ACE_Unbounded_Stack<T>;
  friend class ACE_Unbounded_Stack_Iterator<T>;


  ~ACE_Node (void);

private:

  ACE_Node (const T &i, ACE_Node<T, C> *n);
  ACE_Node (ACE_Node<T, C> *n = 0, int = 0);
  ACE_Node (const ACE_Node<T, C> &n);
private:

  void operator= (const ACE_Node<T, C> &);

private:

  ACE_Node<T, C> *next_;


  T item_;
};




# 1 "/usr/local/include/ace/Node.cpp" 1 3





# 1 "/usr/local/include/ace/Node.h" 1 3
# 7 "/usr/local/include/ace/Node.cpp" 2 3









template <class T, class C>
ACE_Node<T, C>::~ACE_Node (void)
{
}

template <class T, class C>
ACE_Node<T, C>::ACE_Node (const T &i, ACE_Node<T, C> *n)
  : next_ (n),
    item_ (i)
{

}

template <class T, class C>
ACE_Node<T, C>::ACE_Node (ACE_Node<T, C> *n, int)
  : next_ (n)
{

}

template <class T, class C>
ACE_Node<T, C>::ACE_Node (const ACE_Node<T, C> &s)
  : next_ (s.next_),
    item_ (s.item_)
{

}


# 78 "/usr/local/include/ace/Node.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 85 "/usr/local/include/ace/Node.h" 2 3
# 18 "/usr/local/include/ace/Unbounded_Queue.h" 2 3









class ACE_Allocator;

template <class T>
class ACE_Unbounded_Queue;






template <class T>
class ACE_Unbounded_Queue_Iterator
{
public:

  ACE_Unbounded_Queue_Iterator (ACE_Unbounded_Queue<T> &q, int end = 0);





  int next (T *&next_item);



  int advance (void);



  int first (void);


  int done (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Node<T> *current_;


  ACE_Unbounded_Queue<T> &queue_;
};






template <class T>
class ACE_Unbounded_Queue_Const_Iterator
{
public:

  ACE_Unbounded_Queue_Const_Iterator (const ACE_Unbounded_Queue<T> &q, int end = 0);





  int next (T *&next_item);



  int advance (void);



  int first (void);


  int done (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Node<T> *current_;


  const ACE_Unbounded_Queue<T> &queue_;
};
# 149 "/usr/local/include/ace/Unbounded_Queue.h" 3
template <class T>
class ACE_Unbounded_Queue
{
public:
  friend class ACE_Unbounded_Queue_Iterator<T>;
  friend class ACE_Unbounded_Queue_Const_Iterator<T>;


  typedef ACE_Unbounded_Queue_Iterator<T> ITERATOR;
  typedef ACE_Unbounded_Queue_Const_Iterator<T> CONST_ITERATOR;







  ACE_Unbounded_Queue (ACE_Allocator *alloc = 0);





  ACE_Unbounded_Queue (const ACE_Unbounded_Queue<T> &);





  void operator= (const ACE_Unbounded_Queue<T> &);





  ~ACE_Unbounded_Queue (void);







  bool is_empty (void) const;





  bool is_full (void) const;
# 207 "/usr/local/include/ace/Unbounded_Queue.h" 3
  int enqueue_tail (const T &new_item);






  int enqueue_head (const T &new_item);






  int dequeue_head (T &item);
# 230 "/usr/local/include/ace/Unbounded_Queue.h" 3
  void reset (void);







  int get (T *&item, size_t slot = 0) const;
# 247 "/usr/local/include/ace/Unbounded_Queue.h" 3
  int set (const T &item, size_t slot);





  size_t size (void) const;


  void dump (void) const;


  ACE_Unbounded_Queue_Iterator<T> begin (void);
  ACE_Unbounded_Queue_Iterator<T> end (void);


  struct __Ace {};

protected:

  void delete_nodes (void);


  void copy_nodes (const ACE_Unbounded_Queue<T> &);


  ACE_Node<T> *head_;


  size_t cur_size_;


  ACE_Allocator *allocator_;
};




# 1 "/usr/local/include/ace/Unbounded_Queue.inl" 1 3






template <class T> inline size_t
ACE_Unbounded_Queue<T>::size (void) const
{
  return this->cur_size_;
}

template <class T> inline bool
ACE_Unbounded_Queue<T>::is_empty (void) const
{

  return this->head_ == this->head_->next_;
}

template <class T> inline bool
ACE_Unbounded_Queue<T>::is_full (void) const
{

  return false;
}


# 286 "/usr/local/include/ace/Unbounded_Queue.h" 2 3



# 1 "/usr/local/include/ace/Unbounded_Queue.cpp" 1 3





# 1 "/usr/local/include/ace/Unbounded_Queue.h" 1 3
# 7 "/usr/local/include/ace/Unbounded_Queue.cpp" 2 3
# 20 "/usr/local/include/ace/Unbounded_Queue.cpp" 3




template <class T>
ACE_Unbounded_Queue<T>::ACE_Unbounded_Queue (ACE_Allocator *alloc)
  : head_ (0),
    cur_size_ (0),
    allocator_ (alloc)
{


  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (ACE_Node<T> *) this->allocator_->malloc (sizeof (ACE_Node<T>)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) ACE_Node<T>; } } while (0);



  this->head_->next_ = this->head_;
}

template <class T>
ACE_Unbounded_Queue<T>::ACE_Unbounded_Queue (const ACE_Unbounded_Queue<T> &us)
  : head_ (0),
    cur_size_ (0),
    allocator_ (us.allocator_)
{


  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (ACE_Node<T> *) this->allocator_->malloc (sizeof (ACE_Node<T>)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) ACE_Node<T>; } } while (0);


  this->head_->next_ = this->head_;
  this->copy_nodes (us);
}

template <class T> void
ACE_Unbounded_Queue<T>::operator= (const ACE_Unbounded_Queue<T> &us)
{


  if (this != &us)
    {
      this->delete_nodes ();
      this->copy_nodes (us);
    }
}

template <class T> ACE_Unbounded_Queue_Iterator<T>
ACE_Unbounded_Queue<T>::begin (void)
{

  return ACE_Unbounded_Queue_Iterator<T> (*this);
}

template <class T> ACE_Unbounded_Queue_Iterator<T>
ACE_Unbounded_Queue<T>::end (void)
{

  return ACE_Unbounded_Queue_Iterator<T> (*this, 1);
}

template <class T> void
ACE_Unbounded_Queue<T>::dump (void) const
{
# 109 "/usr/local/include/ace/Unbounded_Queue.cpp" 3
}

template <class T> void
ACE_Unbounded_Queue<T>::copy_nodes (const ACE_Unbounded_Queue<T> &us)
{
  for (ACE_Node<T> *curr = us.head_->next_;
       curr != us.head_;
       curr = curr->next_)
    if (this->enqueue_tail (curr->item_) == -1)

      this->delete_nodes ();
}

template <class T> void
ACE_Unbounded_Queue<T>::delete_nodes (void)
{
  for (ACE_Node<T> *curr = this->head_->next_;

       curr != this->head_;
       )
    {
      ACE_Node<T> *temp = curr;
      curr = curr->next_;

      do { if (temp) { (temp)->~ACE_Node <T> (); this->allocator_->free (temp); } } while (0);



      --this->cur_size_;



    }


  this->head_->next_ = this->head_;
}

template <class T>
ACE_Unbounded_Queue<T>::~ACE_Unbounded_Queue (void)
{


  this->delete_nodes ();
  do { if (head_) { (head_)->~ACE_Node <T> (); this->allocator_->free (head_); } } while (0);



}

template <class T> int
ACE_Unbounded_Queue<T>::enqueue_head (const T &new_item)
{


  ACE_Node<T> *temp = 0;


  do { temp = static_cast<ACE_Node<T> *> (this->allocator_->malloc (sizeof (ACE_Node<T>))); if (temp == 0) { (*__errno_location ()) = 12; return -1;} else { (void) new (temp) ACE_Node<T> (new_item, this->head_->next_); } } while (0);






  this->head_->next_ = temp;

  ++this->cur_size_;
  return 0;
}

template <class T> int
ACE_Unbounded_Queue<T>::enqueue_tail (const T &new_item)
{





  this->head_->item_ = new_item;

  ACE_Node<T> *temp = 0;


  do { temp = static_cast<ACE_Node<T> *> (this->allocator_->malloc (sizeof (ACE_Node<T>))); if (temp == 0) { (*__errno_location ()) = 12; return -1;} else { (void) new (temp) ACE_Node<T> (this->head_->next_); } } while (0);




  this->head_->next_ = temp;


  this->head_ = temp;

  ++this->cur_size_;
  return 0;
}

template <class T> int
ACE_Unbounded_Queue<T>::dequeue_head (T &item)
{



  if (this->is_empty ())
    return -1;

  ACE_Node<T> *temp = this->head_->next_;

  item = temp->item_;
  this->head_->next_ = temp->next_;
  do { if (temp) { (temp)->~ACE_Node <T> (); this->allocator_->free (temp); } } while (0);



  --this->cur_size_;
  return 0;
}

template <class T> void
ACE_Unbounded_Queue<T>::reset (void)
{
  ;

  this->delete_nodes ();
}

template <class T> int
ACE_Unbounded_Queue<T>::get (T *&item, size_t slot) const
{


  ACE_Node<T> *curr = this->head_->next_;

  size_t i;

  for (i = 0; i < this->cur_size_; i++)
    {
      if (i == slot)
        break;

      curr = curr->next_;
    }

  if (i < this->cur_size_)
    {
      item = &curr->item_;
      return 0;
    }
  else
    return -1;
}

template <class T> int
ACE_Unbounded_Queue<T>::set (const T &item,
                             size_t slot)
{


  ACE_Node<T> *curr = this->head_->next_;

  size_t i;

  for (i = 0;
       i < slot && i < this->cur_size_;
       ++i)
    curr = curr->next_;

  if (i < this->cur_size_)
    {

      curr->item_ = item;
      return 0;
    }
  else
    {




      if (i == slot)
        {

          if (this->enqueue_tail (item) == -1)
            return -1;
          else
            return 0;
        }
      else
        {
          T const dummy = T ();


          for (; i < slot; ++i)
            {



              curr = this->head_;



              if (this->enqueue_tail (dummy) == -1)
                return -1;
            }

          curr->item_ = item;
          return 0;
        }
    }
}



template <class T> void
ACE_Unbounded_Queue_Const_Iterator<T>::dump (void) const
{



}

template <class T>
ACE_Unbounded_Queue_Const_Iterator<T>::ACE_Unbounded_Queue_Const_Iterator (const ACE_Unbounded_Queue<T> &q, int end)
  : current_ (end == 0 ? q.head_->next_ : q.head_ ),
    queue_ (q)
{

}

template <class T> int
ACE_Unbounded_Queue_Const_Iterator<T>::advance (void)
{

  this->current_ = this->current_->next_;
  return this->current_ != this->queue_.head_;
}

template <class T> int
ACE_Unbounded_Queue_Const_Iterator<T>::first (void)
{

  this->current_ = this->queue_.head_->next_;
  return this->current_ != this->queue_.head_;
}

template <class T> int
ACE_Unbounded_Queue_Const_Iterator<T>::done (void) const
{
  ;

  return this->current_ == this->queue_.head_;
}

template <class T> int
ACE_Unbounded_Queue_Const_Iterator<T>::next (T *&item)
{

  if (this->current_ == this->queue_.head_)
    return 0;
  else
    {
      item = &this->current_->item_;
      return 1;
    }
}



template <class T> void
ACE_Unbounded_Queue_Iterator<T>::dump (void) const
{



}

template <class T>
ACE_Unbounded_Queue_Iterator<T>::ACE_Unbounded_Queue_Iterator (ACE_Unbounded_Queue<T> &q, int end)
  : current_ (end == 0 ? q.head_->next_ : q.head_ ),
    queue_ (q)
{

}

template <class T> int
ACE_Unbounded_Queue_Iterator<T>::advance (void)
{

  this->current_ = this->current_->next_;
  return this->current_ != this->queue_.head_;
}

template <class T> int
ACE_Unbounded_Queue_Iterator<T>::first (void)
{

  this->current_ = this->queue_.head_->next_;
  return this->current_ != this->queue_.head_;
}

template <class T> int
ACE_Unbounded_Queue_Iterator<T>::done (void) const
{
  ;

  return this->current_ == this->queue_.head_;
}

template <class T> int
ACE_Unbounded_Queue_Iterator<T>::next (T *&item)
{

  if (this->current_ == this->queue_.head_)
    return 0;
  else
    {
      item = &this->current_->item_;
      return 1;
    }
}


# 290 "/usr/local/include/ace/Unbounded_Queue.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 297 "/usr/local/include/ace/Unbounded_Queue.h" 2 3
# 28 "/usr/local/include/ace/Service_Gestalt.h" 2 3
# 1 "/usr/local/include/ace/Unbounded_Set.h" 1 3
# 15 "/usr/local/include/ace/Unbounded_Set.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Unbounded_Set.h" 2 3

# 1 "/usr/local/include/ace/Unbounded_Set_Ex.h" 1 3
# 15 "/usr/local/include/ace/Unbounded_Set_Ex.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Unbounded_Set_Ex.h" 2 3
# 25 "/usr/local/include/ace/Unbounded_Set_Ex.h" 3


class ACE_Allocator;

template <class T, class C>
class ACE_Unbounded_Set_Ex_Iterator;

template <class T, class C>
class ACE_Unbounded_Set_Ex_Const_Iterator;

template <class T, class C>
class ACE_Unbounded_Set_Ex;






template <class T, class C>
class ACE_Unbounded_Set_Ex_Iterator
{
public:

  typedef ACE_Unbounded_Set_Ex<T, C> container_type;


  typedef std::forward_iterator_tag iterator_category;
  typedef typename container_type::value_type value_type;
  typedef typename container_type::reference reference;
  typedef typename container_type::pointer pointer;
  typedef typename container_type::difference_type difference_type;


  ACE_Unbounded_Set_Ex_Iterator (ACE_Unbounded_Set_Ex<T, C> &s, bool end = false);





  int next (T *&next_item);



  int advance (void);



  int first (void);


  int done (void) const;


  void dump (void) const;




  ACE_Unbounded_Set_Ex_Iterator<T, C> operator++ (int);


  ACE_Unbounded_Set_Ex_Iterator<T, C>& operator++ (void);


  T& operator* (void);


  bool operator== (const ACE_Unbounded_Set_Ex_Iterator<T, C> &) const;
  bool operator!= (const ACE_Unbounded_Set_Ex_Iterator<T, C> &) const;


  struct __Ace {};

private:


  ACE_Node<T, C> *current_;


  ACE_Unbounded_Set_Ex<T, C> *set_;
};






template <class T, class C>
class ACE_Unbounded_Set_Ex_Const_Iterator
{
public:
  typedef ACE_Unbounded_Set_Ex<T, C> container_type;


  typedef std::forward_iterator_tag iterator_category;
  typedef typename container_type::const_value_type value_type;
  typedef typename container_type::const_reference reference;
  typedef typename container_type::const_pointer pointer;
  typedef typename container_type::difference_type difference_type;


  ACE_Unbounded_Set_Ex_Const_Iterator (const ACE_Unbounded_Set_Ex<T, C> &s,
                                       bool end = false);





  int next (T *&next_item);



  int advance (void);



  int first (void);


  int done (void) const;


  void dump (void) const;




  ACE_Unbounded_Set_Ex_Const_Iterator<T, C> operator++ (int);


  ACE_Unbounded_Set_Ex_Const_Iterator<T, C>& operator++ (void);


  T& operator* (void);


  bool operator== (const ACE_Unbounded_Set_Ex_Const_Iterator<T, C> &) const;
  bool operator!= (const ACE_Unbounded_Set_Ex_Const_Iterator<T, C> &) const;


  struct __Ace {};

private:


  ACE_Node<T, C> *current_;


  const ACE_Unbounded_Set_Ex<T, C> *set_;
};
# 214 "/usr/local/include/ace/Unbounded_Set_Ex.h" 3
template <class T, class C>
class ACE_Unbounded_Set_Ex
{
public:
  friend class ACE_Unbounded_Set_Ex_Iterator<T, C>;
  friend class ACE_Unbounded_Set_Ex_Const_Iterator<T, C>;


  typedef ACE_Unbounded_Set_Ex_Iterator<T, C> ITERATOR;
  typedef ACE_Unbounded_Set_Ex_Iterator<T, C> iterator;
  typedef ACE_Unbounded_Set_Ex_Const_Iterator<T, C> CONST_ITERATOR;
  typedef ACE_Unbounded_Set_Ex_Const_Iterator<T, C> const_iterator;
  typedef C COMP;
  typedef ACE_Node<T, C> NODE;


  typedef T value_type;
  typedef T const const_value_type;
  typedef value_type & reference;
  typedef const_value_type & const_reference;
  typedef value_type * pointer;
  typedef const_value_type * const_pointer;
  typedef ptrdiff_t difference_type;
# 245 "/usr/local/include/ace/Unbounded_Set_Ex.h" 3
  ACE_Unbounded_Set_Ex (ACE_Allocator *alloc = 0);





  ACE_Unbounded_Set_Ex (const C &comparator, ACE_Allocator *alloc = 0);





  ACE_Unbounded_Set_Ex (const ACE_Unbounded_Set_Ex<T, C> &);





  ACE_Unbounded_Set_Ex<T, C> & operator= (const ACE_Unbounded_Set_Ex<T, C> &);





  ~ACE_Unbounded_Set_Ex (void);







  bool is_empty (void) const;





  bool is_full (void) const;
# 293 "/usr/local/include/ace/Unbounded_Set_Ex.h" 3
  int insert (const T &new_item);






  int insert_tail (const T &item);







  int remove (const T &item);






  int find (const T &item) const;





  size_t size (void) const;


  void dump (void) const;





  void reset (void);


  iterator begin (void);
  iterator end (void);
  const_iterator begin (void) const;
  const_iterator end (void) const;


  struct __Ace {};

private:

  void delete_nodes (void);


  void copy_nodes (const ACE_Unbounded_Set_Ex<T, C> &);


  NODE *head_;


  size_t cur_size_;


  ACE_Allocator *allocator_;


  COMP comp_;
};




# 1 "/usr/local/include/ace/Unbounded_Set_Ex.inl" 1 3








template <class T, class C> inline bool
ACE_Unbounded_Set_Ex<T,C>::is_empty (void) const
{
  ;
  return this->head_ == this->head_->next_;
}

template <class T, class C> inline bool
ACE_Unbounded_Set_Ex<T, C>::is_full (void) const
{
  ;
  return 0;
}


# 365 "/usr/local/include/ace/Unbounded_Set_Ex.h" 2 3



# 1 "/usr/local/include/ace/Unbounded_Set_Ex.cpp" 1 3





# 1 "/usr/local/include/ace/Unbounded_Set.h" 1 3
# 7 "/usr/local/include/ace/Unbounded_Set_Ex.cpp" 2 3
# 18 "/usr/local/include/ace/Unbounded_Set_Ex.cpp" 3




template <class T, class C> size_t
ACE_Unbounded_Set_Ex<T, C>::size (void) const
{

  return this->cur_size_;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex<T, C>::insert_tail (const T &item)
{

  NODE *temp = 0;


  this->head_->item_ = item;


  do { temp = static_cast<NODE*> (this->allocator_->malloc (sizeof (NODE))); if (temp == 0) { (*__errno_location ()) = 12; return -1;} else { (void) new (temp) NODE (this->head_->next_); } } while (0);




  this->head_->next_ = temp;


  this->head_ = temp;

  ++this->cur_size_;
  return 0;
}

template <class T, class C> void
ACE_Unbounded_Set_Ex<T, C>::reset (void)
{
  ;

  this->delete_nodes ();
}

template <class T, class C> void
ACE_Unbounded_Set_Ex<T, C>::dump (void) const
{
# 85 "/usr/local/include/ace/Unbounded_Set_Ex.cpp" 3
}

template <class T, class C> void
ACE_Unbounded_Set_Ex<T, C>::copy_nodes (const ACE_Unbounded_Set_Ex<T, C> &us)
{
  for (NODE *curr = us.head_->next_;
       curr != us.head_;
       curr = curr->next_)
    this->insert_tail (curr->item_);
}

template <class T, class C> void
ACE_Unbounded_Set_Ex<T, C>::delete_nodes (void)
{
  NODE *curr = this->head_->next_;



  while (curr != this->head_)
    {
      NODE *temp = curr;
      curr = curr->next_;
      do { if (temp) { (temp)->~ACE_Node <T, C> (); this->allocator_->free (temp); } } while (0);



      --this->cur_size_;
    }


  this->head_->next_ = this->head_;
}

template <class T, class C>
ACE_Unbounded_Set_Ex<T, C>::~ACE_Unbounded_Set_Ex (void)
{


  this->delete_nodes ();


  do { if (head_) { (head_)->~ACE_Node <T, C> (); this->allocator_->free (head_); } } while (0);



  this->head_ = 0;
}

template <class T, class C>
ACE_Unbounded_Set_Ex<T, C>::ACE_Unbounded_Set_Ex (ACE_Allocator *alloc)
  : head_ (0),
    cur_size_ (0),
    allocator_ (alloc)
{


  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (NODE*) this->allocator_->malloc (sizeof (NODE)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) NODE; } } while (0);



  this->head_->next_ = this->head_;
}

template <class T, class C>
ACE_Unbounded_Set_Ex<T, C>::ACE_Unbounded_Set_Ex (const C &comp,
                                            ACE_Allocator *alloc)
  : head_ (0),
    cur_size_ (0),
    allocator_ (alloc),
    comp_ (comp)
{


  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (NODE*) this->allocator_->malloc (sizeof (NODE)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) NODE; } } while (0);



  this->head_->next_ = this->head_;
}

template <class T, class C>
ACE_Unbounded_Set_Ex<T, C>::ACE_Unbounded_Set_Ex (const ACE_Unbounded_Set_Ex<T, C> &us)
  : head_ (0),
    cur_size_ (0),
    allocator_ (us.allocator_),
    comp_ (us.comp_)
{
  ;

  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (NODE*) this->allocator_->malloc (sizeof (NODE)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) NODE; } } while (0);


  this->head_->next_ = this->head_;
  this->copy_nodes (us);
}

template <class T, class C> ACE_Unbounded_Set_Ex<T, C> &
ACE_Unbounded_Set_Ex<T, C>::operator= (const ACE_Unbounded_Set_Ex<T, C> &us)
{
  ;

  if (this != &us)
    {
      this->delete_nodes ();
      this->copy_nodes (us);
    }

  return *this;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex<T, C>::find (const T &item) const
{

  const_iterator const the_end = this->end ();
  for (const_iterator i = this->begin (); i != the_end; ++i)
    if (this->comp_(*i, item))
      return 0;

  return -1;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex<T, C>::insert (const T &item)
{

  if (this->find (item) == 0)
    return 1;
  else
    return this->insert_tail (item);
}

template <class T, class C> int
ACE_Unbounded_Set_Ex<T, C>::remove (const T &item)
{



  this->head_->item_ = item;

  NODE *curr = this->head_;

  while (!(this->comp_ (curr->next_->item_, item)))
    curr = curr->next_;

  if (curr->next_ == this->head_)
    return -1;
  else
    {
      NODE *temp = curr->next_;

      curr->next_ = temp->next_;
      --this->cur_size_;
      do { if (temp) { (temp)->~ACE_Node <T, C> (); this->allocator_->free (temp); } } while (0);



      return 0;
    }
}

template <class T, class C> typename ACE_Unbounded_Set_Ex<T, C>::iterator
ACE_Unbounded_Set_Ex<T, C>::begin (void)
{

  return iterator (*this);
}

template <class T, class C> typename ACE_Unbounded_Set_Ex<T, C>::iterator
ACE_Unbounded_Set_Ex<T, C>::end (void)
{

  return iterator (*this, 1);
}

template <class T, class C> typename ACE_Unbounded_Set_Ex<T, C>::const_iterator
ACE_Unbounded_Set_Ex<T, C>::begin (void) const
{

  return const_iterator (*this);
}

template <class T, class C> typename ACE_Unbounded_Set_Ex<T, C>::const_iterator
ACE_Unbounded_Set_Ex<T, C>::end (void) const
{

  return const_iterator (*this, 1);
}



template <class T, class C> void
ACE_Unbounded_Set_Ex_Iterator<T, C>::dump (void) const
{



}

template <class T, class C>
ACE_Unbounded_Set_Ex_Iterator<T, C>::ACE_Unbounded_Set_Ex_Iterator (
  ACE_Unbounded_Set_Ex<T, C> &s,
  bool end)
  : current_ (!end ? s.head_->next_ : s.head_ ),
    set_ (&s)
{

}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Iterator<T, C>::advance (void)
{

  this->current_ = this->current_->next_;
  return this->current_ != this->set_->head_;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Iterator<T, C>::first (void)
{

  this->current_ = this->set_->head_->next_;
  return this->current_ != this->set_->head_;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Iterator<T, C>::done (void) const
{
  ;

  return this->current_ == this->set_->head_;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Iterator<T, C>::next (T *&item)
{

  if (this->current_ == this->set_->head_)
    return 0;
  else
    {
      item = &this->current_->item_;
      return 1;
    }
}

template <class T, class C> ACE_Unbounded_Set_Ex_Iterator<T, C>
ACE_Unbounded_Set_Ex_Iterator<T, C>::operator++ (int)
{

  ACE_Unbounded_Set_Ex_Iterator<T, C> retv (*this);



  this->advance ();
  return retv;
}

template <class T, class C> ACE_Unbounded_Set_Ex_Iterator<T, C>&
ACE_Unbounded_Set_Ex_Iterator<T, C>::operator++ (void)
{




  this->advance ();
  return *this;
}

template <class T, class C> T&
ACE_Unbounded_Set_Ex_Iterator<T, C>::operator* (void)
{

  T *retv = 0;

  int result = this->next (retv);
  ((result != 0) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Unbounded_Set_Ex.cpp", 370, "result != 0"));
  (void) (result);

  return *retv;
}

template <class T, class C> bool
ACE_Unbounded_Set_Ex_Iterator<T, C>::operator== (const ACE_Unbounded_Set_Ex_Iterator<T, C> &rhs) const
{

  return (this->set_ == rhs.set_ && this->current_ == rhs.current_);
}

template <class T, class C> bool
ACE_Unbounded_Set_Ex_Iterator<T, C>::operator!= (const ACE_Unbounded_Set_Ex_Iterator<T, C> &rhs) const
{

  return (this->set_ != rhs.set_ || this->current_ != rhs.current_);
}



template <class T, class C> void
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::dump (void) const
{



}

template <class T, class C>
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::ACE_Unbounded_Set_Ex_Const_Iterator (
  const ACE_Unbounded_Set_Ex<T, C> &s,
  bool end)
  : current_ (!end ? s.head_->next_ : s.head_ ),
    set_ (&s)
{

}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::advance (void)
{

  this->current_ = this->current_->next_;
  return this->current_ != this->set_->head_;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::first (void)
{

  this->current_ = this->set_->head_->next_;
  return this->current_ != this->set_->head_;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::done (void) const
{
  ;

  return this->current_ == this->set_->head_;
}

template <class T, class C> int
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::next (T *&item)
{

  if (this->current_ == this->set_->head_)
    return 0;
  else
    {
      item = &this->current_->item_;
      return 1;
    }
}

template <class T, class C> ACE_Unbounded_Set_Ex_Const_Iterator<T, C>
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::operator++ (int)
{

  ACE_Unbounded_Set_Ex_Const_Iterator<T, C> retv (*this);



  this->advance ();
  return retv;
}

template <class T, class C> ACE_Unbounded_Set_Ex_Const_Iterator<T, C>&
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::operator++ (void)
{




  this->advance ();
  return *this;
}

template <class T, class C> T&
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::operator* (void)
{

  T *retv = 0;

  int const result = this->next (retv);
  ((result != 0) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Unbounded_Set_Ex.cpp", 477, "result != 0"));
  (void) (result);

  return *retv;
}

template <class T, class C> bool
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::operator== (const ACE_Unbounded_Set_Ex_Const_Iterator<T, C> &rhs) const
{

  return (this->set_ == rhs.set_ && this->current_ == rhs.current_);
}

template <class T, class C> bool
ACE_Unbounded_Set_Ex_Const_Iterator<T, C>::operator!= (const ACE_Unbounded_Set_Ex_Const_Iterator<T, C> &rhs) const
{

  return (this->set_ != rhs.set_ || this->current_ != rhs.current_);
}


# 369 "/usr/local/include/ace/Unbounded_Set_Ex.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 376 "/usr/local/include/ace/Unbounded_Set_Ex.h" 2 3
# 18 "/usr/local/include/ace/Unbounded_Set.h" 2 3







class ACE_Allocator;





template<typename T>
struct ACE_Unbounded_Set_Default_Comparator
{
  bool operator() (const T&lhs, const T&rhs) const;
};

template<typename T>
class ACE_Unbounded_Set;





template <typename T>
class ACE_Unbounded_Set_Iterator : public
  ACE_Unbounded_Set_Ex_Iterator<T, ACE_Unbounded_Set_Default_Comparator<T> >
{
public:
  typedef ACE_Unbounded_Set_Ex_Iterator<T, ACE_Unbounded_Set_Default_Comparator<T> > base_type;


  ACE_Unbounded_Set_Iterator (ACE_Unbounded_Set<T> &s, bool end = false);

  ACE_Unbounded_Set_Iterator (const base_type &s);
};





template <class T>
class ACE_Unbounded_Set_Const_Iterator : public
  ACE_Unbounded_Set_Ex_Const_Iterator<T, ACE_Unbounded_Set_Default_Comparator<T> >
{
public:

  typedef ACE_Unbounded_Set_Ex_Const_Iterator<T, ACE_Unbounded_Set_Default_Comparator<T> > base_type;


  ACE_Unbounded_Set_Const_Iterator (const ACE_Unbounded_Set<T> &s,
                                    bool end = false);

  ACE_Unbounded_Set_Const_Iterator (const base_type &s);
};





template<typename T>
class ACE_Unbounded_Set : public
  ACE_Unbounded_Set_Ex<T, ACE_Unbounded_Set_Default_Comparator<T> >
{
public:
  ACE_Unbounded_Set (ACE_Allocator *alloc = 0);
};




# 1 "/usr/local/include/ace/Unbounded_Set.inl" 1 3








template <typename T> inline bool
ACE_Unbounded_Set_Default_Comparator<T>::operator () (const T &lhs, const T &rhs) const
{
  return lhs == rhs;
}

template<typename T>
ACE_Unbounded_Set_Iterator<T>::ACE_Unbounded_Set_Iterator (ACE_Unbounded_Set<T> &s,
                                                           bool end)
  : base_type (s, end)
{
}

template<typename T>
ACE_Unbounded_Set_Iterator<T>::ACE_Unbounded_Set_Iterator (const base_type & s)
  : base_type (s)
{
}

template<typename T>
ACE_Unbounded_Set_Const_Iterator<T>::
ACE_Unbounded_Set_Const_Iterator (const ACE_Unbounded_Set<T> &s,
                                  bool end)
  : base_type (s, end)
{
}

template<typename T>
ACE_Unbounded_Set_Const_Iterator<T>::ACE_Unbounded_Set_Const_Iterator (const base_type & s)
  : base_type (s)
{
}

template<typename T>
ACE_Unbounded_Set<T>::ACE_Unbounded_Set (ACE_Allocator *alloc)
  : ACE_Unbounded_Set_Ex<T, ACE_Unbounded_Set_Default_Comparator<T> > (alloc)
{
}



# 92 "/usr/local/include/ace/Unbounded_Set.h" 2 3



# 1 "/usr/local/include/ace/Unbounded_Set.cpp" 1 3
# 96 "/usr/local/include/ace/Unbounded_Set.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 103 "/usr/local/include/ace/Unbounded_Set.h" 2 3
# 29 "/usr/local/include/ace/Service_Gestalt.h" 2 3
# 1 "/usr/local/include/ace/Service_Repository.h" 1 3
# 16 "/usr/local/include/ace/Service_Repository.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Service_Repository.h" 2 3
# 25 "/usr/local/include/ace/Service_Repository.h" 3
# 1 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 1 3
# 18 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 2 3
# 33 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 3








class ACE_Recursive_Thread_Mutex
{
public:

  ACE_Recursive_Thread_Mutex (const ACE_TCHAR *name = 0,
                              ACE_mutexattr_t *arg = 0);


  ~ACE_Recursive_Thread_Mutex (void);






  int remove (void);






  int acquire (void);
# 72 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 3
  int acquire (ACE_Time_Value &tv);
# 82 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 3
  int acquire (ACE_Time_Value *tv);






  int tryacquire (void);






  int acquire_read (void);






  int acquire_write (void);
# 113 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 3
  int tryacquire_read (void);
# 123 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 3
  int tryacquire_write (void);







  int tryacquire_write_upgrade (void);






  int release (void);


  ACE_thread_t get_thread_id (void);
# 151 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 3
  int get_nesting_level (void);


  ACE_recursive_thread_mutex_t &lock (void);


  ACE_recursive_thread_mutex_t &mutex (void);


  ACE_thread_mutex_t &get_nesting_mutex (void);


  void dump (void) const;


  struct __Ace {};

protected:

  void set_thread_id (ACE_thread_t t);


  ACE_recursive_thread_mutex_t lock_;






  bool removed_;

private:

  void operator= (const ACE_Recursive_Thread_Mutex &);
  ACE_Recursive_Thread_Mutex (const ACE_Recursive_Thread_Mutex &);
};




# 1 "/usr/local/include/ace/Recursive_Thread_Mutex.inl" 1 3






inline ACE_recursive_thread_mutex_t &
ACE_Recursive_Thread_Mutex::lock (void)
{
  return lock_;
}

inline ACE_thread_mutex_t &
ACE_Recursive_Thread_Mutex::get_nesting_mutex (void)
{



  return lock_.nesting_mutex_;

}

inline void
ACE_Recursive_Thread_Mutex::set_thread_id (ACE_thread_t t)
{




  this->lock_.owner_id_ = t;

}

inline int
ACE_Recursive_Thread_Mutex::acquire (void)
{
  return ACE_OS::recursive_mutex_lock (&this->lock_);
}

inline int
ACE_Recursive_Thread_Mutex::release (void)
{
  return ACE_OS::recursive_mutex_unlock (&this->lock_);
}

inline int
ACE_Recursive_Thread_Mutex::tryacquire (void)
{
  return ACE_OS::recursive_mutex_trylock (&this->lock_);
}

inline int
ACE_Recursive_Thread_Mutex::acquire (ACE_Time_Value &tv)
{
  return ACE_OS::recursive_mutex_lock (&this->lock_, tv);
}

inline int
ACE_Recursive_Thread_Mutex::acquire (ACE_Time_Value *tv)
{
  return ACE_OS::recursive_mutex_lock (&this->lock_, tv);
}

inline int
ACE_Recursive_Thread_Mutex::acquire_read (void)
{
  return this->acquire ();
}

inline int
ACE_Recursive_Thread_Mutex::acquire_write (void)
{
  return this->acquire ();
}

inline int
ACE_Recursive_Thread_Mutex::tryacquire_read (void)
{
  return this->tryacquire ();
}

inline int
ACE_Recursive_Thread_Mutex::tryacquire_write (void)
{
  return this->tryacquire ();
}

inline int
ACE_Recursive_Thread_Mutex::tryacquire_write_upgrade (void)
{
  return 0;
}


# 192 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 2 3




# 1 "/usr/local/include/ace/post.h" 1 3
# 197 "/usr/local/include/ace/Recursive_Thread_Mutex.h" 2 3
# 26 "/usr/local/include/ace/Service_Repository.h" 2 3
# 1 "/usr/local/include/ace/Array_Map.h" 1 3
# 23 "/usr/local/include/ace/Array_Map.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 24 "/usr/local/include/ace/Array_Map.h" 2 3







# 1 "/usr/include/c++/4.4/utility" 1 3
# 59 "/usr/include/c++/4.4/utility" 3
       
# 60 "/usr/include/c++/4.4/utility" 3


# 1 "/usr/include/c++/4.4/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/4.4/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  namespace rel_ops
  {
# 83 "/usr/include/c++/4.4/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 96 "/usr/include/c++/4.4/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 109 "/usr/include/c++/4.4/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 122 "/usr/include/c++/4.4/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }

  }

}
# 63 "/usr/include/c++/4.4/utility" 2 3
# 32 "/usr/local/include/ace/Array_Map.h" 2 3

# 1 "/usr/include/c++/4.4/functional" 1 3
# 47 "/usr/include/c++/4.4/functional" 3
       
# 48 "/usr/include/c++/4.4/functional" 3
# 34 "/usr/local/include/ace/Array_Map.h" 2 3


# 87 "/usr/local/include/ace/Array_Map.h" 3
template<typename Key, typename Value, class EqualTo = std::equal_to<Key> >
class ACE_Array_Map
{
public:


  typedef Key key_type;
  typedef Value data_type;
  typedef std::pair<key_type, data_type> value_type;
  typedef value_type * iterator;
  typedef value_type const * const_iterator;
  typedef value_type & reference;
  typedef value_type const & const_reference;
  typedef value_type * pointer;
  typedef value_type const * const_pointer;
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;

  typedef std::reverse_iterator<iterator> reverse_iterator; typedef std::reverse_iterator<const_iterator> const_reverse_iterator;





  ACE_Array_Map (size_type s = 0);


  template<typename InputIterator>
  ACE_Array_Map (InputIterator f, InputIterator l);




  ACE_Array_Map (ACE_Array_Map const & map);
  ACE_Array_Map & operator= (ACE_Array_Map const & map);


  ~ACE_Array_Map (void);







  iterator begin (void);
  iterator end (void);
  const_iterator begin (void) const;
  const_iterator end (void) const;
# 144 "/usr/local/include/ace/Array_Map.h" 3
  reverse_iterator rbegin (void);
  reverse_iterator rend (void);
  const_reverse_iterator rbegin (void) const;
  const_reverse_iterator rend (void) const;






  size_type size (void) const;


  size_type max_size (void) const;


  bool is_empty (void) const;






  bool empty (void) const;



  void swap (ACE_Array_Map & map);
# 182 "/usr/local/include/ace/Array_Map.h" 3
  std::pair<iterator, bool> insert (value_type const & x);



  template<typename InputIterator>
  void insert (InputIterator f, InputIterator l);






  void erase (iterator pos);





  size_type erase (key_type const & k);





  void erase (iterator first, iterator last);





  void clear (void);
# 224 "/usr/local/include/ace/Array_Map.h" 3
  iterator find (key_type const & k);





  const_iterator find (key_type const & k) const;







  size_type count (key_type const & k);
# 247 "/usr/local/include/ace/Array_Map.h" 3
  data_type & operator[] (key_type const & k);

private:


  void grow (size_type s);

private:


  size_type size_;





  size_type capacity_;


  value_type * nodes_;

};




template <typename Key, typename Value, class EqualTo>
bool operator== (ACE_Array_Map<Key, Value, EqualTo> const & lhs,
                 ACE_Array_Map<Key, Value, EqualTo> const & rhs);


template <typename Key, typename Value, class EqualTo>
bool operator< (ACE_Array_Map<Key, Value, EqualTo> const & lhs,
                 ACE_Array_Map<Key, Value, EqualTo> const & rhs);






# 1 "/usr/local/include/ace/Array_Map.inl" 1 3






template<typename Key, typename Value, class EqualTo>
inline
ACE_Array_Map<Key, Value, EqualTo>::ACE_Array_Map (
  typename ACE_Array_Map<Key, Value, EqualTo>::size_type s)
  : size_ (0)
  , capacity_ (s)
  , nodes_ (s == 0 ? 0 : new value_type[s])
{
}

template<typename Key, typename Value, class EqualTo>
inline ACE_Array_Map<Key, Value, EqualTo> &
ACE_Array_Map<Key, Value, EqualTo>::operator= (
  ACE_Array_Map<Key, Value, EqualTo> const & map)
{


  ACE_Array_Map<Key, Value, EqualTo> temp (map);
  this->swap (temp);
  return *this;
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::iterator
ACE_Array_Map<Key, Value, EqualTo>::begin (void)
{
  return this->nodes_;
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::iterator
ACE_Array_Map<Key, Value, EqualTo>::end (void)
{
  return this->nodes_ + this->size_;
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::const_iterator
ACE_Array_Map<Key, Value, EqualTo>::begin (void) const
{
  return this->nodes_;
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::const_iterator
ACE_Array_Map<Key, Value, EqualTo>::end (void) const
{
  return this->nodes_ + this->size_;
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::reverse_iterator
ACE_Array_Map<Key, Value, EqualTo>::rbegin (void)
{
  return reverse_iterator (this->end ());
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::reverse_iterator
ACE_Array_Map<Key, Value, EqualTo>::rend (void)
{
  return reverse_iterator (this->begin ());
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::const_reverse_iterator
ACE_Array_Map<Key, Value, EqualTo>::rbegin (void) const
{
  return const_reverse_iterator (this->end ());
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::const_reverse_iterator
ACE_Array_Map<Key, Value, EqualTo>::rend (void) const
{
  return const_reverse_iterator (this->begin ());
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::size_type
ACE_Array_Map<Key, Value, EqualTo>::size (void) const
{
  return this->size_;
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::size_type
ACE_Array_Map<Key, Value, EqualTo>::max_size (void) const
{
  return size_type (-1) / sizeof (value_type);
}

template<typename Key, typename Value, class EqualTo>
inline bool
ACE_Array_Map<Key, Value, EqualTo>::is_empty (void) const
{
  return this->size_ == 0;
}



template<typename Key, typename Value, class EqualTo>
inline bool
ACE_Array_Map<Key, Value, EqualTo>::empty (void) const
{
  return this->is_empty ();
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::size_type
ACE_Array_Map<Key, Value, EqualTo>::count (
  typename ACE_Array_Map<Key, Value, EqualTo>::key_type const & k)
{
  return
    (this->find (k) == this->end () ? 0 : 1);
}

template<typename Key, typename Value, class EqualTo>
inline typename ACE_Array_Map<Key, Value, EqualTo>::data_type &
ACE_Array_Map<Key, Value, EqualTo>::operator[] (
  typename ACE_Array_Map<Key, Value, EqualTo>::key_type const & k)
{
  iterator i = (this->insert (value_type (k, data_type ()))).first;
  return (*i).second;
}


# 288 "/usr/local/include/ace/Array_Map.h" 2 3



# 1 "/usr/local/include/ace/Array_Map.cpp" 1 3





# 1 "/usr/local/include/ace/Array_Map.h" 1 3
# 7 "/usr/local/include/ace/Array_Map.cpp" 2 3





# 1 "/usr/local/include/ace/checked_iterator.h" 1 3
# 48 "/usr/local/include/ace/checked_iterator.h" 3
template <typename PTR>
PTR
ACE_make_checked_array_iterator (PTR buf, size_t )
{


  return buf;
}
# 13 "/usr/local/include/ace/Array_Map.cpp" 2 3






template<typename Key, typename Value, class EqualTo>
template<typename InputIterator>
ACE_Array_Map<Key, Value, EqualTo>::ACE_Array_Map (InputIterator f,
                                                   InputIterator l)
  : size_ (l - f)
  , capacity_ (size_)
  , nodes_ (size_ == 0 ? 0 : new value_type[size_])
{
  (void) std::copy (f,
                    l,
                    ACE_make_checked_array_iterator (this->begin (),
                                                     this->size_));





}
# 58 "/usr/local/include/ace/Array_Map.cpp" 3
template<typename Key, typename Value, class EqualTo>
ACE_Array_Map<Key, Value, EqualTo>::ACE_Array_Map (
  ACE_Array_Map<Key, Value, EqualTo> const & map)
  : size_ (map.size_)
  , capacity_ (map.size_)
  , nodes_ (size_ == 0 ? 0 : new value_type[size_])
{
  std::copy (map.begin (),
             map.end (),
             ACE_make_checked_array_iterator (this->begin (),
                                              this->size_));







}

template<typename Key, typename Value, class EqualTo>
ACE_Array_Map<Key, Value, EqualTo>::~ACE_Array_Map (void)
{
  delete[] this->nodes_;
}

template<typename Key, typename Value, class EqualTo>
void
ACE_Array_Map<Key, Value, EqualTo>::swap (
  ACE_Array_Map<Key, Value, EqualTo> & map)
{
  std::swap (this->size_, map.size_);
  std::swap (this->capacity_, map.capacity_);
  std::swap (this->nodes_, map.nodes_);
}

template<typename Key, typename Value, class EqualTo>
std::pair<typename ACE_Array_Map<Key, Value, EqualTo>::iterator, bool>
ACE_Array_Map<Key, Value, EqualTo>::insert (
  typename ACE_Array_Map<Key, Value, EqualTo>::value_type const & x)
{


  bool inserted = false;
  iterator i = this->find (x.first);

  if (i == this->end ())
    {


      size_type const old_size = this->size ();
      this->grow (1);

      i = this->begin () + old_size;
      *i = x;

       ++this->size_;

      inserted = true;
    }

  return std::make_pair (i, inserted);
}


template<typename Key, typename Value, class EqualTo>
template<typename InputIterator>
void
ACE_Array_Map<Key, Value, EqualTo>::insert (InputIterator f, InputIterator l)
{
  this->grow (l - f);

  for (InputIterator i = f; i != l; ++i)
    {
      (void) this->insert (*i);
    }
}
# 151 "/usr/local/include/ace/Array_Map.cpp" 3
template<typename Key, typename Value, class EqualTo>
void
ACE_Array_Map<Key, Value, EqualTo>::erase (
  typename ACE_Array_Map<Key, Value, EqualTo>::iterator pos)
{
  iterator const first = this->begin ();
  iterator const last = this->end ();

  if (pos >= first && pos < last)
    {
      if (pos != last - 1)
        {



          *pos = *(last - 1);
        }




      *(last - 1) = value_type ();

      --this->size_;
    }
}

template<typename Key, typename Value, class EqualTo>
typename ACE_Array_Map<Key, Value, EqualTo>::size_type
ACE_Array_Map<Key, Value, EqualTo>::erase (
  typename ACE_Array_Map<Key, Value, EqualTo>::key_type const & k)
{
  iterator pos = this->find (k);

  size_type const old_size = this->size_;

  this->erase (pos);

  return old_size - this->size_;
}

template<typename Key, typename Value, class EqualTo>
void
ACE_Array_Map<Key, Value, EqualTo>::erase (
  typename ACE_Array_Map<Key, Value, EqualTo>::iterator first,
  typename ACE_Array_Map<Key, Value, EqualTo>::iterator last)
{
  if (this->begin () <= first && first < last && last < this->end ())
    for (iterator i = first; i != last; ++i)
      this->erase (i);
}

template<typename Key, typename Value, class EqualTo>
void
ACE_Array_Map<Key, Value, EqualTo>::clear (void)
{
  this->size_ = 0;
}

template<typename Key, typename Value, class EqualTo>
typename ACE_Array_Map<Key, Value, EqualTo>::iterator
ACE_Array_Map<Key, Value, EqualTo>::find (
  typename ACE_Array_Map<Key, Value, EqualTo>::key_type const & k)
{
  iterator const the_end = this->end ();

  EqualTo eq;

  for (iterator i = this->begin (); i != the_end; ++i)
    if (eq (k, i->first))
      return i;

  return this->end ();
}

template<typename Key, typename Value, class EqualTo>
typename ACE_Array_Map<Key, Value, EqualTo>::const_iterator
ACE_Array_Map<Key, Value, EqualTo>::find (
  typename ACE_Array_Map<Key, Value, EqualTo>::key_type const & k) const
{
  const_iterator const the_end = this->end ();

  EqualTo eq;

  for (const_iterator i = this->begin (); i != the_end; ++i)
    if (eq (k, i->first))
      return i;

  return this->end ();
}

template<typename Key, typename Value, class EqualTo>
void
ACE_Array_Map<Key, Value, EqualTo>::grow (
  typename ACE_Array_Map<Key, Value, EqualTo>::size_type s)
{
  if (this->size () + s > this->capacity_)
    {





      ACE_Array_Map<Key, Value, EqualTo> temp (this->size () + s);

      std::copy (this->begin (),
                 this->end (),
                 ACE_make_checked_array_iterator (temp.begin (),
                                                  temp.capacity_));

      size_type const n = this->size ();



      this->swap (temp);

      this->size_ = n;
    }
}



template <typename Key, typename Value, class EqualTo>
bool
operator== (ACE_Array_Map<Key, Value, EqualTo> const & lhs,
            ACE_Array_Map<Key, Value, EqualTo> const & rhs)
{



  return (lhs.size () == rhs.size ()
          && std::equal (lhs.begin (),
                         lhs.end (),
                         ACE_make_checked_array_iterator (rhs.begin (),
                                                          rhs.size ())));
}

template <typename Key, typename Value, class EqualTo>
bool
operator< (ACE_Array_Map<Key, Value, EqualTo> const & lhs,
           ACE_Array_Map<Key, Value, EqualTo> const & rhs)
{
  return std::lexicographical_compare (lhs.begin (), lhs.end (),
                                       rhs.begin (), rhs.end ());
}


# 292 "/usr/local/include/ace/Array_Map.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 299 "/usr/local/include/ace/Array_Map.h" 2 3
# 27 "/usr/local/include/ace/Service_Repository.h" 2 3



class ACE_Service_Type;
class ACE_DLL;
# 49 "/usr/local/include/ace/Service_Repository.h" 3
class ACE_Service_Repository
{
public:
  friend class ACE_Service_Repository_Iterator;

  enum
  {
    DEFAULT_SIZE = 1024
  };



  ACE_Service_Repository (size_t size = DEFAULT_SIZE);


  int open (size_t size = DEFAULT_SIZE);



  ~ACE_Service_Repository (void);



  int close (void);



  int fini (void);


  static ACE_Service_Repository * instance
    (size_t size = ACE_Service_Repository::DEFAULT_SIZE);



  static ACE_Service_Repository *instance (ACE_Service_Repository *);


  static void close_singleton (void);





  int insert (const ACE_Service_Type *sr);
# 111 "/usr/local/include/ace/Service_Repository.h" 3
  int find (const ACE_TCHAR name[],
            const ACE_Service_Type **srp = 0,
            bool ignore_suspended = true) const;






  int remove (const ACE_TCHAR name[], ACE_Service_Type **sr = 0);



  int resume (const ACE_TCHAR name[], const ACE_Service_Type **srp = 0);


  int suspend (const ACE_TCHAR name[], const ACE_Service_Type **srp = 0);


  size_t current_size (void) const;


  void dump (void) const;


  struct __Ace {};

protected:

  friend class ACE_Service_Type_Dynamic_Guard;




  int remove_i (const ACE_TCHAR[], ACE_Service_Type **sr);
# 167 "/usr/local/include/ace/Service_Repository.h" 3
  int find_i (const ACE_TCHAR service_name[],
              size_t &slot,
              const ACE_Service_Type **srp = 0,
              bool ignore_suspended = true) const;
# 185 "/usr/local/include/ace/Service_Repository.h" 3
  int relocate_i (size_t begin,
                  size_t end,
                  const ACE_DLL &adll);


  typedef ACE_Array_Map <size_t, const ACE_Service_Type*> array_type;


  array_type service_array_;


  static ACE_Service_Repository *svc_rep_;


  static bool delete_svc_rep_;



  mutable ACE_Recursive_Thread_Mutex lock_;

};
# 215 "/usr/local/include/ace/Service_Repository.h" 3
class ACE_Service_Repository_Iterator
{
public:


  ACE_Service_Repository_Iterator (ACE_Service_Repository &sr,
                                   bool ignored_suspended = true);


  ~ACE_Service_Repository_Iterator (void);


public:




  int next (const ACE_Service_Type *&next_item);


  int done (void) const;



  int advance (void);


  void dump (void) const;


  struct __Ace {};

private:
  bool valid (void) const;

private:
  ACE_Service_Repository_Iterator (const ACE_Service_Repository_Iterator&);


  ACE_Service_Repository &svc_rep_;


  size_t next_;


  bool const ignore_suspended_;
};




# 1 "/usr/local/include/ace/Service_Repository.inl" 1 3
# 13 "/usr/local/include/ace/Service_Repository.inl" 3


inline size_t
ACE_Service_Repository::current_size (void) const
{
  ;
  ACE_Guard< ACE_Recursive_Thread_Mutex > ace_mon ((ACE_Recursive_Thread_Mutex &) this->lock_); if (ace_mon.locked () != 0) { ;; } else { return 0; };


  return this->service_array_.size ();
}

inline int
ACE_Service_Repository_Iterator::done (void) const
{
  ;

  return this->next_ >= this->svc_rep_.current_size ();
}

inline
ACE_Service_Repository_Iterator::~ACE_Service_Repository_Iterator (void)
{
}


# 267 "/usr/local/include/ace/Service_Repository.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 270 "/usr/local/include/ace/Service_Repository.h" 2 3
# 30 "/usr/local/include/ace/Service_Gestalt.h" 2 3
# 1 "/usr/local/include/ace/Singleton.h" 1 3
# 21 "/usr/local/include/ace/Singleton.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 22 "/usr/local/include/ace/Singleton.h" 2 3


# 1 "/usr/local/include/ace/TSS_T.h" 1 3
# 17 "/usr/local/include/ace/TSS_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/TSS_T.h" 2 3
# 40 "/usr/local/include/ace/TSS_T.h" 3

# 74 "/usr/local/include/ace/TSS_T.h" 3
template <class TYPE>
class ACE_TSS
{
public:
# 91 "/usr/local/include/ace/TSS_T.h" 3
  ACE_TSS (TYPE *ts_obj = 0);



  virtual ~ACE_TSS (void);
# 112 "/usr/local/include/ace/TSS_T.h" 3
  TYPE *ts_object (TYPE *new_ts_obj);
# 130 "/usr/local/include/ace/TSS_T.h" 3
  TYPE *ts_object (void) const;
# 144 "/usr/local/include/ace/TSS_T.h" 3
  TYPE *operator-> () const;
# 157 "/usr/local/include/ace/TSS_T.h" 3
  operator TYPE *(void) const;




  virtual TYPE *make_TSS_TYPE (void) const;




  void dump (void) const;




protected:


  TYPE *ts_get (void) const;



  int ts_init (void);






  ACE_Thread_Mutex keylock_;


  volatile bool once_;


  ACE_thread_key_t key_;


  static void cleanup (void *ptr);


  void operator= (const ACE_TSS<TYPE> &);
  ACE_TSS (const ACE_TSS<TYPE> &);
};
# 218 "/usr/local/include/ace/TSS_T.h" 3
template <class TYPE>
class ACE_TSS_Type_Adapter
{
public:

  ACE_TSS_Type_Adapter (const TYPE value = 0): value_ (value) {}



  operator TYPE () const { return value_; };



  operator TYPE &() { return value_; };

private:

  TYPE value_;
};




# 1 "/usr/local/include/ace/TSS_T.inl" 1 3
# 242 "/usr/local/include/ace/TSS_T.h" 2 3



# 1 "/usr/local/include/ace/TSS_T.cpp" 1 3





# 1 "/usr/local/include/ace/TSS_T.h" 1 3
# 7 "/usr/local/include/ace/TSS_T.cpp" 2 3
# 16 "/usr/local/include/ace/TSS_T.cpp" 3
# 1 "/usr/local/include/ace/Thread.h" 1 3
# 16 "/usr/local/include/ace/Thread.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Thread.h" 2 3
# 25 "/usr/local/include/ace/Thread.h" 3
# 1 "/usr/local/include/ace/Thread_Adapter.h" 1 3
# 15 "/usr/local/include/ace/Thread_Adapter.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Thread_Adapter.h" 2 3
# 25 "/usr/local/include/ace/Thread_Adapter.h" 3



class ACE_Thread_Manager;
class ACE_Thread_Descriptor;
# 46 "/usr/local/include/ace/Thread_Adapter.h" 3
class ACE_Thread_Adapter : public ACE_Base_Thread_Adapter
{
public:

  ACE_Thread_Adapter (ACE_THR_FUNC user_func,
                      void *arg,
                      ACE_THR_C_FUNC entry_point = (ACE_THR_C_FUNC) ace_thread_adapter,
                      ACE_Thread_Manager *thr_mgr = 0,
                      ACE_Thread_Descriptor *td = 0




                      );






  virtual ACE_THR_FUNC_RETURN invoke (void);


  ACE_Thread_Manager *thr_mgr (void);

protected:


  ~ACE_Thread_Adapter (void);

private:



  virtual ACE_THR_FUNC_RETURN invoke_i (void);

private:


  ACE_Thread_Manager *thr_mgr_;

};








# 1 "/usr/local/include/ace/Thread_Adapter.inl" 1 3






inline ACE_Thread_Manager *
ACE_Thread_Adapter::thr_mgr (void)
{
  return this->thr_mgr_;
}


# 97 "/usr/local/include/ace/Thread_Adapter.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 100 "/usr/local/include/ace/Thread_Adapter.h" 2 3
# 26 "/usr/local/include/ace/Thread.h" 2 3



struct cancel_state
{


  int cancelstate;


  int canceltype;
};
# 51 "/usr/local/include/ace/Thread.h" 3
class ACE_Thread
{
public:
# 84 "/usr/local/include/ace/Thread.h" 3
  static int spawn (ACE_THR_FUNC func,
                    void *arg = 0,
                    long flags = 0x00000002 | 0x00010000,
                    ACE_thread_t *t_id = 0,
                    ACE_hthread_t *t_handle = 0,
                    long priority = (-0x7fffffffL - 1L),
                    void *stack = 0,
                    size_t stack_size = 0,
                    ACE_Thread_Adapter *thread_adapter = 0,
                    const char** thr_name = 0);
# 109 "/usr/local/include/ace/Thread.h" 3
  static size_t spawn_n (size_t n,
                         ACE_THR_FUNC func,
                         void *arg = 0,
                         long flags = 0x00000002 | 0x00010000,
                         long priority = (-0x7fffffffL - 1L),
                         void *stack[] = 0,
                         size_t stack_size[] = 0,
                         ACE_Thread_Adapter *thread_adapter = 0,
                         const char* thr_name[] = 0);
# 137 "/usr/local/include/ace/Thread.h" 3
  static size_t spawn_n (ACE_thread_t thread_ids[],
                         size_t n,
                         ACE_THR_FUNC func,
                         void *arg,
                         long flags,
                         long priority = (-0x7fffffffL - 1L),
                         void *stack[] = 0,
                         size_t stack_size[] = 0,
                         ACE_hthread_t thread_handles[] = 0,
                         ACE_Thread_Adapter *thread_adapter = 0,
                         const char* thr_name[] = 0);
# 167 "/usr/local/include/ace/Thread.h" 3
  static int join (ACE_thread_t thread_id,
                   ACE_thread_t *departed,
                   ACE_THR_FUNC_RETURN *status);


  static int join (ACE_hthread_t,
                   ACE_THR_FUNC_RETURN * = 0);


  static int resume (ACE_hthread_t);


  static int suspend (ACE_hthread_t);


  static int getprio (ACE_hthread_t ht_id, int &priority);


  static int getprio (ACE_hthread_t ht_id, int &priority, int &policy);


  static int setprio (ACE_hthread_t ht_id, int priority, int policy = -1);


  static int kill (ACE_thread_t, int signum);


  static void yield (void);







  static void self (ACE_hthread_t &t_handle);


  static ACE_thread_t self (void);



  static void exit (ACE_THR_FUNC_RETURN status = 0);


  static int getconcurrency (void);


  static int setconcurrency (int new_level);


  static int sigsetmask (int how,
                         const sigset_t *sigset,
                         sigset_t *osigset = 0);






  static int keycreate (ACE_thread_key_t *keyp,



                        ACE_THR_DEST destructor,

                        void * = 0);


  static int keyfree (ACE_thread_key_t key);



  static int setspecific (ACE_thread_key_t key,
                          void *value);



  static int getspecific (ACE_thread_key_t key,
                          void **valuep);


  static int disablecancel (struct cancel_state *old_state);


  static int enablecancel (struct cancel_state *old_state,
                           int flag);


  static int setcancelstate (struct cancel_state &new_state,
                             struct cancel_state *old_state);






  static int cancel (ACE_thread_t t_id);


  static void testcancel (void);

private:

  ACE_Thread (void);
};




# 1 "/usr/local/include/ace/Thread.inl" 1 3












inline int
ACE_Thread::keycreate (ACE_thread_key_t *keyp,



                       ACE_THR_DEST destructor,

                       void *inst)
{

  return ACE_OS::thr_keycreate (keyp, destructor, inst);
}



inline int
ACE_Thread::keyfree (ACE_thread_key_t key)
{
  ;
  return ACE_OS::thr_keyfree (key);
}




inline int
ACE_Thread::setspecific (ACE_thread_key_t key, void *value)
{

  return ACE_OS::thr_setspecific (key, value);
}




inline int
ACE_Thread::getspecific (ACE_thread_key_t key, void **valuep)
{

  return ACE_OS::thr_getspecific (key, valuep);
}

inline ACE_thread_t
ACE_Thread::self (void)
{

  return ACE_OS::thr_self ();
}

inline void
ACE_Thread::exit (ACE_THR_FUNC_RETURN status)
{
  ;
  ACE_OS::thr_exit (status);
}

inline void
ACE_Thread::yield (void)
{
  ;
  ACE_OS::thr_yield ();
}

inline int
ACE_Thread::spawn (ACE_THR_FUNC func,
                   void *arg,
                   long flags,
                   ACE_thread_t *t_id,
                   ACE_hthread_t *t_handle,
                   long priority,
                   void *thr_stack,
                   size_t thr_stack_size,
                   ACE_Thread_Adapter *thread_adapter,
                   const char** thr_name)
{
  ;

  return ACE_OS::thr_create (func,
                             arg,
                             flags,
                             t_id,
                             t_handle,
                             priority,
                             thr_stack,
                             thr_stack_size,
                             thread_adapter,
                             thr_name);
}

inline int
ACE_Thread::resume (ACE_hthread_t t_id)
{
  ;
  return ACE_OS::thr_continue (t_id);
}

inline int
ACE_Thread::suspend (ACE_hthread_t t_id)
{
  ;
  return ACE_OS::thr_suspend (t_id);
}

inline int
ACE_Thread::kill (ACE_thread_t t_id, int signum)
{
  ;
  return ACE_OS::thr_kill (t_id, signum);
}

inline int
ACE_Thread::join (ACE_thread_t wait_for,
                  ACE_thread_t *departed,
                  ACE_THR_FUNC_RETURN *status)
{
  ;
  return ACE_OS::thr_join (wait_for, departed, status);
}

inline int
ACE_Thread::join (ACE_hthread_t wait_for,
                  ACE_THR_FUNC_RETURN *status)
{
  ;
  return ACE_OS::thr_join (wait_for, status);
}

inline int
ACE_Thread::getconcurrency (void)
{
  ;
  return ACE_OS::thr_getconcurrency ();
}

inline int
ACE_Thread::setconcurrency (int new_level)
{
  ;
  return ACE_OS::thr_setconcurrency (new_level);
}

inline int
ACE_Thread::sigsetmask (int how,
                        const sigset_t *sigset,
                        sigset_t *osigset)
{
  ;
  return ACE_OS::thr_sigsetmask (how, sigset, osigset);
}

inline int
ACE_Thread::disablecancel (struct cancel_state *old_state)
{
  ;
  int old_cstate = 0;
  int result = ACE_OS::thr_setcancelstate (PTHREAD_CANCEL_DISABLE,
                                           &old_cstate);
  if (result == 0 && old_state != 0)
    {
      ACE_OS::memset (old_state,
                      0,
                      sizeof (old_state));
      old_state->cancelstate = old_cstate;
    }

  return result;
}

inline int
ACE_Thread::enablecancel (struct cancel_state *old_state,
                          int flag)
{
  ;
  int old_cstate = 0;
  int old_ctype = 0;
  int result;

  result = ACE_OS::thr_setcancelstate (PTHREAD_CANCEL_ENABLE,
                                       &old_cstate);
  if (result != 0)
    return result;

  result = ACE_OS::thr_setcanceltype (flag,
                                      &old_ctype);
  if (result != 0)
    return result;

  if (old_state != 0)
    {
      old_state->cancelstate = old_cstate;
      old_state->canceltype = old_ctype;
    }

  return 0;
}

inline int
ACE_Thread::setcancelstate (struct cancel_state &new_state,
                            struct cancel_state *old_state)
{
  ;
  int old_cstate = 0;
  int old_ctype = 0;

  if (new_state.cancelstate != 0
      && ACE_OS::thr_setcancelstate (new_state.cancelstate,
                                     &old_cstate) != 0)
    return -1;

  if (new_state.canceltype != 0
      && ACE_OS::thr_setcanceltype (new_state.canceltype,
                                    &old_ctype) != 0)
    {
      int o_cstate;

      ACE_OS::thr_setcancelstate (old_cstate,
                                  &o_cstate);
      return -1;
    }

  if (old_state != 0)
    {
      old_state->cancelstate = old_cstate;
      old_state->canceltype = old_ctype;
    }

  return 0;
}

inline int
ACE_Thread::cancel (ACE_thread_t t_id)
{
  ;

  return ACE_OS::thr_cancel (t_id);
}

inline void
ACE_Thread::testcancel (void)
{
  ;

  ACE_OS::thr_testcancel ();
}

inline void
ACE_Thread::self (ACE_hthread_t &t_id)
{

  ACE_OS::thr_self (t_id);
}

inline int
ACE_Thread::getprio (ACE_hthread_t ht_id, int &priority)
{
  ;
  return ACE_OS::thr_getprio (ht_id, priority);
}

inline int
ACE_Thread::getprio (ACE_hthread_t ht_id, int &priority, int &policy)
{
  ;
  return ACE_OS::thr_getprio (ht_id, priority, policy);
}

inline int
ACE_Thread::setprio (ACE_hthread_t ht_id, int priority, int policy)
{
  ;
  return ACE_OS::thr_setprio (ht_id, priority, policy);
}


# 278 "/usr/local/include/ace/Thread.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 281 "/usr/local/include/ace/Thread.h" 2 3
# 17 "/usr/local/include/ace/TSS_T.cpp" 2 3
# 25 "/usr/local/include/ace/TSS_T.cpp" 3




template <class TYPE>
ACE_TSS<TYPE>::~ACE_TSS (void)
{

  if (this->once_)
  {
    ACE_OS::thr_key_detach (this->key_, this);
    ACE_OS::thr_keyfree (this->key_);
  }




}

template <class TYPE> TYPE *
ACE_TSS<TYPE>::operator-> () const
{
  return this->ts_get ();
}

template <class TYPE>
ACE_TSS<TYPE>::operator TYPE *(void) const
{
  return this->ts_get ();
}

template <class TYPE> TYPE *
ACE_TSS<TYPE>::make_TSS_TYPE (void) const
{
  TYPE *temp = 0;
  do { temp = new (::std::nothrow) TYPE; if (temp == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


  return temp;
}

template <class TYPE> void
ACE_TSS<TYPE>::dump (void) const
{
# 79 "/usr/local/include/ace/TSS_T.cpp" 3
}






template <class TYPE> void
ACE_TSS<TYPE>::cleanup (void *ptr)
{

  delete (TYPE *) ptr;
}

template <class TYPE> int
ACE_TSS<TYPE>::ts_init (void)
{

  ACE_Guard< ACE_Thread_Mutex > ace_mon (this->keylock_); if (ace_mon.locked () != 0) { ;; } else { return 0; };



  if (!this->once_)
    {
      if (ACE_Thread::keycreate (&this->key_,



                                 &ACE_TSS<TYPE>::cleanup,

                                 (void *) this) != 0)
        return -1;
      else
        {

          this->once_ = true;
          return 0;
        }
    }

  return 0;
}

template <class TYPE>
ACE_TSS<TYPE>::ACE_TSS (TYPE *ts_obj)
  : once_ (false),
    key_ (ACE_OS::NULL_key)
{






  if (ts_obj != 0)
    {
      if (this->ts_init () == -1)
        {

          ACE_Errno_Guard error ((*__errno_location ()));







          ACE_OS::fprintf (stderr,
                           "ACE_Thread::keycreate() failed!");

          return;
        }
# 170 "/usr/local/include/ace/TSS_T.cpp" 3
      if (ACE_Thread::setspecific (this->key_,
                                   (void *) ts_obj) != 0)
        do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/TSS_T.cpp", 174, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "ACE_Thread::setspecific() failed!"); } while (0);



    }
}

template <class TYPE> TYPE *
ACE_TSS<TYPE>::ts_get (void) const
{
  if (!this->once_)
    {

      if (const_cast< ACE_TSS < TYPE > * >(this)->ts_init () == -1)

        return 0;
    }

  TYPE *ts_obj = 0;
# 206 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = ts_obj;
  if (ACE_Thread::getspecific (this->key_, &temp) == -1)
    return 0;
  ts_obj = static_cast <TYPE *> (temp);


  if (ts_obj == 0)

    {



      ts_obj = this->make_TSS_TYPE ();

      if (ts_obj == 0)
        return 0;
# 241 "/usr/local/include/ace/TSS_T.cpp" 3
      if (ACE_Thread::setspecific (this->key_,
                                   (void *) ts_obj) != 0)
        {
          delete ts_obj;
          return 0;
        }

    }





  return ts_obj;

}





template <class TYPE> TYPE *
ACE_TSS<TYPE>::ts_object (void) const
{
  if (!this->once_)
    return 0;

  TYPE *ts_obj = 0;
# 289 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = ts_obj;
  if (ACE_Thread::getspecific (this->key_, &temp) == -1)
    return 0;
  ts_obj = static_cast <TYPE *> (temp);


  return ts_obj;
}

template <class TYPE> TYPE *
ACE_TSS<TYPE>::ts_object (TYPE *new_ts_obj)
{



  if (!this->once_)
    {

      if (this->ts_init () == -1)
        return 0;
    }

  TYPE *ts_obj = 0;
# 339 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = ts_obj;
  if (ACE_Thread::getspecific (this->key_, &temp) == -1)
    return 0;
  ts_obj = static_cast <TYPE *> (temp);
  if (ACE_Thread::setspecific (this->key_, (void *) new_ts_obj) == -1)
    return ts_obj;


  return ts_obj;
}



template <class ACE_LOCK> void
ACE_TSS_Guard<ACE_LOCK>::dump (void) const
{







}

template <class ACE_LOCK> void
ACE_TSS_Guard<ACE_LOCK>::init_key (void)
{


  this->key_ = ACE_OS::NULL_key;
  ACE_Thread::keycreate (&this->key_,



                         &ACE_TSS_Guard<ACE_LOCK>::cleanup,

                         (void *) this);
}

template <class ACE_LOCK>
ACE_TSS_Guard<ACE_LOCK>::ACE_TSS_Guard (void)
{

  this->init_key ();
}

template <class ACE_LOCK> int
ACE_TSS_Guard<ACE_LOCK>::release (void)
{


  ACE_Guard<ACE_LOCK> *guard = 0;
# 400 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Guard<ACE_LOCK> *> (temp);


  return guard->release ();
}

template <class ACE_LOCK> int
ACE_TSS_Guard<ACE_LOCK>::remove (void)
{


  ACE_Guard<ACE_LOCK> *guard = 0;
# 422 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Guard<ACE_LOCK> *> (temp);


  return guard->remove ();
}

template <class ACE_LOCK>
ACE_TSS_Guard<ACE_LOCK>::~ACE_TSS_Guard (void)
{


  ACE_Guard<ACE_LOCK> *guard = 0;
# 444 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Guard<ACE_LOCK> *> (temp);



  ACE_Thread::setspecific (this->key_, 0);
  ACE_Thread::keyfree (this->key_);

  delete guard;
}

template <class ACE_LOCK> void
ACE_TSS_Guard<ACE_LOCK>::cleanup (void *ptr)
{



  delete (ACE_Guard<ACE_LOCK> *) ptr;
}

template <class ACE_LOCK>
ACE_TSS_Guard<ACE_LOCK>::ACE_TSS_Guard (ACE_LOCK &lock, bool block)
{


  this->init_key ();
  ACE_Guard<ACE_LOCK> *guard = 0;
  do { guard = new(::std::nothrow) ACE_Guard<ACE_LOCK> (lock, block); if (guard == 0) { (*__errno_location ()) = 12; return; } } while (0);
# 484 "/usr/local/include/ace/TSS_T.cpp" 3
  ACE_Thread::setspecific (this->key_,
                           (void *) guard);

}

template <class ACE_LOCK> int
ACE_TSS_Guard<ACE_LOCK>::acquire (void)
{


  ACE_Guard<ACE_LOCK> *guard = 0;
# 503 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Guard<ACE_LOCK> *> (temp);


  return guard->acquire ();
}

template <class ACE_LOCK> int
ACE_TSS_Guard<ACE_LOCK>::tryacquire (void)
{


  ACE_Guard<ACE_LOCK> *guard = 0;
# 525 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Guard<ACE_LOCK> *> (temp);


  return guard->tryacquire ();
}

template <class ACE_LOCK>
ACE_TSS_Write_Guard<ACE_LOCK>::ACE_TSS_Write_Guard (ACE_LOCK &lock,
                                                    bool block)
{


  this->init_key ();
  ACE_Guard<ACE_LOCK> *guard = 0;
  do { guard = new(::std::nothrow) ACE_Write_Guard<ACE_LOCK> (lock, block); if (guard == 0) { (*__errno_location ()) = 12; return; } } while (0);
# 553 "/usr/local/include/ace/TSS_T.cpp" 3
  ACE_Thread::setspecific (this->key_,
                           (void *) guard);

}

template <class ACE_LOCK> int
ACE_TSS_Write_Guard<ACE_LOCK>::acquire (void)
{


  ACE_Write_Guard<ACE_LOCK> *guard = 0;
# 572 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Write_Guard<ACE_LOCK> *> (temp);


  return guard->acquire_write ();
}

template <class ACE_LOCK> int
ACE_TSS_Write_Guard<ACE_LOCK>::tryacquire (void)
{


  ACE_Write_Guard<ACE_LOCK> *guard = 0;
# 594 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Write_Guard<ACE_LOCK> *> (temp);


  return guard->tryacquire_write ();
}

template <class ACE_LOCK> int
ACE_TSS_Write_Guard<ACE_LOCK>::acquire_write (void)
{


  return this->acquire ();
}

template <class ACE_LOCK> int
ACE_TSS_Write_Guard<ACE_LOCK>::tryacquire_write (void)
{


  return this->tryacquire ();
}

template <class ACE_LOCK> void
ACE_TSS_Write_Guard<ACE_LOCK>::dump (void) const
{




}

template <class ACE_LOCK>
ACE_TSS_Read_Guard<ACE_LOCK>::ACE_TSS_Read_Guard (ACE_LOCK &lock, bool block)
{


  this->init_key ();
  ACE_Guard<ACE_LOCK> *guard = 0;
  do { guard = new(::std::nothrow) ACE_Read_Guard<ACE_LOCK> (lock, block); if (guard == 0) { (*__errno_location ()) = 12; return; } } while (0);
# 645 "/usr/local/include/ace/TSS_T.cpp" 3
  ACE_Thread::setspecific (this->key_,
                           (void *) guard);

}

template <class ACE_LOCK> int
ACE_TSS_Read_Guard<ACE_LOCK>::acquire (void)
{


  ACE_Read_Guard<ACE_LOCK> *guard = 0;
# 664 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Read_Guard<ACE_LOCK> *> (temp);


  return guard->acquire_read ();
}

template <class ACE_LOCK> int
ACE_TSS_Read_Guard<ACE_LOCK>::tryacquire (void)
{


  ACE_Read_Guard<ACE_LOCK> *guard = 0;
# 686 "/usr/local/include/ace/TSS_T.cpp" 3
  void *temp = guard;
  ACE_Thread::getspecific (this->key_, &temp);
  guard = static_cast <ACE_Read_Guard<ACE_LOCK> *> (temp);


  return guard->tryacquire_read ();
}

template <class ACE_LOCK> int
ACE_TSS_Read_Guard<ACE_LOCK>::acquire_read (void)
{


  return this->acquire ();
}

template <class ACE_LOCK> int
ACE_TSS_Read_Guard<ACE_LOCK>::tryacquire_read (void)
{


  return this->tryacquire ();
}

template <class ACE_LOCK> void
ACE_TSS_Read_Guard<ACE_LOCK>::dump (void) const
{




}




# 246 "/usr/local/include/ace/TSS_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 253 "/usr/local/include/ace/TSS_T.h" 2 3
# 25 "/usr/local/include/ace/Singleton.h" 2 3







# 78 "/usr/local/include/ace/Singleton.h" 3
template <class TYPE, class ACE_LOCK>
class ACE_Singleton : public ACE_Cleanup
{
public:

  static TYPE *instance (void);



  virtual void cleanup (void *param = 0);


  static void close (void);


  static void dump (void);

protected:

  ACE_Singleton (void);


  TYPE instance_;



  static ACE_Singleton<TYPE, ACE_LOCK> *singleton_;



  static ACE_Singleton<TYPE, ACE_LOCK> *&instance_i (void);
};
# 128 "/usr/local/include/ace/Singleton.h" 3
template <class TYPE, class ACE_LOCK>
class ACE_Unmanaged_Singleton : public ACE_Singleton <TYPE, ACE_LOCK>
{
public:

  static TYPE *instance (void);


  static void close (void);


  static void dump (void);

protected:

  ACE_Unmanaged_Singleton (void);



  static ACE_Unmanaged_Singleton<TYPE, ACE_LOCK> *singleton_;



  static ACE_Unmanaged_Singleton<TYPE, ACE_LOCK> *&instance_i (void);
};
# 172 "/usr/local/include/ace/Singleton.h" 3
template <class TYPE, class ACE_LOCK>
class ACE_TSS_Singleton : public ACE_Cleanup
{
public:

  static TYPE *instance (void);



  virtual void cleanup (void *param = 0);


  static void dump (void);

protected:

  ACE_TSS_Singleton (void);


  ACE_TSS< TYPE > instance_;

  void operator= (const ACE_TSS_Singleton<TYPE,ACE_LOCK> &);
  ACE_TSS_Singleton (const ACE_TSS_Singleton<TYPE,ACE_LOCK> &);



  static ACE_TSS_Singleton<TYPE, ACE_LOCK> *singleton_;



  static ACE_TSS_Singleton<TYPE, ACE_LOCK> *&instance_i (void);
};
# 218 "/usr/local/include/ace/Singleton.h" 3
template <class TYPE, class ACE_LOCK>
class ACE_Unmanaged_TSS_Singleton : public ACE_TSS_Singleton <TYPE, ACE_LOCK>
{
public:

  static TYPE *instance (void);


  static void close (void);


  static void dump (void);

protected:

  ACE_Unmanaged_TSS_Singleton (void);



  static ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK> *singleton_;



  static ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK> *&instance_i (void);
};
# 268 "/usr/local/include/ace/Singleton.h" 3
template <class TYPE, class ACE_LOCK>
class ACE_DLL_Singleton_T
{
public:



  static TYPE *instance (void);


  static void close (void);

  static void close_singleton (void);


  static void dump (void);

  const ACE_TCHAR *dll_name (void);

  const ACE_TCHAR *name (void);

protected:

  ACE_DLL_Singleton_T (void);


  ~ACE_DLL_Singleton_T (void);


  TYPE instance_;



  static ACE_DLL_Singleton_T<TYPE, ACE_LOCK> *singleton_;



  static ACE_DLL_Singleton_T<TYPE, ACE_LOCK> *&instance_i (void);
};

template <class TYPE>
class ACE_DLL_Singleton_Adapter_T : public TYPE
{
public:
  const ACE_TCHAR *dll_name (void);
};




# 1 "/usr/local/include/ace/Singleton.inl" 1 3











template <class TYPE, class ACE_LOCK> inline
ACE_Singleton<TYPE, ACE_LOCK>::ACE_Singleton (void)
{
}

template <class TYPE, class ACE_LOCK> inline
ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::ACE_Unmanaged_Singleton (void)
{
}

template <class TYPE, class ACE_LOCK> inline
ACE_TSS_Singleton<TYPE, ACE_LOCK>::ACE_TSS_Singleton (void)
{
}

template <class TYPE, class ACE_LOCK> inline
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::ACE_Unmanaged_TSS_Singleton (void)
{
}

template <class TYPE, class ACE_LOCK> inline
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::ACE_DLL_Singleton_T (void)
{
}

template <class TYPE, class ACE_LOCK>
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::~ACE_DLL_Singleton_T (void)
{
}


# 319 "/usr/local/include/ace/Singleton.h" 2 3



# 1 "/usr/local/include/ace/Singleton.cpp" 1 3





# 1 "/usr/local/include/ace/Singleton.h" 1 3
# 7 "/usr/local/include/ace/Singleton.cpp" 2 3
# 16 "/usr/local/include/ace/Singleton.cpp" 3
# 1 "/usr/local/include/ace/Object_Manager.h" 1 3
# 17 "/usr/local/include/ace/Object_Manager.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Object_Manager.h" 2 3
# 27 "/usr/local/include/ace/Object_Manager.h" 3



class ACE_Object_Manager_Preallocations;
class ACE_Sig_Adapter;
class ACE_Sig_Set;







  class ACE_Mutex;
  class ACE_Null_Mutex;
  class ACE_Thread_Mutex;
  class ACE_Recursive_Thread_Mutex;
  class ACE_RW_Thread_Mutex;







# 60 "/usr/local/include/ace/Object_Manager.h" 3
class ACE_Cleanup_Info_Node;
template <class T> class ACE_Cleanup_Adapter;
# 198 "/usr/local/include/ace/Object_Manager.h" 3
class ACE_Object_Manager : public ACE_Object_Manager_Base
{

public:





  virtual int init (void);






  virtual int fini (void);
# 225 "/usr/local/include/ace/Object_Manager.h" 3
  static int starting_up (void);
# 234 "/usr/local/include/ace/Object_Manager.h" 3
  static int shutting_down (void);
# 246 "/usr/local/include/ace/Object_Manager.h" 3
  static int at_exit (ACE_Cleanup *object, void *param = 0, const char* name = 0);
# 267 "/usr/local/include/ace/Object_Manager.h" 3
  static int at_exit (void *object,
                      ACE_CLEANUP_FUNC cleanup_hook,
                      void *param,
                      const char* name = 0);

  static int remove_at_exit (void *object);
# 286 "/usr/local/include/ace/Object_Manager.h" 3
  enum Preallocated_Object
    {
      ACE_FILECACHE_LOCK,

      ACE_STATIC_OBJECT_LOCK,


      ACE_MT_CORBA_HANDLER_LOCK,
      ACE_DUMP_LOCK,
      ACE_SIG_HANDLER_LOCK,
      ACE_SINGLETON_NULL_LOCK,
      ACE_SINGLETON_RECURSIVE_THREAD_LOCK,
      ACE_THREAD_EXIT_LOCK,

      ACE_TOKEN_MANAGER_CREATION_LOCK,
      ACE_TOKEN_INVARIANTS_CREATION_LOCK,

      ACE_PROACTOR_EVENT_LOOP_LOCK,



     

      ACE_PREALLOCATED_OBJECTS
    };




  enum Preallocated_Array
    {




      ACE_EMPTY_PREALLOCATED_ARRAY,


     

      ACE_PREALLOCATED_ARRAYS
    };






  static ACE_Sig_Set &default_mask (void);

private:

  ACE_OS_Exit_Info exit_info_;



  ACE_Object_Manager_Preallocations *preallocations_;


  ACE_Sig_Adapter *ace_service_config_sig_handler_;




  int at_exit_i (void *object, ACE_CLEANUP_FUNC cleanup_hook, void *param, const char* name);



  int remove_at_exit_i (void *object);


public:
# 366 "/usr/local/include/ace/Object_Manager.h" 3
  static int get_singleton_lock (ACE_Null_Mutex *&);






  static int get_singleton_lock (ACE_Thread_Mutex *&);






  static int get_singleton_lock (ACE_Mutex *&);






  static int get_singleton_lock (ACE_Recursive_Thread_Mutex *&);






  static int get_singleton_lock (ACE_RW_Thread_Mutex *&);


public:







  static ACE_Object_Manager *instance (void);


  static void *preallocated_object[ACE_PREALLOCATED_OBJECTS];


  static void *preallocated_array[ACE_PREALLOCATED_ARRAYS];

public:




  ACE_Object_Manager (void);
  ~ACE_Object_Manager (void);

private:

  static ACE_Object_Manager *instance_;



  ACE_Recursive_Thread_Mutex *internal_lock_;


  ACE_Cleanup_Adapter<ACE_Null_Mutex> *singleton_null_lock_;



  ACE_Cleanup_Adapter<ACE_Recursive_Thread_Mutex> *singleton_recursive_lock_;
# 444 "/usr/local/include/ace/Object_Manager.h" 3
  friend class ACE_Object_Manager_Manager;



  ACE_Object_Manager (const ACE_Object_Manager &);
  ACE_Object_Manager &operator= (const ACE_Object_Manager &);
};



# 1 "/usr/local/include/ace/Static_Object_Lock.h" 1 3
# 17 "/usr/local/include/ace/Static_Object_Lock.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Static_Object_Lock.h" 2 3
# 27 "/usr/local/include/ace/Static_Object_Lock.h" 3


class ACE_Recursive_Thread_Mutex;
# 41 "/usr/local/include/ace/Static_Object_Lock.h" 3
class ACE_Static_Object_Lock
{
public:

  static ACE_Recursive_Thread_Mutex *instance (void);



  static void cleanup_lock (void);
};









# 73 "/usr/local/include/ace/Static_Object_Lock.h" 3




# 1 "/usr/local/include/ace/post.h" 1 3
# 78 "/usr/local/include/ace/Static_Object_Lock.h" 2 3
# 455 "/usr/local/include/ace/Object_Manager.h" 2 3


# 1 "/usr/local/include/ace/Object_Manager.inl" 1 3






inline
int
ACE_Object_Manager::at_exit (ACE_Cleanup *object,
                             void *param,
                             const char* name)
{
  return ACE_Object_Manager::instance ()->at_exit_i (
    object,
    (ACE_CLEANUP_FUNC) ace_cleanup_destroyer,
    param,
    name);
}

inline
int
ACE_Object_Manager::at_exit (void *object,
                             ACE_CLEANUP_FUNC cleanup_hook,
                             void *param,
                             const char* name)
{
  return ACE_Object_Manager::instance ()->at_exit_i (
    object,
    cleanup_hook,
    param,
    name);
}

inline
int
ACE_Object_Manager::remove_at_exit (void *object)
{
  return ACE_Object_Manager::instance ()->remove_at_exit_i (object);
}

inline
ACE_Sig_Set &
ACE_Object_Manager::default_mask (void)
{


  return
    *reinterpret_cast<ACE_Sig_Set *> (ACE_OS_Object_Manager::default_mask ());
}


# 458 "/usr/local/include/ace/Object_Manager.h" 2 3


# 1 "/usr/local/include/ace/Managed_Object.h" 1 3
# 16 "/usr/local/include/ace/Managed_Object.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Managed_Object.h" 2 3







# 1 "/usr/local/include/ace/Object_Manager.h" 1 3
# 25 "/usr/local/include/ace/Managed_Object.h" 2 3



# 42 "/usr/local/include/ace/Managed_Object.h" 3
template <class TYPE>
class ACE_Cleanup_Adapter : public ACE_Cleanup
{
public:

  ACE_Cleanup_Adapter (void);


  virtual ~ACE_Cleanup_Adapter (void);


  TYPE &object (void);

private:
  ACE_Cleanup_Adapter (const ACE_Cleanup_Adapter<TYPE> &);
  void operator= (const ACE_Cleanup_Adapter<TYPE> &);


  TYPE object_;
};
# 101 "/usr/local/include/ace/Managed_Object.h" 3
template <class TYPE>
class ACE_Managed_Object
{
public:
  static TYPE *get_preallocated_object (ACE_Object_Manager::Preallocated_Object identifier)
  {







    return &((ACE_Cleanup_Adapter<TYPE> *)
             ACE_Object_Manager::preallocated_object[identifier])->object ();
  }






  static TYPE *get_preallocated_array (ACE_Object_Manager::Preallocated_Array identifier)
  {







    return &((ACE_Cleanup_Adapter<TYPE> *)
             ACE_Object_Manager::preallocated_array[identifier])->object ();
  }






protected:


  ACE_Managed_Object (void);

private:

  ACE_Managed_Object (const ACE_Managed_Object<TYPE> &);
  void operator= (const ACE_Managed_Object<TYPE> &);
};




# 1 "/usr/local/include/ace/Managed_Object.inl" 1 3






template <class TYPE>
inline
ACE_Cleanup_Adapter<TYPE>::ACE_Cleanup_Adapter (void)


{
}

template <class TYPE>
inline
TYPE &
ACE_Cleanup_Adapter<TYPE>::object (void)
{
  return this->object_;
}


# 156 "/usr/local/include/ace/Managed_Object.h" 2 3



# 1 "/usr/local/include/ace/Managed_Object.cpp" 1 3





# 1 "/usr/local/include/ace/Managed_Object.h" 1 3
# 7 "/usr/local/include/ace/Managed_Object.cpp" 2 3
# 16 "/usr/local/include/ace/Managed_Object.cpp" 3


template <class TYPE>
ACE_Cleanup_Adapter<TYPE>::~ACE_Cleanup_Adapter (void)
{
}


# 160 "/usr/local/include/ace/Managed_Object.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 167 "/usr/local/include/ace/Managed_Object.h" 2 3
# 461 "/usr/local/include/ace/Object_Manager.h" 2 3






class ACE_Service_Object;

extern "C" ::ACE_Service_Object * _make_ACE_Service_Manager (ACE_Service_Object_Exterminator *);



# 1 "/usr/local/include/ace/post.h" 1 3
# 474 "/usr/local/include/ace/Object_Manager.h" 2 3
# 17 "/usr/local/include/ace/Singleton.cpp" 2 3

# 1 "/usr/local/include/ace/Framework_Component.h" 1 3
# 38 "/usr/local/include/ace/Framework_Component.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 39 "/usr/local/include/ace/Framework_Component.h" 2 3
# 51 "/usr/local/include/ace/Framework_Component.h" 3








class ACE_Framework_Component
{
public:
  friend class ACE_Framework_Repository;


  ACE_Framework_Component (void *_this,
                           const ACE_TCHAR *dll_name = 0,
                           const ACE_TCHAR *name = 0);


  virtual void close_singleton (void) = 0;

protected:

  virtual ~ACE_Framework_Component (void);

private:

  ACE_Framework_Component (const ACE_Framework_Component &);
  void operator= (const ACE_Framework_Component &);

private:

  const void *this_;


  const ACE_TCHAR *dll_name_;


  const ACE_TCHAR *name_;
};
# 101 "/usr/local/include/ace/Framework_Component.h" 3
class ACE_Framework_Repository
{
public:

  friend class ACE_Framework_Component;

  enum
  {
    DEFAULT_SIZE = 1024
  };



  ~ACE_Framework_Repository (void);


  int open (int size = DEFAULT_SIZE);



  int close (void);


  static ACE_Framework_Repository *instance
    (int size = ACE_Framework_Repository::DEFAULT_SIZE);


  static void close_singleton (void);





  int register_component (ACE_Framework_Component *fc);



  int remove_component (const ACE_TCHAR *name);


  int remove_dll_components (const ACE_TCHAR *dll_name);


  int current_size (void) const;


  int total_size (void) const;


  void dump (void) const;


  struct __Ace {};

protected:


  ACE_Framework_Repository (int size = ACE_Framework_Repository::DEFAULT_SIZE);

private:


  int remove_dll_components_i (const ACE_TCHAR *dll_name);



  void compact (void);


  ACE_Framework_Repository (const ACE_Framework_Repository &);
  ACE_Framework_Repository &operator= (const ACE_Framework_Repository &);

private:


  ACE_Framework_Component **component_vector_;


  int current_size_;


  int total_size_;


  static ACE_Framework_Repository *repository_;





  static sig_atomic_t shutting_down_;



  ACE_Thread_Mutex lock_;


};




# 1 "/usr/local/include/ace/Framework_Component.inl" 1 3









inline
ACE_Framework_Component::ACE_Framework_Component (void *_this,
                                                  const ACE_TCHAR *dll_name,
                                                  const ACE_TCHAR *name)
  : this_ (_this),
     dll_name_ (ACE::strnew (dll_name ? dll_name : "")),
     name_ (ACE::strnew (name ? name : ""))
{
  ;
}



inline int
ACE_Framework_Repository::current_size (void) const
{
  ;
  ACE_Guard< ACE_Thread_Mutex > ace_mon ((ACE_Thread_Mutex &) this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };
  return this->current_size_;
}

inline int
ACE_Framework_Repository::total_size (void) const
{
  ;
  ACE_Guard< ACE_Thread_Mutex > ace_mon ((ACE_Thread_Mutex &) this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };
  return this->total_size_;
}


# 204 "/usr/local/include/ace/Framework_Component.h" 2 3



# 1 "/usr/local/include/ace/Framework_Component_T.h" 1 3
# 15 "/usr/local/include/ace/Framework_Component_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Framework_Component_T.h" 2 3
# 1 "/usr/local/include/ace/Framework_Component.h" 1 3
# 17 "/usr/local/include/ace/Framework_Component_T.h" 2 3






# 37 "/usr/local/include/ace/Framework_Component_T.h" 3
template <class Concrete>
class ACE_Framework_Component_T : public ACE_Framework_Component
{
public:



  ACE_Framework_Component_T (Concrete *concrete);


  ~ACE_Framework_Component_T (void);


  void close_singleton (void);
};


# 63 "/usr/local/include/ace/Framework_Component_T.h" 3
# 1 "/usr/local/include/ace/Framework_Component_T.cpp" 1 3





# 1 "/usr/local/include/ace/Framework_Component_T.h" 1 3
# 7 "/usr/local/include/ace/Framework_Component_T.cpp" 2 3



template <class Concrete>
ACE_Framework_Component_T<Concrete>::ACE_Framework_Component_T (Concrete *concrete)
  : ACE_Framework_Component ((void *) concrete, concrete->dll_name (), concrete->name ())
{
  ;
}

template <class Concrete>
ACE_Framework_Component_T<Concrete>::~ACE_Framework_Component_T (void)
{
  ;
  Concrete::close_singleton ();
}

template <class Concrete> void
ACE_Framework_Component_T<Concrete>::close_singleton (void)
{
  ;
  Concrete::close_singleton ();
}


# 64 "/usr/local/include/ace/Framework_Component_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 71 "/usr/local/include/ace/Framework_Component_T.h" 2 3
# 208 "/usr/local/include/ace/Framework_Component.h" 2 3

# 1 "/usr/local/include/ace/post.h" 1 3
# 210 "/usr/local/include/ace/Framework_Component.h" 2 3
# 19 "/usr/local/include/ace/Singleton.cpp" 2 3

# 1 "/usr/local/include/ace/os_include/os_typeinfo.h" 1 3
# 18 "/usr/local/include/ace/os_include/os_typeinfo.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_typeinfo.h" 2 3







# 1 "/usr/include/c++/4.4/typeinfo" 1 3
# 36 "/usr/include/c++/4.4/typeinfo" 3
#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/4.4/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const
    { return __name; }
# 117 "/usr/include/c++/4.4/typeinfo" 3
    bool before(const type_info& __arg) const
    { return __name < __arg.__name; }

    bool operator==(const type_info& __arg) const
    { return __name == __arg.__name; }

    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }



    virtual ~bad_cast() throw();


    virtual const char* what() const throw();
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }



    virtual ~bad_typeid() throw();


    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 27 "/usr/local/include/ace/os_include/os_typeinfo.h" 2 3



extern "C"
{



}


# 1 "/usr/local/include/ace/post.h" 1 3
# 39 "/usr/local/include/ace/os_include/os_typeinfo.h" 2 3
# 21 "/usr/local/include/ace/Singleton.cpp" 2 3







template <class TYPE, class ACE_LOCK> void
ACE_Singleton<TYPE, ACE_LOCK>::dump (void)
{
# 40 "/usr/local/include/ace/Singleton.cpp" 3
}

template <class TYPE, class ACE_LOCK> ACE_Singleton<TYPE, ACE_LOCK> *&
ACE_Singleton<TYPE, ACE_LOCK>::instance_i (void)
{







  return ACE_Singleton<TYPE, ACE_LOCK>::singleton_;

}

template <class TYPE, class ACE_LOCK> TYPE *
ACE_Singleton<TYPE, ACE_LOCK>::instance (void)
{
  ;

  ACE_Singleton<TYPE, ACE_LOCK> *&singleton =
    ACE_Singleton<TYPE, ACE_LOCK>::instance_i ();


  if (singleton == 0)
    {
      if (ACE_Object_Manager::starting_up () ||
          ACE_Object_Manager::shutting_down ())
        {







          do { singleton = new (::std::nothrow) (ACE_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);
        }
      else
        {




          static ACE_LOCK *lock = 0;
          if (ACE_Object_Manager::get_singleton_lock (lock) != 0)

            return 0;

          ACE_Guard< ACE_LOCK > ace_mon (*lock); if (ace_mon.locked () != 0) { ;; } else { return 0; };

          if (singleton == 0)
            {

              do { singleton = new (::std::nothrow) (ACE_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


              ACE_Object_Manager::at_exit (singleton, 0, typeid (TYPE).name ());

            }

        }
    }

  return &singleton->instance_;
}

template <class TYPE, class ACE_LOCK> void
ACE_Singleton<TYPE, ACE_LOCK>::cleanup (void *)
{
  ACE_Object_Manager::remove_at_exit (this);
  delete this;
  ACE_Singleton<TYPE, ACE_LOCK>::instance_i () = 0;
}

template <class TYPE, class ACE_LOCK> void
ACE_Singleton<TYPE, ACE_LOCK>::close (void)
{
  ACE_Singleton<TYPE, ACE_LOCK> *&singleton =
    ACE_Singleton<TYPE, ACE_LOCK>::instance_i ();

  if (singleton)
    {
      singleton->cleanup ();
      ACE_Singleton<TYPE, ACE_LOCK>::instance_i () = 0;
    }
}



template <class TYPE, class ACE_LOCK> ACE_Singleton<TYPE, ACE_LOCK> *
ACE_Singleton<TYPE, ACE_LOCK>::singleton_ = 0;

template <class TYPE, class ACE_LOCK> ACE_Unmanaged_Singleton<TYPE, ACE_LOCK> *
ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::singleton_ = 0;


template <class TYPE, class ACE_LOCK> void
ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::dump (void)
{
# 150 "/usr/local/include/ace/Singleton.cpp" 3
}

template <class TYPE, class ACE_LOCK>
ACE_Unmanaged_Singleton<TYPE, ACE_LOCK> *&
ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::instance_i (void)
{







  return ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::singleton_;

}

template <class TYPE, class ACE_LOCK> TYPE *
ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::instance (void)
{
  ;

  ACE_Unmanaged_Singleton<TYPE, ACE_LOCK> *&singleton =
    ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::instance_i ();


  if (singleton == 0)
    {
      if (ACE_Object_Manager::starting_up () ||
          ACE_Object_Manager::shutting_down ())
        {







          do { singleton = new (::std::nothrow) (ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);

        }
      else
        {




          static ACE_LOCK *lock = 0;
          if (ACE_Object_Manager::get_singleton_lock (lock) != 0)

            return 0;

          ACE_Guard< ACE_LOCK > ace_mon (*lock); if (ace_mon.locked () != 0) { ;; } else { return 0; };


          if (singleton == 0)
            do { singleton = new (::std::nothrow) (ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


        }
    }

  return &singleton->instance_;
}

template <class TYPE, class ACE_LOCK> void
ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::close (void)
{
  ACE_Unmanaged_Singleton<TYPE, ACE_LOCK> *&singleton =
    ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::instance_i ();

  if (singleton)
    {
      singleton->cleanup ();
      ACE_Unmanaged_Singleton<TYPE, ACE_LOCK>::instance_i () = 0;
    }
}

template <class TYPE, class ACE_LOCK> void
ACE_TSS_Singleton<TYPE, ACE_LOCK>::dump (void)
{
# 240 "/usr/local/include/ace/Singleton.cpp" 3
}

template <class TYPE, class ACE_LOCK> ACE_TSS_Singleton<TYPE, ACE_LOCK> *&
ACE_TSS_Singleton<TYPE, ACE_LOCK>::instance_i (void)
{







  return ACE_TSS_Singleton<TYPE, ACE_LOCK>::singleton_;

}

template <class TYPE, class ACE_LOCK> TYPE *
ACE_TSS_Singleton<TYPE, ACE_LOCK>::instance (void)
{
  ;

  ACE_TSS_Singleton<TYPE, ACE_LOCK> *&singleton =
    ACE_TSS_Singleton<TYPE, ACE_LOCK>::instance_i ();


  if (singleton == 0)
    {
      if (ACE_Object_Manager::starting_up () ||
          ACE_Object_Manager::shutting_down ())
        {







          do { singleton = new (::std::nothrow) (ACE_TSS_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);
        }
      else
        {




          static ACE_LOCK *lock = 0;
          if (ACE_Object_Manager::get_singleton_lock (lock) != 0)

            return 0;

          ACE_Guard< ACE_LOCK > ace_mon (*lock); if (ace_mon.locked () != 0) { ;; } else { return 0; };

          if (singleton == 0)
            {

              do { singleton = new (::std::nothrow) (ACE_TSS_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);



              ACE_Object_Manager::at_exit (singleton, 0, typeid (TYPE).name ());

            }

        }
    }

  return ((&singleton->instance_)->operator TYPE * ());
}

template <class TYPE, class ACE_LOCK> void
ACE_TSS_Singleton<TYPE, ACE_LOCK>::cleanup (void *)
{
  delete this;
  ACE_TSS_Singleton<TYPE, ACE_LOCK>::instance_i () = 0;
}

template <class TYPE, class ACE_LOCK> void
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::dump (void)
{
# 328 "/usr/local/include/ace/Singleton.cpp" 3
}

template <class TYPE, class ACE_LOCK>
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK> *&
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::instance_i (void)
{







  return ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::singleton_;

}

template <class TYPE, class ACE_LOCK> TYPE *
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::instance (void)
{
  ;

  ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK> *&singleton =
    ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::instance_i ();


  if (singleton == 0)
    {
      if (ACE_Object_Manager::starting_up () ||
          ACE_Object_Manager::shutting_down ())
        {







          do { singleton = new (::std::nothrow) (ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


        }
      else
        {




          static ACE_LOCK *lock = 0;
          if (ACE_Object_Manager::get_singleton_lock (lock) != 0)

            return 0;

          ACE_Guard< ACE_LOCK > ace_mon (*lock); if (ace_mon.locked () != 0) { ;; } else { return 0; };


          if (singleton == 0)
            do { singleton = new (::std::nothrow) (ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


        }
    }

  return ((&singleton->instance_)->operator TYPE * ());
}

template <class TYPE, class ACE_LOCK> void
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::close (void)
{
  ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK> *&singleton =
    ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::instance_i ();

  if (singleton)
    singleton->cleanup ();
}



template <class TYPE, class ACE_LOCK> ACE_TSS_Singleton <TYPE, ACE_LOCK> *
ACE_TSS_Singleton<TYPE, ACE_LOCK>::singleton_ = 0;

template <class TYPE, class ACE_LOCK>
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK> *
ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::singleton_ = 0;






template <class TYPE, class ACE_LOCK> ACE_DLL_Singleton_T<TYPE, ACE_LOCK> *
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::singleton_ = 0;


template <class TYPE, class ACE_LOCK> void
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::dump (void)
{
# 434 "/usr/local/include/ace/Singleton.cpp" 3
}

template <class TYPE, class ACE_LOCK>
ACE_DLL_Singleton_T<TYPE, ACE_LOCK> *&
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::instance_i (void)
{
  ;
# 449 "/usr/local/include/ace/Singleton.cpp" 3
  return ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::singleton_;

}

template <class TYPE, class ACE_LOCK> TYPE *
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::instance (void)
{
  ;

  ACE_DLL_Singleton_T<TYPE, ACE_LOCK> *&singleton =
    ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::instance_i ();


  if (singleton == 0)
    {
      if (ACE_Object_Manager::starting_up () ||
          ACE_Object_Manager::shutting_down ())
        {







          do { singleton = new (::std::nothrow) (ACE_DLL_Singleton_T<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);

        }
      else
        {




          static ACE_LOCK *lock = 0;
          if (ACE_Object_Manager::get_singleton_lock (lock) != 0)

            return 0;

          ACE_Guard< ACE_LOCK > ace_mon (*lock); if (ace_mon.locked () != 0) { ;; } else { return 0; };


          if (singleton == 0)
            do { singleton = new (::std::nothrow) (ACE_DLL_Singleton_T<TYPE, ACE_LOCK>); if (singleton == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


        }

      ACE_Framework_Repository::instance ()->register_component
        (new ACE_Framework_Component_T<ACE_DLL_Singleton_T<TYPE, ACE_LOCK> > (singleton));
    }

  return &singleton->instance_;
}

template <class TYPE, class ACE_LOCK> void
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::close (void)
{
  ;

  ACE_DLL_Singleton_T<TYPE, ACE_LOCK> *&singleton =
    ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::instance_i ();

  delete singleton;
  singleton = 0;
}

template <class TYPE, class ACE_LOCK> void
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::close_singleton (void)
{
  ;
  ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::close ();
}

template <class TYPE, class ACE_LOCK> const ACE_TCHAR *
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::dll_name (void)
{
  return this->instance ()->dll_name ();
}

template <class TYPE, class ACE_LOCK> const ACE_TCHAR *
ACE_DLL_Singleton_T<TYPE, ACE_LOCK>::name (void)
{
  return this->instance ()->name ();
}




template <class TYPE> const ACE_TCHAR*
ACE_DLL_Singleton_Adapter_T<TYPE>::dll_name (void)
{


  return "ACE";
}


# 323 "/usr/local/include/ace/Singleton.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 330 "/usr/local/include/ace/Singleton.h" 2 3
# 31 "/usr/local/include/ace/Service_Gestalt.h" 2 3








class ACE_Service_Type_Factory;
class ACE_Location_Node;





class ACE_Static_Svc_Descriptor;
class ACE_Svc_Conf_Param;
# 70 "/usr/local/include/ace/Service_Gestalt.h" 3
class ACE_Service_Gestalt
{
private:



  ACE_Service_Gestalt(const ACE_Service_Gestalt&);
  ACE_Service_Gestalt& operator=(const ACE_Service_Gestalt&);

public:
  enum
  {
    MAX_SERVICES = 1024
  };

  enum
  {
    DEFAULT_SIZE = 1024
  };




  ACE_Service_Gestalt (size_t size = DEFAULT_SIZE,
                       bool svc_repo_is_owned = true,
                       bool no_static_svcs = true);



  ~ACE_Service_Gestalt (void);


  void dump (void) const;
# 118 "/usr/local/include/ace/Service_Gestalt.h" 3
  int open (const ACE_TCHAR program_name[],
            const ACE_TCHAR *logger_key = 0,
            bool ignore_static_svcs = true,
            bool ignore_default_svc_conf_file = false,
            bool ignore_debug_flag = false);
# 182 "/usr/local/include/ace/Service_Gestalt.h" 3
  int open (int argc,
            ACE_TCHAR *argv[],
            const ACE_TCHAR *logger_key = 0,
            bool ignore_static_svcs = true,
            bool ignore_default_svc_conf_file = false,
            bool ignore_debug_flag = false);



  int is_opened (void);


  struct __Ace {};



  int process_directive (const ACE_TCHAR directive[]);
# 212 "/usr/local/include/ace/Service_Gestalt.h" 3
  int process_directive (const ACE_Static_Svc_Descriptor &ssd,
                         bool force_replace = false);



  int process_file (const ACE_TCHAR file[]);
# 227 "/usr/local/include/ace/Service_Gestalt.h" 3
  int find (const ACE_TCHAR name[],
            const ACE_Service_Type **srp = 0,
            bool ignore_suspended = true) const;
# 248 "/usr/local/include/ace/Service_Gestalt.h" 3
  int parse_args (int argc, ACE_TCHAR *argv[]);






  int process_directives (bool ignore_default_svc_conf_file);



  int close (void);


  int insert (ACE_Static_Svc_Descriptor *stsd);
# 273 "/usr/local/include/ace/Service_Gestalt.h" 3
  int initialize (const ACE_Service_Type_Factory *,
                  const ACE_TCHAR *parameters);
# 289 "/usr/local/include/ace/Service_Gestalt.h" 3
  int initialize (const ACE_Service_Type *,
                  const ACE_TCHAR *parameters);


  int initialize (const ACE_TCHAR *svc_name,
                  const ACE_TCHAR *parameters);



  int resume (const ACE_TCHAR svc_name[]);
# 308 "/usr/local/include/ace/Service_Gestalt.h" 3
  int suspend (const ACE_TCHAR svc_name[]);



  int remove (const ACE_TCHAR svc_name[]);





  int find_static_svc_descriptor (const ACE_TCHAR* name,
                                  ACE_Static_Svc_Descriptor **ssd = 0) const;

  struct Processed_Static_Svc
  {
    Processed_Static_Svc (const ACE_Static_Svc_Descriptor *);
    ~Processed_Static_Svc (void);
    ACE_TCHAR * name_;
    const ACE_Static_Svc_Descriptor *assd_;
  };


  ACE_Service_Repository* current_service_repository (void);

protected:

  int parse_args_i (int, ACE_TCHAR *argv[],
                    bool& ignore_default_svc_conf_file);
# 347 "/usr/local/include/ace/Service_Gestalt.h" 3
  int open_i (const ACE_TCHAR program_name[],
              const ACE_TCHAR *logger_key = 0,
              bool ignore_static_svcs = true,
              bool ignore_default_svc_conf_file = false,
              bool ignore_debug_flag = false);


  int init_svc_conf_file_queue (void);



  int load_static_svcs (void);



  int process_commandline_directives (void);




  int process_directive_i (const ACE_Static_Svc_Descriptor &ssd,
                           bool force_replace = false);





  int process_directives_i (ACE_Svc_Conf_Param *param);
# 383 "/usr/local/include/ace/Service_Gestalt.h" 3
  int initialize_i (const ACE_Service_Type *sr, const ACE_TCHAR *parameters);

  const ACE_Static_Svc_Descriptor* find_processed_static_svc (const ACE_TCHAR*);
  void add_processed_static_svc (const ACE_Static_Svc_Descriptor *);




  int init_i (void);

protected:



  typedef ACE_Unbounded_Queue<ACE_TString> ACE_SVC_QUEUE;
  typedef ACE_Unbounded_Queue_Iterator<ACE_TString> ACE_SVC_QUEUE_ITERATOR;


  typedef ACE_Unbounded_Set<ACE_Static_Svc_Descriptor *>
    ACE_STATIC_SVCS;

  typedef ACE_Unbounded_Set_Iterator<ACE_Static_Svc_Descriptor *>
    ACE_STATIC_SVCS_ITERATOR;

  typedef ACE_Unbounded_Set<Processed_Static_Svc *>
    ACE_PROCESSED_STATIC_SVCS;

  typedef ACE_Unbounded_Set_Iterator<Processed_Static_Svc *>
    ACE_PROCESSED_STATIC_SVCS_ITERATOR;

  friend class ACE_Dynamic_Service_Base;
  friend class ACE_Service_Object;
  friend class ACE_Service_Config;
  friend class ACE_Service_Config_Guard;

protected:



  bool svc_repo_is_owned_;



  size_t svc_repo_size_;







  int is_opened_;



  const ACE_TCHAR *logger_key_;


  bool no_static_svcs_;


  ACE_SVC_QUEUE* svc_queue_;





  ACE_SVC_QUEUE* svc_conf_file_queue_;


  ACE_Service_Repository* repo_;


  ACE_STATIC_SVCS* static_svcs_;




  ACE_PROCESSED_STATIC_SVCS* processed_static_svcs_;


  ACE_Atomic_Op<ACE_MT_SYNCH::MUTEX, long> refcnt_;

 public:
  static void intrusive_add_ref (ACE_Service_Gestalt*);
  static void intrusive_remove_ref (ACE_Service_Gestalt*);

};
# 494 "/usr/local/include/ace/Service_Gestalt.h" 3
class ACE_Service_Type_Dynamic_Guard
{
public:
  ACE_Service_Type_Dynamic_Guard (ACE_Service_Repository &r,
                                  ACE_TCHAR const *name);

  ~ACE_Service_Type_Dynamic_Guard (void);

private:
  ACE_Service_Repository & repo_;
  size_t repo_begin_;
  ACE_TCHAR const * const name_;


  ACE_Guard< ACE_Recursive_Thread_Mutex > repo_monitor_;

};





# 1 "/usr/local/include/ace/Service_Gestalt.inl" 1 3











inline int
ACE_Service_Gestalt::open (const ACE_TCHAR program_name[],
                           const ACE_TCHAR *logger_key,
                           bool ignore_static_svcs,
                           bool ignore_default_svc_conf,
                           bool ignore_debug_flag)
{
  ;
  this->no_static_svcs_ = ignore_static_svcs;

  return this->open_i (program_name,
                       logger_key,
                       ignore_static_svcs,
                       ignore_default_svc_conf,
                       ignore_debug_flag);
}

inline int
ACE_Service_Gestalt::open (int argc,
                          ACE_TCHAR *argv[],
                          const ACE_TCHAR *logger_key,
                          bool ignore_static_svcs,
                          bool ignore_default_svc_conf,
                          bool ignore_debug_flag)
{
  ;

  this->no_static_svcs_ = ignore_static_svcs;

  if (this->parse_args_i (argc,
                          argv,
                          ignore_default_svc_conf) == -1)
    return -1;

  return this->open_i (argv == 0 ? 0 : argv[0],
                       logger_key,
                       ignore_static_svcs,
                       ignore_default_svc_conf,
                       ignore_debug_flag);
}



inline int
ACE_Service_Gestalt::find (const ACE_TCHAR name[],
                           const ACE_Service_Type **srp,
                           bool ignore_suspended) const
{




  if (this->repo_ != 0)
    return this->repo_->find (name, srp, ignore_suspended);

  return 0;
}

inline ACE_Service_Repository*
ACE_Service_Gestalt::current_service_repository (void)
{
  return this->repo_;
}


# 517 "/usr/local/include/ace/Service_Gestalt.h" 2 3



# 1 "/usr/local/include/ace/post.h" 1 3
# 521 "/usr/local/include/ace/Service_Gestalt.h" 2 3
# 28 "/usr/local/include/ace/Service_Object.h" 2 3


# 44 "/usr/local/include/ace/Service_Object.h" 3
class ACE_Service_Object
  : public ACE_Event_Handler,
    public ACE_Shared_Object
{
public:


  ACE_Service_Object (ACE_Reactor * = 0);


  virtual ~ACE_Service_Object (void);


  virtual int suspend (void);


  virtual int resume (void);
};


class ACE_Service_Type_Impl;
# 74 "/usr/local/include/ace/Service_Object.h" 3
class ACE_Service_Type
{
public:
  enum
  {

    DELETE_OBJ = 1,


    DELETE_THIS = 2
  };

  enum
    {
      SERVICE_OBJECT = 266,
      MODULE = 264,
      STREAM = 265,
      INVALID_TYPE = -1
    };


  ACE_Service_Type (const ACE_TCHAR *n,
                    ACE_Service_Type_Impl *o,
                    const ACE_DLL &dll,
                    bool active);
  ACE_Service_Type (const ACE_TCHAR *n,
                    ACE_Service_Type_Impl *o,
                    ACE_SHLIB_HANDLE handle,
                    bool active);
  ~ACE_Service_Type (void);

  const ACE_TCHAR *name (void) const;
  void name (const ACE_TCHAR *);

  const ACE_Service_Type_Impl *type (void) const;
  void type (const ACE_Service_Type_Impl *, bool active = true);


  bool is_forward_declaration (void) const;

  int suspend (void) const;
  int resume (void) const;
  bool active (void) const;
  void active (bool turnon);


  int fini (void);


  bool fini_called (void) const;


  void dump (void) const;


  const ACE_DLL & dll (void) const;


  void dll (const ACE_DLL&);


  struct __Ace {};

private:

  const ACE_TCHAR *name_;


  const ACE_Service_Type_Impl *type_;



  mutable ACE_DLL dll_;


  bool active_;


  bool fini_already_called_;
};
# 167 "/usr/local/include/ace/Service_Object.h" 3
class ACE_Service_Object_Ptr
{
public:


  ACE_Service_Object_Ptr (ACE_Service_Object *so);


  ~ACE_Service_Object_Ptr (void);


  ACE_Service_Object *operator-> ();

private:

  ACE_Service_Object *service_object_;
};
# 199 "/usr/local/include/ace/Service_Object.h" 3



# 1 "/usr/local/include/ace/Service_Object.inl" 1 3





inline ACE_Service_Object_Ptr::ACE_Service_Object_Ptr (ACE_Service_Object *so)
  : service_object_ (so)
{
}

inline ACE_Service_Object_Ptr::~ACE_Service_Object_Ptr (void)
{
  this->service_object_->fini ();
  delete this->service_object_;
}

inline ACE_Service_Object *
ACE_Service_Object_Ptr::operator-> ()
{
  return this->service_object_;
}

inline const ACE_TCHAR *
ACE_Service_Type::name (void) const
{
  ;
  return this->name_;
}

inline const ACE_Service_Type_Impl *
ACE_Service_Type::type (void) const
{
  ;
  return this->type_;
}

inline void
ACE_Service_Type::type (const ACE_Service_Type_Impl *o, bool enabled)
{
  ;
  this->type_ = o;
  ((ACE_Service_Type *) this)->active_ = enabled;
}

inline bool
ACE_Service_Type::active (void) const
{
  ;
  return this->active_;
}

inline void
ACE_Service_Type::active (bool turnon)
{
  ;
  this->active_ = turnon;
}

inline bool
ACE_Service_Type::fini_called (void) const
{
  ;
  return this->fini_already_called_;
}

inline const ACE_DLL & ACE_Service_Type::dll () const
{
  ;
  return this->dll_;
}

inline void ACE_Service_Type::dll (const ACE_DLL &adll)
{
  ;
  this->dll_ = adll;
}


# 203 "/usr/local/include/ace/Service_Object.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 206 "/usr/local/include/ace/Service_Object.h" 2 3
# 18 "/usr/local/include/ace/Task.h" 2 3





# 1 "/usr/local/include/ace/Thread_Manager.h" 1 3
# 15 "/usr/local/include/ace/Thread_Manager.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Thread_Manager.h" 2 3



# 1 "/usr/local/include/ace/Thread_Exit.h" 1 3
# 16 "/usr/local/include/ace/Thread_Exit.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Thread_Exit.h" 2 3







# 1 "/usr/local/include/ace/Thread_Control.h" 1 3
# 16 "/usr/local/include/ace/Thread_Control.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Thread_Control.h" 2 3









class ACE_Thread_Manager;
# 43 "/usr/local/include/ace/Thread_Control.h" 3
class ACE_Thread_Control
{
public:


  ACE_Thread_Control (ACE_Thread_Manager *tm = 0,
                      int insert = 0);



  ~ACE_Thread_Control (void);



  ACE_THR_FUNC_RETURN exit (ACE_THR_FUNC_RETURN status,
                            int do_thr_exit);



  int insert (ACE_Thread_Manager *tm, int insert = 0);


  ACE_Thread_Manager *thr_mgr (void);



  ACE_Thread_Manager *thr_mgr (ACE_Thread_Manager *);


  ACE_THR_FUNC_RETURN status (ACE_THR_FUNC_RETURN status);


  ACE_THR_FUNC_RETURN status (void);


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Thread_Manager *tm_;


  ACE_THR_FUNC_RETURN status_;
};








# 1 "/usr/local/include/ace/Thread_Control.inl" 1 3








inline ACE_THR_FUNC_RETURN
ACE_Thread_Control::status (ACE_THR_FUNC_RETURN s)
{
  ;
  return this->status_ = s;
}



inline ACE_THR_FUNC_RETURN
ACE_Thread_Control::status (void)
{
  ;
  return this->status_;
}



inline ACE_Thread_Manager *
ACE_Thread_Control::thr_mgr (void)
{
  ;
  return this->tm_;
}




inline ACE_Thread_Manager *
ACE_Thread_Control::thr_mgr (ACE_Thread_Manager *tm)
{
  ;
  ACE_Thread_Manager *o_tm = this->tm_;
  this->tm_ = tm;
  return o_tm;
}


# 99 "/usr/local/include/ace/Thread_Control.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 102 "/usr/local/include/ace/Thread_Control.h" 2 3
# 25 "/usr/local/include/ace/Thread_Exit.h" 2 3


# 42 "/usr/local/include/ace/Thread_Exit.h" 3
class ACE_Thread_Exit
{
public:

  ACE_Thread_Exit (void);


  void thr_mgr (ACE_Thread_Manager *tm);



  ~ACE_Thread_Exit (void);


  static ACE_Thread_Exit *instance (void);



  static void cleanup (void *instance);

private:


  ACE_Thread_Control thread_control_;
# 74 "/usr/local/include/ace/Thread_Exit.h" 3
  static bool is_constructed_;
};
# 86 "/usr/local/include/ace/Thread_Exit.h" 3
class ACE_Thread_Exit_Maybe
{
public:

  ACE_Thread_Exit_Maybe (int flag = 0);


  ~ACE_Thread_Exit_Maybe (void);


  ACE_Thread_Exit * operator -> (void) const;


  ACE_Thread_Exit * instance (void) const;

private:


  ACE_Thread_Exit *instance_;

};



# 1 "/usr/local/include/ace/post.h" 1 3
# 111 "/usr/local/include/ace/Thread_Exit.h" 2 3
# 20 "/usr/local/include/ace/Thread_Manager.h" 2 3





# 1 "/usr/local/include/ace/Condition_Thread_Mutex.h" 1 3
# 17 "/usr/local/include/ace/Condition_Thread_Mutex.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Condition_Thread_Mutex.h" 2 3
# 32 "/usr/local/include/ace/Condition_Thread_Mutex.h" 3


class ACE_Time_Value;

class ACE_Condition_Attributes
{
public:

  ACE_Condition_Attributes (int type = PTHREAD_PROCESS_PRIVATE);


  ~ACE_Condition_Attributes (void);

private:
  friend class ACE_Condition_Thread_Mutex;


  ACE_condattr_t attributes_;

private:

  void operator= (const ACE_Condition_Attributes &);
  ACE_Condition_Attributes (const ACE_Condition_Attributes &);
};
# 77 "/usr/local/include/ace/Condition_Thread_Mutex.h" 3
class ACE_Condition_Thread_Mutex
{
public:

  ACE_Condition_Thread_Mutex (ACE_Thread_Mutex &m,
                              const ACE_TCHAR *name = 0,
                              void *arg = 0);


  ACE_Condition_Thread_Mutex (ACE_Thread_Mutex &m,
                              ACE_Condition_Attributes &attributes,
                              const ACE_TCHAR *name = 0,
                              void *arg = 0);


  ~ACE_Condition_Thread_Mutex (void);






  int remove (void);







  int wait (const ACE_Time_Value *abstime);


  int wait (void);
# 120 "/usr/local/include/ace/Condition_Thread_Mutex.h" 3
  int wait (ACE_Thread_Mutex &mutex, const ACE_Time_Value *abstime = 0);


  int signal (void);


  int broadcast (void);


  ACE_Thread_Mutex &mutex (void);


  void dump (void) const;


  struct __Ace {};

protected:

  ACE_cond_t cond_;


  ACE_Thread_Mutex &mutex_;






  bool removed_;

private:

  void operator= (const ACE_Condition_Thread_Mutex &);
  ACE_Condition_Thread_Mutex (const ACE_Condition_Thread_Mutex &);
};
# 181 "/usr/local/include/ace/Condition_Thread_Mutex.h" 3



# 1 "/usr/local/include/ace/Condition_Thread_Mutex.inl" 1 3






inline
ACE_Condition_Attributes::ACE_Condition_Attributes (int type)
{
  (void) ACE_OS::condattr_init (this->attributes_, type);
}

inline
ACE_Condition_Attributes::~ACE_Condition_Attributes (void)
{
  ACE_OS::condattr_destroy (this->attributes_);
}

inline int
ACE_Condition_Thread_Mutex::remove (void)
{
# 30 "/usr/local/include/ace/Condition_Thread_Mutex.inl" 3
  int result = 0;

  if (!this->removed_)
    {
      this->removed_ = true;

      while ((result = ACE_OS::cond_destroy (&this->cond_)) == -1
             && (*__errno_location ()) == 16)
        {
          ACE_OS::cond_broadcast (&this->cond_);
          ACE_OS::thr_yield ();
        }
    }
  return result;
}

inline ACE_Thread_Mutex &
ACE_Condition_Thread_Mutex::mutex (void)
{

  return this->mutex_;
}
# 74 "/usr/local/include/ace/Condition_Thread_Mutex.inl" 3

# 185 "/usr/local/include/ace/Condition_Thread_Mutex.h" 2 3




# 1 "/usr/local/include/ace/post.h" 1 3
# 190 "/usr/local/include/ace/Condition_Thread_Mutex.h" 2 3
# 26 "/usr/local/include/ace/Thread_Manager.h" 2 3

# 1 "/usr/local/include/ace/Containers.h" 1 3
# 16 "/usr/local/include/ace/Containers.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Containers.h" 2 3









template <class T> class ACE_Double_Linked_List;
template <class T> class ACE_Double_Linked_List_Iterator_Base;
template <class T> class ACE_Double_Linked_List_Iterator;
template <class T> class ACE_Double_Linked_List_Reverse_Iterator;







class ACE_DLList_Node
{
public:
  friend class ACE_Double_Linked_List<ACE_DLList_Node>;
  friend class ACE_Double_Linked_List_Iterator_Base<ACE_DLList_Node>;
  friend class ACE_Double_Linked_List_Iterator<ACE_DLList_Node>;
  friend class ACE_Double_Linked_List_Reverse_Iterator<ACE_DLList_Node>;

  ACE_DLList_Node (void *i,
                   ACE_DLList_Node *n = 0,
                   ACE_DLList_Node *p = 0);


  struct __Ace {};

  void *item_;

  ACE_DLList_Node *next_;
  ACE_DLList_Node *prev_;

protected:
  ACE_DLList_Node (void);
};




# 1 "/usr/local/include/ace/Containers.inl" 1 3






inline
ACE_DLList_Node::ACE_DLList_Node (void)
  : item_ (0),
    next_ (0),
    prev_ (0)
{
}

inline
ACE_DLList_Node::ACE_DLList_Node (void *i,
                                  ACE_DLList_Node *n,
                                  ACE_DLList_Node *p)
  : item_ (i),
    next_ (n),
    prev_ (p)
{
}


# 65 "/usr/local/include/ace/Containers.h" 2 3


# 1 "/usr/local/include/ace/Containers_T.h" 1 3
# 16 "/usr/local/include/ace/Containers_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Containers_T.h" 2 3
# 25 "/usr/local/include/ace/Containers_T.h" 3
# 1 "/usr/local/include/ace/Containers.h" 1 3
# 26 "/usr/local/include/ace/Containers_T.h" 2 3





# 1 "/usr/local/include/ace/Array_Base.h" 1 3
# 16 "/usr/local/include/ace/Array_Base.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Array_Base.h" 2 3
# 28 "/usr/local/include/ace/Array_Base.h" 3



template <class T> class ACE_Array_Iterator;
# 42 "/usr/local/include/ace/Array_Base.h" 3
template<class T>
class ACE_Array_Base
{
public:


  typedef T TYPE;
  typedef ACE_Array_Iterator<T> ITERATOR;


  typedef T value_type;
  typedef value_type * iterator;
  typedef value_type const * const_iterator;
  typedef value_type & reference;
  typedef value_type const & const_reference;
  typedef value_type * pointer;
  typedef value_type const * const_pointer;
  typedef ptrdiff_t difference_type;
  typedef ACE_Allocator::size_type size_type;

  typedef std::reverse_iterator<iterator> reverse_iterator; typedef std::reverse_iterator<const_iterator> const_reverse_iterator;




  ACE_Array_Base (size_type size = 0,
                  ACE_Allocator * the_allocator = 0);


  ACE_Array_Base (size_type size,
                  T const & default_value,
                  ACE_Allocator * the_allocator = 0);






  ACE_Array_Base (ACE_Array_Base<T> const & s);
# 90 "/usr/local/include/ace/Array_Base.h" 3
  void operator= (ACE_Array_Base<T> const & s);


  ~ACE_Array_Base (void);





  T & operator[] (size_type slot);



  T const & operator[] (size_type slot) const;



  int set (T const & new_item, size_type slot);







  int get (T & item, size_type slot) const;


  size_type size (void) const;






  int size (size_type new_size);


  size_type max_size (void) const;







  int max_size (size_type new_size);







  iterator begin (void);
  iterator end (void);
  const_iterator begin (void) const;
  const_iterator end (void) const;
# 156 "/usr/local/include/ace/Array_Base.h" 3
  reverse_iterator rbegin (void);
  reverse_iterator rend (void);
  const_reverse_iterator rbegin (void) const;
  const_reverse_iterator rend (void) const;




  void swap (ACE_Array_Base<T> & array);

protected:



  bool in_range (size_type slot) const;



  size_type max_size_;
# 183 "/usr/local/include/ace/Array_Base.h" 3
  size_type cur_size_;


  value_type * array_;


  ACE_Allocator * allocator_;

  friend class ACE_Array_Iterator<T>;
};
# 206 "/usr/local/include/ace/Array_Base.h" 3
template <class T>
class ACE_Array_Iterator
{
public:

  ACE_Array_Iterator (ACE_Array_Base<T> &);





  int next (T *&next_item);



  int advance (void);


  int done (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  size_t current_;


  ACE_Array_Base<T> &array_;
};




# 1 "/usr/local/include/ace/Array_Base.inl" 1 3







template <class T> inline
ACE_Array_Base<T>::~ACE_Array_Base (void)
{
  do { if (this->array_) { for (size_t i = 0; i < this->max_size_; ++i) { (&(this->array_)[i])->~T (); } this->allocator_->free (this->array_); } } while (0);



}

template <class T>
inline typename ACE_Array_Base<T>::iterator
ACE_Array_Base<T>::begin (void)
{
  return this->array_;
}

template <class T>
inline typename ACE_Array_Base<T>::iterator
ACE_Array_Base<T>::end (void)
{
  return this->array_ + this->cur_size_;
}

template <class T>
inline typename ACE_Array_Base<T>::const_iterator
ACE_Array_Base<T>::begin (void) const
{
  return this->array_;
}

template <class T>
inline typename ACE_Array_Base<T>::const_iterator
ACE_Array_Base<T>::end (void) const
{
  return this->array_ + this->cur_size_;
}

template <class T>
inline typename ACE_Array_Base<T>::reverse_iterator
ACE_Array_Base<T>::rbegin (void)
{
  return reverse_iterator (this->end ());
}

template <class T>
inline typename ACE_Array_Base<T>::reverse_iterator
ACE_Array_Base<T>::rend (void)
{
  return reverse_iterator (this->begin ());
}

template <class T>
inline typename ACE_Array_Base<T>::const_reverse_iterator
ACE_Array_Base<T>::rbegin (void) const
{
  return const_reverse_iterator (this->end ());
}

template <class T>
inline typename ACE_Array_Base<T>::const_reverse_iterator
ACE_Array_Base<T>::rend (void) const
{
  return const_reverse_iterator (this->begin ());
}

template <class T> inline typename ACE_Array_Base<T>::size_type
ACE_Array_Base<T>::size (void) const
{
  return this->cur_size_;
}

template <class T> inline typename ACE_Array_Base<T>::size_type
ACE_Array_Base<T>::max_size (void) const
{
  return this->max_size_;
}

template <class T> inline bool
ACE_Array_Base<T>::in_range (typename ACE_Array_Base<T>::size_type index) const
{
  return index < this->cur_size_;
}

template <class T> inline T &
ACE_Array_Base<T>::operator[] (typename ACE_Array_Base<T>::size_type index)
{
  return this->array_[index];
}

template <class T> inline const T &
ACE_Array_Base<T>::operator[] (typename ACE_Array_Base<T>::size_type index) const
{
  return this->array_[index];
}



template <class T> inline void
ACE_Array_Iterator<T>::dump (void) const
{



}

template <class T> inline
ACE_Array_Iterator<T>::ACE_Array_Iterator (ACE_Array_Base<T> &a)
    : current_ (0),
      array_ (a)
{

}

template <class T> inline int
ACE_Array_Iterator<T>::advance (void)
{


  if (this->current_ < array_.size ())
    {
      ++this->current_;
      return 1;
    }
  else
    {

      return 0;
    }
}

template <class T> inline int
ACE_Array_Iterator<T>::done (void) const
{
  ;

  return this->current_ >= array_.size ();
}


# 244 "/usr/local/include/ace/Array_Base.h" 2 3



# 1 "/usr/local/include/ace/Array_Base.cpp" 1 3





# 1 "/usr/local/include/ace/Array_Base.h" 1 3
# 7 "/usr/local/include/ace/Array_Base.cpp" 2 3
# 21 "/usr/local/include/ace/Array_Base.cpp" 3



template <class T>
ACE_Array_Base<T>::ACE_Array_Base (typename ACE_Array_Base<T>::size_type size,
                                   ACE_Allocator *alloc)
  : max_size_ (size),
    cur_size_ (size),
    allocator_ (alloc)
{
  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  if (size != 0)
    {
      do { this->array_ = (T *) this->allocator_->malloc (size * sizeof (T)); if (this->array_ == 0) { (*__errno_location ()) = 12; return; } } while (0);

      for (size_type i = 0; i < size; ++i)
        new (&array_[i]) T;
    }
  else
    this->array_ = 0;
}

template <class T>
ACE_Array_Base<T>::ACE_Array_Base (typename ACE_Array_Base<T>::size_type size,
                                   const T &default_value,
                                   ACE_Allocator *alloc)
  : max_size_ (size),
    cur_size_ (size),
    allocator_ (alloc)
{
  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  if (size != 0)
    {
      do { this->array_ = (T *) this->allocator_->malloc (size * sizeof (T)); if (this->array_ == 0) { (*__errno_location ()) = 12; return; } } while (0);

      for (size_type i = 0; i < size; ++i)
        new (&array_[i]) T (default_value);
    }
  else
    this->array_ = 0;
}



template <class T>
ACE_Array_Base<T>::ACE_Array_Base (const ACE_Array_Base<T> &s)
  : max_size_ (s.size ()),
    cur_size_ (s.size ()),
    allocator_ (s.allocator_)
{
  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->array_ = (T *) this->allocator_->malloc (s.size () * sizeof (T)); if (this->array_ == 0) { (*__errno_location ()) = 12; return; } } while (0);

  for (size_type i = 0; i < this->size (); ++i)
    new (&this->array_[i]) T (s.array_[i]);
}



template <class T> void
ACE_Array_Base<T>::operator= (const ACE_Array_Base<T> &s)
{


  if (this != &s)
    {
      if (this->max_size_ < s.size ())
        {







          ACE_Array_Base<T> tmp (s);
          this->swap (tmp);
        }
      else
        {
# 119 "/usr/local/include/ace/Array_Base.cpp" 3
          do { if (this->array_) { for (size_t i = 0; i < s.size (); ++i) { (&(this->array_)[i])->~T (); } } } while (0);



          this->cur_size_ = s.size ();

          for (size_type i = 0; i < this->size (); ++i)
            new (&this->array_[i]) T (s.array_[i]);
        }
    }
}



template <class T> int
ACE_Array_Base<T>::set (const T &new_item,
                        typename ACE_Array_Base<T>::size_type slot)
{
  if (this->in_range (slot))
    {
      this->array_[slot] = new_item;
      return 0;
    }
  else
    return -1;
}



template <class T> int
ACE_Array_Base<T>::get (T &item,
                        typename ACE_Array_Base<T>::size_type slot) const
{
  if (this->in_range (slot))
    {


      item = this->array_[slot];
      return 0;
    }
  else
    return -1;
}

template<class T> int
ACE_Array_Base<T>::max_size (typename ACE_Array_Base<T>::size_type new_size)
{
  if (new_size > this->max_size_)
    {
      T *tmp = 0;

      do { tmp = (T *) this->allocator_->malloc (new_size * sizeof (T)); if (tmp == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      for (size_type i = 0; i < this->cur_size_; ++i)
        new (&tmp[i]) T (this->array_[i]);



      for (size_type j = this->cur_size_; j < new_size; ++j)
        new (&tmp[j]) T;

      do { if (this->array_) { for (size_t i = 0; i < this->max_size_; ++i) { (&(this->array_)[i])->~T (); } this->allocator_->free (this->array_); } } while (0);



      this->array_ = tmp;
      this->max_size_ = new_size;
      this->cur_size_ = new_size;
    }

  return 0;
}

template<class T> int
ACE_Array_Base<T>::size (typename ACE_Array_Base<T>::size_type new_size)
{
  int const r = this->max_size (new_size);

  if (r == 0)
    this->cur_size_ = new_size;

  return r;
}

template<class T>
void
ACE_Array_Base<T>::swap (ACE_Array_Base<T> & rhs)
{
  std::swap (this->max_size_ , rhs.max_size_);
  std::swap (this->cur_size_ , rhs.cur_size_);
  std::swap (this->array_ , rhs.array_);
  std::swap (this->allocator_, rhs.allocator_);
}



template <class T> int
ACE_Array_Iterator<T>::next (T *&item)
{


  if (this->done ())
    {
      item = 0;
      return 0;
    }
  else
    {
      item = &array_[current_];
      return 1;
    }
}


# 248 "/usr/local/include/ace/Array_Base.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 255 "/usr/local/include/ace/Array_Base.h" 2 3
# 32 "/usr/local/include/ace/Containers_T.h" 2 3









class ACE_Allocator;
# 77 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Bounded_Stack
{
public:







  ACE_Bounded_Stack (size_t size);






  ACE_Bounded_Stack (const ACE_Bounded_Stack<T> &s);







  void operator= (const ACE_Bounded_Stack<T> &s);





  ~ACE_Bounded_Stack (void);
# 119 "/usr/local/include/ace/Containers_T.h" 3
  int push (const T &new_item);







  int pop (T &item);







  int top (T &item) const;







  int is_empty (void) const;





  int is_full (void) const;





  size_t size (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  size_t size_;


  size_t top_;


  T *stack_;
};
# 208 "/usr/local/include/ace/Containers_T.h" 3
template <class T, size_t ACE_SIZE>
class ACE_Fixed_Stack
{
public:





  ACE_Fixed_Stack (void);





  ACE_Fixed_Stack (const ACE_Fixed_Stack<T, ACE_SIZE> &s);





  void operator= (const ACE_Fixed_Stack<T, ACE_SIZE> &s);





  ~ACE_Fixed_Stack (void);
# 245 "/usr/local/include/ace/Containers_T.h" 3
  int push (const T &new_item);







  int pop (T &item);







  int top (T &item) const;







  int is_empty (void) const;





  int is_full (void) const;





  size_t size (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  size_t size_;


  size_t top_;


  T stack_[ACE_SIZE];
};



template<class T> class ACE_Ordered_MultiSet;
template<class T> class ACE_Ordered_MultiSet_Iterator;






template<class T>
class ACE_DNode
{
  friend class ACE_Ordered_MultiSet<T>;
  friend class ACE_Ordered_MultiSet_Iterator<T>;

public:


  ~ACE_DNode (void);

private:


  ACE_DNode (const T &i, ACE_DNode<T> *n = 0, ACE_DNode<T> *p = 0);


  ACE_DNode<T> *next_;


  ACE_DNode<T> *prev_;


  T item_;
};
# 373 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Unbounded_Stack
{
public:
  friend class ACE_Unbounded_Stack_Iterator<T>;


  typedef ACE_Unbounded_Stack_Iterator<T> ITERATOR;
# 389 "/usr/local/include/ace/Containers_T.h" 3
  ACE_Unbounded_Stack (ACE_Allocator *the_allocator = 0);





  ACE_Unbounded_Stack (const ACE_Unbounded_Stack<T> &s);





  void operator= (const ACE_Unbounded_Stack<T> &s);





  ~ACE_Unbounded_Stack (void);
# 418 "/usr/local/include/ace/Containers_T.h" 3
  int push (const T &new_item);







  int pop (T &item);







  int top (T &item) const;







  int is_empty (void) const;





  int is_full (void) const;
# 458 "/usr/local/include/ace/Containers_T.h" 3
  int insert (const T &new_item);






  int remove (const T &item);





  int find (const T &item) const;





  size_t size (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  void delete_all_nodes (void);


  void copy_all_nodes (const ACE_Unbounded_Stack<T> &s);


  ACE_Node<T> *head_;


  size_t cur_size_;


  ACE_Allocator *allocator_;
};






template <class T>
class ACE_Unbounded_Stack_Iterator
{
public:


  ACE_Unbounded_Stack_Iterator (ACE_Unbounded_Stack<T> &stack);





  int next (T *&next_item);



  int advance (void);



  int first (void);


  int done (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Node<T> *current_;


  ACE_Unbounded_Stack<T> &stack_;
};

template <class T>
class ACE_Double_Linked_List;







template <class T>
class ACE_Double_Linked_List_Iterator_Base
{
public:




  int next (T *&) const;





  T *next (void) const;


  int done (void) const;



  T & operator* (void) const ;
# 586 "/usr/local/include/ace/Containers_T.h" 3
  void reset (ACE_Double_Linked_List<T> &);


  struct __Ace {};

protected:



  ACE_Double_Linked_List_Iterator_Base (const ACE_Double_Linked_List<T> &);


  ACE_Double_Linked_List_Iterator_Base (const
                                        ACE_Double_Linked_List_Iterator_Base<T>
                                        &iter);
# 609 "/usr/local/include/ace/Containers_T.h" 3
  int go_head (void);



  int go_tail (void);







  T *not_done (void) const ;



  T *do_advance (void);



  T *do_retreat (void);


  void dump_i (void) const;


  T *current_;

  const ACE_Double_Linked_List<T> *dllist_;
};
# 653 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Double_Linked_List_Iterator : public ACE_Double_Linked_List_Iterator_Base <T>
{
public:

  ACE_Double_Linked_List_Iterator (const ACE_Double_Linked_List<T> &);
# 669 "/usr/local/include/ace/Containers_T.h" 3
  void reset (ACE_Double_Linked_List<T> &);



  int first (void);



  int advance (void);







  T* advance_and_remove (bool dont_remove);




  ACE_Double_Linked_List_Iterator<T> & operator++ (void);


  ACE_Double_Linked_List_Iterator<T> operator++ (int);


  ACE_Double_Linked_List_Iterator<T> & operator-- (void);


  ACE_Double_Linked_List_Iterator<T> operator-- (int);


  void dump (void) const;


  struct __Ace {};
};
# 722 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Double_Linked_List_Reverse_Iterator : public ACE_Double_Linked_List_Iterator_Base <T>
{
public:

  ACE_Double_Linked_List_Reverse_Iterator (ACE_Double_Linked_List<T> &);
# 738 "/usr/local/include/ace/Containers_T.h" 3
  void reset (ACE_Double_Linked_List<T> &);



  int first (void);



  int advance (void);







  T* advance_and_remove (bool dont_remove);




  ACE_Double_Linked_List_Reverse_Iterator<T> & operator++ (void);


  ACE_Double_Linked_List_Reverse_Iterator<T> operator++ (int);


  ACE_Double_Linked_List_Reverse_Iterator<T> & operator-- (void);


  ACE_Double_Linked_List_Reverse_Iterator<T> operator-- (int);


  void dump (void) const;


  struct __Ace {};
};
# 822 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Double_Linked_List
{
public:
  friend class ACE_Double_Linked_List_Iterator_Base<T>;
  friend class ACE_Double_Linked_List_Iterator<T>;
  friend class ACE_Double_Linked_List_Reverse_Iterator<T>;


  typedef ACE_Double_Linked_List_Iterator<T> ITERATOR;
  typedef ACE_Double_Linked_List_Reverse_Iterator<T> REVERSE_ITERATOR;
# 841 "/usr/local/include/ace/Containers_T.h" 3
  ACE_Double_Linked_List (ACE_Allocator *the_allocator = 0);






  ACE_Double_Linked_List (const ACE_Double_Linked_List<T> &);






  void operator= (const ACE_Double_Linked_List<T> &);





  ~ACE_Double_Linked_List (void);







  int is_empty (void) const;





  int is_full (void) const;
# 884 "/usr/local/include/ace/Containers_T.h" 3
  T *insert_tail (T *new_item);






  T *insert_head (T *new_item);







  T* delete_head (void);







  T *delete_tail (void);
# 917 "/usr/local/include/ace/Containers_T.h" 3
  void reset (void);







  int get (T *&item, size_t slot = 0);





  size_t size (void) const;


  void dump (void) const;





  int remove (T *n);


  struct __Ace {};

protected:




  void delete_nodes (void);






  void copy_nodes (const ACE_Double_Linked_List<T> &rhs);





  void init_head (void);







  int insert_element (T *new_item,
                      int before = 0,
                      T *old_item = 0);
# 983 "/usr/local/include/ace/Containers_T.h" 3
  int remove_element (T *item);


  T *head_;


  size_t size_;


  ACE_Allocator *allocator_;
};


template <class T> class ACE_DLList;
template <class T> class ACE_DLList_Iterator;
template <class T> class ACE_DLList_Reverse_Iterator;

typedef ACE_Double_Linked_List<ACE_DLList_Node> ACE_DLList_Base;
# 1030 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_DLList : public ACE_DLList_Base
{
  friend class ACE_DLList_Node;
  friend class ACE_Double_Linked_List_Iterator<T>;
  friend class ACE_DLList_Iterator<T>;
  friend class ACE_DLList_Reverse_Iterator<T>;

public:


  void operator= (const ACE_DLList<T> &l);
# 1053 "/usr/local/include/ace/Containers_T.h" 3
  T *insert_tail (T *new_item);






  T *insert_head (T *new_item);







  T *delete_head (void);







  T *delete_tail (void);
# 1089 "/usr/local/include/ace/Containers_T.h" 3
  int get (T *&item, size_t slot = 0);


  void dump (void) const;


  int remove (ACE_DLList_Node *n);
# 1104 "/usr/local/include/ace/Containers_T.h" 3
  ACE_DLList (ACE_Allocator *the_allocator = 0);


  ACE_DLList (const ACE_DLList<T> &l);
# 1123 "/usr/local/include/ace/Containers_T.h" 3
  ~ACE_DLList (void);
};
# 1135 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_DLList_Iterator : public ACE_Double_Linked_List_Iterator <ACE_DLList_Node>
{

  friend class ACE_DLList<T>;
  friend class ACE_DLList_Node;

public:


  ACE_DLList_Iterator (ACE_DLList<T> &l);
# 1156 "/usr/local/include/ace/Containers_T.h" 3
  void reset (ACE_DLList<T> &l);




  int advance (void);



  int next (T *&);






  T *next (void) const;







  int remove (void);


  void dump (void) const;

private:
  ACE_DLList<T> *list_;
};
# 1198 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_DLList_Reverse_Iterator : public ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node>
{

  friend class ACE_DLList<T>;
  friend class ACE_DLList_Node;

public:


  ACE_DLList_Reverse_Iterator (ACE_DLList<T> &l);
# 1219 "/usr/local/include/ace/Containers_T.h" 3
  void reset (ACE_DLList<T> &l);




  int advance (void);



  int next (T *&);


  T *next (void) const;





  int remove (void);


  void dump (void) const;

private:
  ACE_DLList<T> *list_;
};


template <class T, size_t ACE_SIZE>
class ACE_Fixed_Set;






template <class T, size_t ACE_SIZE>
class ACE_Fixed_Set_Iterator_Base
{
public:




  int next (T *&next_item);



  int advance (void);



  int first (void);


  int done (void) const;


  struct __Ace {};

protected:

  ACE_Fixed_Set_Iterator_Base (ACE_Fixed_Set<T, ACE_SIZE> &s);


  ACE_Fixed_Set<T, ACE_SIZE> &s_;


  ssize_t next_;


  size_t iterated_items_;


  void dump_i (void) const;



  int next_i (T *&next_item);
};
# 1308 "/usr/local/include/ace/Containers_T.h" 3
template <class T, size_t ACE_SIZE>
class ACE_Fixed_Set_Iterator : public ACE_Fixed_Set_Iterator_Base <T, ACE_SIZE>
{
public:

  ACE_Fixed_Set_Iterator (ACE_Fixed_Set<T, ACE_SIZE> &s);





  int next (T *&next_item);


  void dump (void) const;




  int remove (T *&item);



  T & operator* (void);


  struct __Ace {};
};
# 1344 "/usr/local/include/ace/Containers_T.h" 3
template <class T, size_t ACE_SIZE>
class ACE_Fixed_Set_Const_Iterator : public ACE_Fixed_Set_Iterator_Base <T, ACE_SIZE>
{
public:

  ACE_Fixed_Set_Const_Iterator (const ACE_Fixed_Set<T, ACE_SIZE> &s);





  int next (const T *&next_item);


  void dump (void) const;



  const T & operator* (void) const ;


  struct __Ace {};
};
# 1401 "/usr/local/include/ace/Containers_T.h" 3
template <class T, size_t ACE_SIZE>
class ACE_Fixed_Set
{
public:
  friend class ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE>;
  friend class ACE_Fixed_Set_Iterator<T, ACE_SIZE>;
  friend class ACE_Fixed_Set_Const_Iterator<T, ACE_SIZE>;


  typedef ACE_Fixed_Set_Iterator<T, ACE_SIZE> ITERATOR;
  typedef ACE_Fixed_Set_Const_Iterator<T, ACE_SIZE> CONST_ITERATOR;






  ACE_Fixed_Set (void);





  ACE_Fixed_Set (const ACE_Fixed_Set<T, ACE_SIZE> &);





  void operator= (const ACE_Fixed_Set<T, ACE_SIZE> &);





  ~ACE_Fixed_Set (void);







  int is_empty (void) const;





  int is_full (void) const;
# 1460 "/usr/local/include/ace/Containers_T.h" 3
  int insert (const T &new_item);







  int remove (const T &item);





  int find (const T &item) const;





  size_t size (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  struct
  {

    T item_;


    int is_free_;
  } search_structure_[ACE_SIZE];


  size_t cur_size_;


  size_t max_size_;
};


template <class T>
class ACE_Bounded_Set;
# 1518 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Bounded_Set_Iterator
{
public:

  ACE_Bounded_Set_Iterator (ACE_Bounded_Set<T> &s);





  int next (T *&next_item);



  int advance (void);



  int first (void);


  int done (void) const;


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Bounded_Set<T> &s_;


  ssize_t next_;
};
# 1594 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Bounded_Set
{
public:
  friend class ACE_Bounded_Set_Iterator<T>;


  typedef ACE_Bounded_Set_Iterator<T> ITERATOR;

  enum
  {
    DEFAULT_SIZE = 10
  };







  ACE_Bounded_Set (void);






  ACE_Bounded_Set (size_t size);





  ACE_Bounded_Set (const ACE_Bounded_Set<T> &);







  void operator= (const ACE_Bounded_Set<T> &);






  ~ACE_Bounded_Set (void);
# 1651 "/usr/local/include/ace/Containers_T.h" 3
  int is_empty (void) const;






  int is_full (void) const;
# 1669 "/usr/local/include/ace/Containers_T.h" 3
  int insert (const T &new_item);
# 1678 "/usr/local/include/ace/Containers_T.h" 3
  int remove (const T &item);






  int find (const T &item) const;





  size_t size (void) const;


  void dump (void) const;


  struct __Ace {};

private:
  struct Search_Structure
  {

    T item_;


    int is_free_;
  };


  Search_Structure *search_structure_;


  size_t cur_size_;


  size_t max_size_;
};
# 1727 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Ordered_MultiSet_Iterator
{
public:
  friend class ACE_Ordered_MultiSet<T>;


  ACE_Ordered_MultiSet_Iterator (ACE_Ordered_MultiSet<T> &s);





  int next (T *&next_item) const;



  int first (void);



  int last (void);



  int advance (void);



  int retreat (void);


  int done (void) const;


  void dump (void) const;


  T& operator* (void);


  struct __Ace {};

private:


  ACE_DNode<T> *current_;


  ACE_Ordered_MultiSet<T> &set_;
};
# 1816 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Ordered_MultiSet
{
public:
  friend class ACE_Ordered_MultiSet_Iterator<T>;


  typedef ACE_Ordered_MultiSet_Iterator<T> ITERATOR;
# 1832 "/usr/local/include/ace/Containers_T.h" 3
  ACE_Ordered_MultiSet (ACE_Allocator *the_allocator = 0);





  ACE_Ordered_MultiSet (const ACE_Ordered_MultiSet<T> &);





  ~ACE_Ordered_MultiSet (void);





  void operator= (const ACE_Ordered_MultiSet<T> &);







  int is_empty (void) const;





  size_t size (void) const;
# 1873 "/usr/local/include/ace/Containers_T.h" 3
  int insert (const T &new_item);
# 1882 "/usr/local/include/ace/Containers_T.h" 3
  int insert (const T &new_item, ITERATOR &iter);






  int remove (const T &item);
# 1898 "/usr/local/include/ace/Containers_T.h" 3
  int find (const T &item, ITERATOR &iter) const;





  void reset (void);


  void dump (void) const;


  struct __Ace {};

private:






  int insert_from (const T &item, ACE_DNode<T> *start_position,
                   ACE_DNode<T> **new_position);
# 1933 "/usr/local/include/ace/Containers_T.h" 3
  int locate (const T &item, ACE_DNode<T> *start_position,
              ACE_DNode<T> *&new_position) const;


  void delete_nodes (void);


  void copy_nodes (const ACE_Ordered_MultiSet<T> &);


  ACE_DNode<T> *head_;


  ACE_DNode<T> *tail_;


  size_t cur_size_;


  ACE_Allocator *allocator_;
};
# 1990 "/usr/local/include/ace/Containers_T.h" 3
template <class T>
class ACE_Array : public ACE_Array_Base<T>
{
public:

  typedef T TYPE;
  typedef ACE_Array_Iterator<T> ITERATOR;






  ACE_Array (size_t size = 0,
             ACE_Allocator* alloc = 0);





  ACE_Array (size_t size,
             const T &default_value,
             ACE_Allocator* alloc = 0);







  ACE_Array (const ACE_Array<T> &s);
# 2031 "/usr/local/include/ace/Containers_T.h" 3
  void operator= (const ACE_Array<T> &s);
# 2041 "/usr/local/include/ace/Containers_T.h" 3
  bool operator== (const ACE_Array<T> &s) const;







  bool operator!= (const ACE_Array<T> &s) const;
};




# 1 "/usr/local/include/ace/Containers_T.inl" 1 3






template <class T> inline int
ACE_Bounded_Stack<T>::is_empty (void) const
{
  ;
  return this->top_ == 0;
}

template <class T> inline int
ACE_Bounded_Stack<T>::is_full (void) const
{
  ;
  return this->top_ >= this->size_;
}

template <class T> inline int
ACE_Bounded_Stack<T>::push (const T &new_item)
{
  ;
  if (this->is_full () == 0)
    {
      this->stack_[this->top_++] = new_item;
      return 0;
    }
  else
    return -1;
}

template <class T> inline int
ACE_Bounded_Stack<T>::pop (T &item)
{
  ;
  if (this->is_empty () == 0)
    {
      item = this->stack_[--this->top_];
      return 0;
    }
  else
    return -1;
}

template <class T> inline int
ACE_Bounded_Stack<T>::top (T &item) const
{
  ;
  if (this->is_empty () == 0)
    {
      item = this->stack_[this->top_ - 1];
      return 0;
    }
  else
    return -1;
}

template <class T> inline size_t
ACE_Bounded_Stack<T>::size (void) const
{
  return this->size_;
}



template <class T, size_t ACE_SIZE> inline int
ACE_Fixed_Stack<T, ACE_SIZE>::is_empty (void) const
{
  ;
  return this->top_ == 0;
}

template <class T, size_t ACE_SIZE> inline int
ACE_Fixed_Stack<T, ACE_SIZE>::is_full (void) const
{
  ;
  return this->top_ >= this->size_;
}

template <class T, size_t ACE_SIZE> inline int
ACE_Fixed_Stack<T, ACE_SIZE>::push (const T &new_item)
{
  ;
  if (this->is_full () == 0)
    {
      this->stack_[this->top_++] = new_item;
      return 0;
    }
  else
    return -1;
}

template <class T, size_t ACE_SIZE> inline int
ACE_Fixed_Stack<T, ACE_SIZE>::pop (T &item)
{
  ;
  if (this->is_empty () == 0)
    {
      item = this->stack_[--this->top_];
      return 0;
    }
  else
    return -1;
}

template <class T, size_t ACE_SIZE> inline int
ACE_Fixed_Stack<T, ACE_SIZE>::top (T &item) const
{
  ;
  if (this->is_empty () == 0)
    {
      item = this->stack_[this->top_ - 1];
      return 0;
    }
  else
    return -1;
}

template <class T, size_t ACE_SIZE> inline size_t
ACE_Fixed_Stack<T, ACE_SIZE>::size (void) const
{
  return this->size_;
}

template <class T> inline int
ACE_Unbounded_Stack<T>::is_empty (void) const
{

  return this->head_ == this->head_->next_;
}

template <class T> inline int
ACE_Unbounded_Stack<T>::top (T &item) const
{
  ;
  if (this->is_empty () == 0)
    {
      item = this->head_->next_->item_;
      return 0;
    }
  else
    return -1;
}

template <class T> inline int
ACE_Unbounded_Stack<T>::is_full (void) const
{
  ;
  return 0;
}

template <class T> inline size_t
ACE_Unbounded_Stack<T>::size (void) const
{
  return this->cur_size_;
}






template <class T, size_t ACE_SIZE> inline int
ACE_Fixed_Set<T, ACE_SIZE>::is_empty (void) const
{
  ;
  return this->cur_size_ == 0;
}

template <class T, size_t ACE_SIZE> inline int
ACE_Fixed_Set<T, ACE_SIZE>::is_full (void) const
{
  ;
  return this->cur_size_ == this->max_size_;
}



template <class T> inline int
ACE_Bounded_Set<T>::is_empty (void) const
{
  ;
  return this->cur_size_ == 0;
}

template <class T> inline int
ACE_Bounded_Set<T>::is_full (void) const
{
  ;
  return this->cur_size_ == this->max_size_;
}



template <class T> inline int
ACE_Ordered_MultiSet_Iterator<T>::first (void)
{
  ;
  current_ = set_.head_;

  return (current_ ? 1 : 0);
}

template <class T> inline int
ACE_Ordered_MultiSet_Iterator<T>::last (void)
{
  ;
  current_ = set_.tail_;

  return (current_ ? 1 : 0);
}

template <class T> inline int
ACE_Ordered_MultiSet_Iterator<T>::advance (void)
{
  ;

  current_ = current_ ? current_->next_ : 0;

  return (current_ ? 1 : 0);
}

template <class T> inline int
ACE_Ordered_MultiSet_Iterator<T>::retreat (void)
{
  ;

  current_ = current_ ? current_->prev_ : 0;

  return (current_ ? 1 : 0);
}

template <class T> inline int
ACE_Ordered_MultiSet_Iterator<T>::done (void) const
{
  ;

  return (current_ ? 0 : 1);
}

template <class T> inline void
ACE_Ordered_MultiSet_Iterator<T>::dump (void) const
{



}





template <class T> inline int
ACE_Ordered_MultiSet<T>::is_empty (void) const
{
  ;
  return this->cur_size_ > 0 ? 0 : 1;
}

template <class T> inline size_t
ACE_Ordered_MultiSet<T>::size (void) const
{

  return this->cur_size_;
}



template <class T> inline
ACE_Array<T>::ACE_Array (size_t size,
                         ACE_Allocator *alloc)
  : ACE_Array_Base<T> (size, alloc)
{
}

template <class T> inline
ACE_Array<T>::ACE_Array (size_t size,
                         const T &default_value,
                         ACE_Allocator *alloc)
  : ACE_Array_Base<T> (size, default_value, alloc)
{
}



template <class T> inline
ACE_Array<T>::ACE_Array (const ACE_Array<T> &s)
   : ACE_Array_Base<T> (s)
{
}



template <class T> inline void
ACE_Array<T>::operator= (const ACE_Array<T> &s)
{


  if (this != &s)
    this->ACE_Array_Base<T>::operator= (s);
}



template <class T> inline bool
ACE_Array<T>::operator!= (const ACE_Array<T> &s) const
{
  return !(*this == s);
}






template <class T> inline void
ACE_DLList<T>::operator= (const ACE_DLList<T> &l)
{
  *(ACE_DLList_Base *) this = l;
}

template <class T> inline int
ACE_DLList<T>::get (T *&item, size_t index)
{
  ACE_DLList_Node *node;
  int result = ACE_DLList_Base::get (node, index);
  if (result != -1)
    item = (T *) node->item_;
  return result;
}

template <class T> inline void
ACE_DLList<T>::dump (void) const
{



}

template <class T> inline int
ACE_DLList<T>::remove (ACE_DLList_Node *n)
{
  int result = ACE_DLList_Base::remove (n);
  do { if (n) { (n)->~ACE_DLList_Node (); this->allocator_->free (n); } } while (0);


  return result;
}

template <class T> inline
ACE_DLList<T>::ACE_DLList (ACE_Allocator *alloc)
  : ACE_DLList_Base (alloc)
{
}

template <class T> inline
ACE_DLList<T>::ACE_DLList (const ACE_DLList<T> &l)
  : ACE_DLList_Base ((ACE_DLList<T> &) l)
{
}

template <class T> inline
ACE_DLList<T>::~ACE_DLList (void)
{
  while (this->delete_head ()) ;
}

template <class T> inline int
ACE_DLList_Iterator<T>::remove (void)
{
  ACE_DLList_Node *temp = this->ACE_Double_Linked_List_Iterator <ACE_DLList_Node>::next ();
  this->ACE_Double_Linked_List_Iterator <ACE_DLList_Node>::advance ();
  return list_->remove (temp);
}

template <class T> inline
ACE_DLList_Iterator<T>::ACE_DLList_Iterator (ACE_DLList<T> &l)
  : ACE_Double_Linked_List_Iterator <ACE_DLList_Node> ((ACE_DLList_Base &)l),
    list_ (&l)
{
}

template <class T> inline void
ACE_DLList_Iterator<T>::reset (ACE_DLList<T> &l)
{
  list_ = &l;
  this->ACE_Double_Linked_List_Iterator <ACE_DLList_Node>::reset ((ACE_DLList_Base &)l);
}

template <class T> inline int
ACE_DLList_Iterator<T>::next (T *&ptr)
{
  ACE_DLList_Node *temp =
    ACE_Double_Linked_List_Iterator <ACE_DLList_Node>::next ();
  if (temp)
    ptr = (T *) temp->item_;
  return temp ? 1 : 0;
}

template <class T> inline T *
ACE_DLList_Iterator<T>::next (void) const
{
  ACE_DLList_Node *temp = ACE_Double_Linked_List_Iterator <ACE_DLList_Node>::next ();
  return (T *) (temp ? temp->item_ : 0);
}

template <class T> inline int
ACE_DLList_Iterator<T>::advance (void)
{
  return this->ACE_Double_Linked_List_Iterator <ACE_DLList_Node>::advance ();
}

template <class T> inline void
ACE_DLList_Iterator<T>::dump (void) const
{



}


template <class T> inline int
ACE_DLList_Reverse_Iterator<T>::remove (void)
{
  ACE_DLList_Node *temp = ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node>::next ();
  this->ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node>::advance ();
  return list_->remove (temp);
}

template <class T> inline
ACE_DLList_Reverse_Iterator<T>::ACE_DLList_Reverse_Iterator (ACE_DLList<T> &l)
  : ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node> ((ACE_DLList_Base &)l),
    list_ (&l)
{
}

template <class T> inline void
ACE_DLList_Reverse_Iterator<T>::reset (ACE_DLList<T> &l)
{
  list_ = &l;
  this->ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node>::reset ((ACE_DLList_Base &)l);
}

template <class T> inline int
ACE_DLList_Reverse_Iterator<T>::advance (void)
{
  return ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node>::advance ();
}

template <class T> inline int
ACE_DLList_Reverse_Iterator<T>::next (T *&ptr)
{
  ACE_DLList_Node *temp =
    ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node>::next ();
  if (temp == 0)
    return 0;
  ptr = (T *) temp->item_;
  return 1;
}

template <class T> inline T *
ACE_DLList_Reverse_Iterator<T>::next (void) const
{
  ACE_DLList_Node *temp = ACE_Double_Linked_List_Reverse_Iterator <ACE_DLList_Node>::next ();
  return (T *) (temp ? temp->item_ : 0);
}


template <class T> inline void
ACE_DLList_Reverse_Iterator<T>::dump (void) const
{



}


# 2056 "/usr/local/include/ace/Containers_T.h" 2 3



# 1 "/usr/local/include/ace/Containers_T.cpp" 1 3
# 20 "/usr/local/include/ace/Containers_T.cpp" 3




template <class T> void
ACE_Bounded_Stack<T>::dump (void) const
{



}

template<class T>
ACE_Bounded_Stack<T>::ACE_Bounded_Stack (size_t size)
  : size_ (size),
    top_ (0)
{
  do { this->stack_ = new(::std::nothrow) T[size]; if (this->stack_ == 0) { (*__errno_location ()) = 12; return; } } while (0);

  ;
}

template<class T>
ACE_Bounded_Stack<T>::ACE_Bounded_Stack (const ACE_Bounded_Stack<T> &s)
  : size_ (s.size_),
    top_ (s.top_)
{
  do { this->stack_ = new(::std::nothrow) T[s.size_]; if (this->stack_ == 0) { (*__errno_location ()) = 12; return; } } while (0);


  ;

  for (size_t i = 0; i < this->top_; i++)
    this->stack_[i] = s.stack_[i];
}

template<class T> void
ACE_Bounded_Stack<T>::operator= (const ACE_Bounded_Stack<T> &s)
{
  ;

  if (&s != this)
    {
      if (this->size_ < s.size_)
        {
          delete [] this->stack_;
          do { this->stack_ = new(::std::nothrow) T[s.size_]; if (this->stack_ == 0) { (*__errno_location ()) = 12; return; } } while (0);

          this->size_ = s.size_;
        }
      this->top_ = s.top_;

      for (size_t i = 0; i < this->top_; i++)
        this->stack_[i] = s.stack_[i];
    }
}

template<class T>
ACE_Bounded_Stack<T>::~ACE_Bounded_Stack (void)
{
  ;
  delete [] this->stack_;
}





template <class T, size_t ACE_SIZE> void
ACE_Fixed_Stack<T, ACE_SIZE>::dump (void) const
{



}

template<class T, size_t ACE_SIZE>
ACE_Fixed_Stack<T, ACE_SIZE>::ACE_Fixed_Stack (void)
  : size_ (ACE_SIZE),
    top_ (0)
{
  ;
}

template<class T, size_t ACE_SIZE>
ACE_Fixed_Stack<T, ACE_SIZE>::ACE_Fixed_Stack (const ACE_Fixed_Stack<T, ACE_SIZE> &s)
  : size_ (s.size_),
    top_ (s.top_)
{
  ;
  for (size_t i = 0; i < this->top_; i++)
    this->stack_[i] = s.stack_[i];
}

template<class T, size_t ACE_SIZE> void
ACE_Fixed_Stack<T, ACE_SIZE>::operator= (const ACE_Fixed_Stack<T, ACE_SIZE> &s)
{
  ;

  if (&s != this)
    {
      this->top_ = s.top_;

      for (size_t i = 0; i < this->top_; i++)
        this->stack_[i] = s.stack_[i];
    }
}

template<class T, size_t ACE_SIZE>
ACE_Fixed_Stack<T, ACE_SIZE>::~ACE_Fixed_Stack (void)
{
  ;
}





template <class T> void
ACE_Unbounded_Stack<T>::dump (void) const
{



}

template<class T>
ACE_Unbounded_Stack<T>::ACE_Unbounded_Stack (ACE_Allocator *alloc)
  : head_ (0),
    cur_size_ (0),
    allocator_ (alloc)
{

  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (ACE_Node<T> *) this->allocator_->malloc (sizeof (ACE_Node<T>)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) ACE_Node<T>; } } while (0);


  this->head_->next_ = this->head_;
}

template<class T> void
ACE_Unbounded_Stack<T>::delete_all_nodes (void)
{


  while (this->is_empty () == 0)
    {
      ACE_Node<T> *temp = this->head_->next_;
      this->head_->next_ = temp->next_;
      do { if (temp) { (temp)->~ACE_Node <T> (); this->allocator_->free (temp); } } while (0);

    }

  this->cur_size_ = 0;

  ((this->head_ == this->head_->next_ && this->is_empty ()) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Containers_T.cpp", 178, "this->head_ == this->head_->next_ && this->is_empty ()"));

}

template<class T> void
ACE_Unbounded_Stack<T>::copy_all_nodes (const ACE_Unbounded_Stack<T> &s)
{


  ((this->head_ == this->head_->next_) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Containers_T.cpp", 186, "this->head_ == this->head_->next_"));

  ACE_Node<T> *temp = this->head_;

  for (ACE_Node<T> *s_temp = s.head_->next_;
       s_temp != s.head_;
       s_temp = s_temp->next_)
    {
      ACE_Node<T> *nptr = temp->next_;
      do { temp->next_ = (ACE_Node<T> *) this->allocator_->malloc (sizeof (ACE_Node<T>)); if (temp->next_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (temp->next_) ACE_Node<T> (s_temp->item_, nptr); } } while (0);


      temp = temp->next_;
    }
  this->cur_size_ = s.cur_size_;
}

template<class T>
ACE_Unbounded_Stack<T>::ACE_Unbounded_Stack (const ACE_Unbounded_Stack<T> &s)
  : head_ (0),
    cur_size_ (0),
    allocator_ (s.allocator_)
{
  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (ACE_Node<T> *) this->allocator_->malloc (sizeof (ACE_Node<T>)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) ACE_Node<T>; } } while (0);


  this->head_->next_ = this->head_;


  this->copy_all_nodes (s);
}

template<class T> void
ACE_Unbounded_Stack<T>::operator= (const ACE_Unbounded_Stack<T> &s)
{


  if (this != &s)
    {
      this->delete_all_nodes ();
      this->copy_all_nodes (s);
    }
}

template<class T>
ACE_Unbounded_Stack<T>::~ACE_Unbounded_Stack (void)
{


  this->delete_all_nodes ();
  do { if (head_) { (head_)->~ACE_Node <T> (); this->allocator_->free (head_); } } while (0);



}

template<class T> int
ACE_Unbounded_Stack<T>::push (const T &new_item)
{


  ACE_Node<T> *temp = 0;

  do { temp = static_cast<ACE_Node<T> *> (this->allocator_->malloc (sizeof (ACE_Node<T>))); if (temp == 0) { (*__errno_location ()) = 12; return -1;} else { (void) new (temp) ACE_Node<T> (new_item, this->head_->next_); } } while (0);



  this->head_->next_ = temp;
  ++this->cur_size_;
  return 0;
}

template<class T> int
ACE_Unbounded_Stack<T>::pop (T &item)
{


  if (this->is_empty ())
    return -1;
  else
    {
      ACE_Node<T> *temp = this->head_->next_;
      item = temp->item_;
      this->head_->next_ = temp->next_;

      do { if (temp) { (temp)->~ACE_Node <T> (); this->allocator_->free (temp); } } while (0);



      --this->cur_size_;
      return 0;
    }
}

template <class T> int
ACE_Unbounded_Stack<T>::find (const T &item) const
{


  this->head_->item_ = item;

  ACE_Node<T> *temp = this->head_->next_;


  while (!(temp->item_ == item))
    temp = temp->next_;



  return temp == this->head_ ? -1 : 0;
}

template <class T> int
ACE_Unbounded_Stack<T>::insert (const T &item)
{


  if (this->find (item) == 0)
    return 1;
  else
    return this->push (item);
}

template <class T> int
ACE_Unbounded_Stack<T>::remove (const T &item)
{



  this->head_->item_ = item;

  ACE_Node<T> *curr = this->head_;

  while (!(curr->next_->item_ == item))
    curr = curr->next_;

  if (curr->next_ == this->head_)
    return -1;
  else
    {
      ACE_Node<T> *temp = curr->next_;

      curr->next_ = temp->next_;
      --this->cur_size_;
      do { if (temp) { (temp)->~ACE_Node <T> (); this->allocator_->free (temp); } } while (0);



      return 0;
    }
}




template <class T>
ACE_Double_Linked_List_Iterator_Base<T>::ACE_Double_Linked_List_Iterator_Base (const ACE_Double_Linked_List<T> &dll)
  : current_ (0), dllist_ (&dll)
{

}

template <class T>
ACE_Double_Linked_List_Iterator_Base<T>::ACE_Double_Linked_List_Iterator_Base (const ACE_Double_Linked_List_Iterator_Base<T> &iter)
  : current_ (iter.current_),
    dllist_ (iter.dllist_)
{

}


template <class T> T *
ACE_Double_Linked_List_Iterator_Base<T>::next (void) const
{
  return this->not_done ();
}

template <class T> int
ACE_Double_Linked_List_Iterator_Base<T>::next (T *&ptr) const
{
  ptr = this->not_done ();
  return ptr ? 1 : 0;
}


template <class T> int
ACE_Double_Linked_List_Iterator_Base<T>::done (void) const
{
  return this->not_done () ? 0 : 1;
}

template <class T> T &
ACE_Double_Linked_List_Iterator_Base<T>::operator* (void) const
{
  return *(this->not_done ());
}



template <class T> void
ACE_Double_Linked_List_Iterator_Base<T>::reset (ACE_Double_Linked_List<T> &dll)
{
  current_ = 0;
  dllist_ = &dll;
}

 template <class T> int
ACE_Double_Linked_List_Iterator_Base<T>::go_head (void)
{
  this->current_ = static_cast<T*> (dllist_->head_->next_);
  return this->current_ ? 1 : 0;
}

template <class T> int
ACE_Double_Linked_List_Iterator_Base<T>::go_tail (void)
{
  this->current_ = static_cast<T*> (dllist_->head_->prev_);
  return this->current_ ? 1 : 0;
}

template <class T> T *
ACE_Double_Linked_List_Iterator_Base<T>::not_done (void) const
{
  if (this->current_ != this->dllist_->head_)
    return this->current_;
  else
    return 0;
}

template <class T> T *
ACE_Double_Linked_List_Iterator_Base<T>::do_advance (void)
{
  if (this->not_done ())
    {
      this->current_ = static_cast<T*> (this->current_->next_);
      return this->not_done ();
    }
  else
    return 0;
}

template <class T> T *
ACE_Double_Linked_List_Iterator_Base<T>::do_retreat (void)
{
  if (this->not_done ())
    {
      this->current_ = static_cast<T*> (this->current_->prev_);
      return this->not_done ();
    }
  else
    return 0;
}

template <class T> void
ACE_Double_Linked_List_Iterator_Base<T>::dump_i (void) const
{
  do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Containers_T.cpp", 445, 0, __ace_error); ace___->log (LM_DEBUG, "\n====\n(%P|%t|%x)\n", this); } while (0);
  do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Containers_T.cpp", 446, 0, __ace_error); ace___->log (LM_DEBUG, "current_ = %x", this->current_); } while (0);
  do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Containers_T.cpp", 447, 0, __ace_error); ace___->log (LM_DEBUG, "====\n"); } while (0);
}




template <class T>
ACE_Double_Linked_List_Iterator<T>::ACE_Double_Linked_List_Iterator (const ACE_Double_Linked_List<T> &dll)
  : ACE_Double_Linked_List_Iterator_Base <T> (dll)
{
  this->current_ = static_cast<T*> (dll.head_->next_);


}

template <class T> void
ACE_Double_Linked_List_Iterator<T>::reset (ACE_Double_Linked_List<T> &dll)
{
  this->ACE_Double_Linked_List_Iterator_Base <T>::reset (dll);
  this->current_ = static_cast<T*> (dll.head_->next_);


}

template <class T> int
ACE_Double_Linked_List_Iterator<T>::first (void)
{
  return this->go_head ();
}

template <class T> int
ACE_Double_Linked_List_Iterator<T>::advance (void)
{
  return this->do_advance () ? 1 : 0;
}

template <class T> T*
ACE_Double_Linked_List_Iterator<T>::advance_and_remove (bool dont_remove)
{
  T* item = 0;
  if (dont_remove)
    this->do_advance ();
  else
    {
      item = this->next ();
      this->do_advance ();

      ACE_Double_Linked_List<T> *dllist =
        const_cast<ACE_Double_Linked_List<T> *> (this->dllist_);
      dllist->remove (item);
    }
  return item;
}

template <class T> void
ACE_Double_Linked_List_Iterator<T>::dump (void) const
{



}



template <class T>
ACE_Double_Linked_List_Iterator<T> &
ACE_Double_Linked_List_Iterator<T>::operator++ (void)
{
  this->do_advance ();
  return *this;
}




template <class T>
ACE_Double_Linked_List_Iterator<T>
ACE_Double_Linked_List_Iterator<T>::operator++ (int)
{
  ACE_Double_Linked_List_Iterator<T> retv (*this);
  this->do_advance ();
  return retv;
}




template <class T>
ACE_Double_Linked_List_Iterator<T> &
ACE_Double_Linked_List_Iterator<T>::operator-- (void)
{
  this->do_retreat ();
  return *this;
}




template <class T>
ACE_Double_Linked_List_Iterator<T>
ACE_Double_Linked_List_Iterator<T>::operator-- (int)
{
  ACE_Double_Linked_List_Iterator<T> retv (*this);
  this->do_retreat ();
  return retv;
}





  template <class T>
ACE_Double_Linked_List_Reverse_Iterator<T>::ACE_Double_Linked_List_Reverse_Iterator (ACE_Double_Linked_List<T> &dll)
  : ACE_Double_Linked_List_Iterator_Base <T> (dll)
{
  this->current_ = static_cast<T*> (dll.head_->prev_);


}

template <class T> void
ACE_Double_Linked_List_Reverse_Iterator<T>::reset (ACE_Double_Linked_List<T> &dll)
{
  this->ACE_Double_Linked_List_Iterator_Base <T>::reset (dll);
  this->current_ = static_cast<T*> (dll.head_->prev_);


}

template <class T> int
ACE_Double_Linked_List_Reverse_Iterator<T>::first (void)
{
  return this->go_tail ();
}

template <class T> int
ACE_Double_Linked_List_Reverse_Iterator<T>::advance (void)
{
  return this->do_retreat () ? 1 : 0;
}

template <class T> T*
ACE_Double_Linked_List_Reverse_Iterator<T>::advance_and_remove (bool dont_remove)
{
  T* item = 0;
  if (dont_remove)
    {
      this->do_retreat ();
    }
  else
    {
      item = this->next ();
      this->do_retreat ();

      ACE_Double_Linked_List<T> *dllist =
        const_cast<ACE_Double_Linked_List<T> *> (this->dllist_);
      dllist->remove (item);
    }
  return item;
}

template <class T> void
ACE_Double_Linked_List_Reverse_Iterator<T>::dump (void) const
{



}



template <class T>
ACE_Double_Linked_List_Reverse_Iterator<T> &
ACE_Double_Linked_List_Reverse_Iterator<T>::operator++ (void)
{
  this->do_retreat ();
  return *this;
}




template <class T>
ACE_Double_Linked_List_Reverse_Iterator<T>
ACE_Double_Linked_List_Reverse_Iterator<T>::operator++ (int)
{
  ACE_Double_Linked_List_Reverse_Iterator<T> retv (*this);
  this->do_retreat ();
  return retv;
}




template <class T>
ACE_Double_Linked_List_Reverse_Iterator<T> &
ACE_Double_Linked_List_Reverse_Iterator<T>::operator-- (void)
{
  this->do_advance ();
  return *this;
}




template <class T>
ACE_Double_Linked_List_Reverse_Iterator<T>
ACE_Double_Linked_List_Reverse_Iterator<T>::operator-- (int)
{
  ACE_Double_Linked_List_Reverse_Iterator<T> retv (*this);
  this->do_advance ();
  return retv;
}




  template <class T>
ACE_Double_Linked_List<T>:: ACE_Double_Linked_List (ACE_Allocator *alloc)
  : size_ (0), allocator_ (alloc)
{
  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (T *) this->allocator_->malloc (sizeof (T)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) T; } } while (0);


  this->init_head ();
}

template <class T>
ACE_Double_Linked_List<T>::ACE_Double_Linked_List (const ACE_Double_Linked_List<T> &cx)
  : allocator_ (cx.allocator_)
{
  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  do { this->head_ = (T *) this->allocator_->malloc (sizeof (T)); if (this->head_ == 0) { (*__errno_location ()) = 12; return;} else { (void) new (this->head_) T; } } while (0);


  this->init_head ();
  this->copy_nodes (cx);
  this->size_ = cx.size_;
}

template <class T> void
ACE_Double_Linked_List<T>::operator= (const ACE_Double_Linked_List<T> &cx)
{
  if (this != &cx)
    {
      this->delete_nodes ();
      this->copy_nodes (cx);
    }
}

template <class T>
ACE_Double_Linked_List<T>::~ACE_Double_Linked_List (void)
{
  this->delete_nodes ();

  do { if (head_) { (head_)->~T (); this->allocator_->free (head_); } } while (0);



  this->head_ = 0;
}

template <class T> int
ACE_Double_Linked_List<T>::is_empty (void) const
{
  return this->size () ? 0 : 1;
}

template <class T> int
ACE_Double_Linked_List<T>::is_full (void) const
{
  return 0;
}

template <class T> T *
ACE_Double_Linked_List<T>::insert_tail (T *new_item)
{

  this->insert_element (new_item, 1);
  return new_item;
}

template <class T> T *
ACE_Double_Linked_List<T>::insert_head (T *new_item)
{
  this->insert_element (new_item);
  return new_item;
}

template <class T> T *
ACE_Double_Linked_List<T>::delete_head (void)
{
  if (this->is_empty ())
    return 0;

  T *temp = static_cast<T *> (this->head_->next_);

  this->remove_element (temp);
  return temp;
}

template <class T> T *
ACE_Double_Linked_List<T>::delete_tail (void)
{
  if (this->is_empty ())
    return 0;

  T *temp = static_cast <T *> (this->head_->prev_);

  this->remove_element (temp);
  return temp;
}

template <class T> void
ACE_Double_Linked_List<T>::reset (void)
{
  this->delete_nodes ();
}

template <class T> int
ACE_Double_Linked_List<T>::get (T *&item, size_t slot)
{
  ACE_Double_Linked_List_Iterator<T> iter (*this);

  for (size_t i = 0;
       i < slot && !iter.done ();
       i++)
    iter.advance ();

  item = iter.next ();
  return item ? 0 : -1;
}

template <class T> size_t
ACE_Double_Linked_List<T>::size (void) const
{
  return this->size_;
}

template <class T> void
ACE_Double_Linked_List<T>::dump (void) const
{



}
# 828 "/usr/local/include/ace/Containers_T.cpp" 3
template <class T> int
ACE_Double_Linked_List<T>::remove (T *n)
{
  return this->remove_element (n);
}

template <class T> void
ACE_Double_Linked_List<T>::delete_nodes (void)
{
  while (! this->is_empty ())
    {
      T * temp = static_cast<T*> (this->head_->next_);
      this->remove_element (temp);
      do { if (temp) { (temp)->~T (); this->allocator_->free (temp); } } while (0);


    }
}

template <class T> void
ACE_Double_Linked_List<T>::copy_nodes (const ACE_Double_Linked_List<T> &c)
{
  for (ACE_Double_Linked_List_Iterator<T> iter (c);
       !iter.done ();
       iter.advance ())
    {
      T* temp = 0;
      do { temp = (T *)this->allocator_->malloc (sizeof (T)); if (temp == 0) { (*__errno_location ()) = 12; return;} else { (void) new (temp) T (*iter.next ()); } } while (0);


      this->insert_tail (temp);
    }
}

template <class T> void
ACE_Double_Linked_List<T>::init_head (void)
{
  this->head_->next_ = this->head_;
  this->head_->prev_ = this->head_;
}

template <class T> int
ACE_Double_Linked_List<T>::insert_element (T *new_item,
                                           int before,
                                           T *old_item)
{
  if (old_item == 0)
    old_item = this->head_;

  if (before)
    old_item = static_cast<T *> (old_item->prev_);

  new_item->next_ = old_item->next_;
  new_item->next_->prev_ = new_item;
  new_item->prev_ = old_item;
  old_item->next_ = new_item;
  ++this->size_;
  return 0;
}

template <class T> int
ACE_Double_Linked_List<T>::remove_element (T *item)
{



  if (item == this->head_ || item->next_ == 0
      || item->prev_ == 0 || this->size () == 0)
    return -1;

  item->prev_->next_ = item->next_;
  item->next_->prev_ = item->prev_;
  item->next_ = item->prev_ = 0;
  --this->size_;
  return 0;
}




template <class T, size_t ACE_SIZE> size_t
ACE_Fixed_Set<T, ACE_SIZE>::size (void) const
{
  ;
  return this->cur_size_;
}

template <class T, size_t ACE_SIZE> void
ACE_Fixed_Set<T, ACE_SIZE>::dump (void) const
{



}

template <class T, size_t ACE_SIZE>
ACE_Fixed_Set<T, ACE_SIZE>::~ACE_Fixed_Set (void)
{
  ;
  this->cur_size_ = 0;
}

template <class T, size_t ACE_SIZE>
ACE_Fixed_Set<T, ACE_SIZE>::ACE_Fixed_Set (const ACE_Fixed_Set<T, ACE_SIZE> &fs)
  : cur_size_ (fs.cur_size_)
{
  ;

  for (size_t i = 0, j = 0; i < fs.max_size_ && j < this->cur_size_; ++i)
    if (fs.search_structure_[i].is_free_ == 0)
      this->search_structure_[j++] = fs.search_structure_[i];
}

template <class T, size_t ACE_SIZE> void
ACE_Fixed_Set<T, ACE_SIZE>::operator= (const ACE_Fixed_Set<T, ACE_SIZE> &fs)
{
  ;

  if (this != &fs)
    {
      this->cur_size_ = fs.cur_size_;

      for (size_t i = 0, j = 0; i < fs.max_size_ && j < this->cur_size_; ++i)
        if (fs.search_structure_[i].is_free_ == 0)
          this->search_structure_[j++] = fs.search_structure_[i];
    }
}

template <class T, size_t ACE_SIZE>
ACE_Fixed_Set<T, ACE_SIZE>::ACE_Fixed_Set (void)
  : cur_size_ (0),
    max_size_ (ACE_SIZE)
{
  ;
  for (size_t i = 0; i < this->max_size_; i++)
    this->search_structure_[i].is_free_ = 1;
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set<T, ACE_SIZE>::find (const T &item) const
{
  ;

  for (size_t i = 0, j = 0; i < this->max_size_ && j < this->cur_size_; ++i)
    if (this->search_structure_[i].is_free_ == 0)
      {
        if (this->search_structure_[i].item_ == item)
          return 0;
        ++j;
      }

  return -1;
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set<T, ACE_SIZE>::insert (const T &item)
{
  ;
  ssize_t first_free = -1;
  size_t i;

  for (i = 0;
       i < this->max_size_ && first_free == -1;
       ++i)



    if (this->search_structure_[i].is_free_ == 0)
      {
        if (this->search_structure_[i].item_ == item)
          return 1;
      }
    else
      first_free = static_cast<ssize_t> (i);



  if (first_free > -1)
    {
      this->search_structure_[first_free].item_ = item;
      this->search_structure_[first_free].is_free_ = 0;
      this->cur_size_++;
      return 0;
    }
  else
    {
      (*__errno_location ()) = 12;
      return -1;
    }
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set<T, ACE_SIZE>::remove (const T &item)
{
  ;

  for (size_t i = 0, j = 0;
       i < this->max_size_ && j < this->cur_size_;
       ++i)
    if (this->search_structure_[i].is_free_ == 0)
      {
        if (this->search_structure_[i].item_ == item)
          {

            this->search_structure_[i].is_free_ = 1;

            --this->cur_size_;
            return 0;
          }
        else
          ++j;
      }

  return -1;
}




template <class T, size_t ACE_SIZE> void
ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE>::dump_i (void) const
{



}

template <class T, size_t ACE_SIZE>
ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE>::ACE_Fixed_Set_Iterator_Base (ACE_Fixed_Set<T, ACE_SIZE> &s)
  : s_ (s),
    next_ (-1),
    iterated_items_ (0)
{
  ;
  this->advance ();
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE>::advance (void)
{
  ;

  if (this->iterated_items_ < this->s_.cur_size_)
    {
      for (++this->next_;
           static_cast<size_t> (this->next_) < this->s_.max_size_;
           ++this->next_)
      if (this->s_.search_structure_[this->next_].is_free_ == 0)
        {
          ++this->iterated_items_;
          return 1;
        }
    }
  else
    ++this->next_;

  return 0;
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE>::first (void)
{
  ;

  next_ = -1;
  iterated_items_ = 0;
  return this->advance ();
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE>::done (void) const
{
  ;

  return ! (this->iterated_items_ < this->s_.cur_size_);
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE>::next_i (T *&item)
{
  ;

  if (static_cast<size_t> (this->next_) < this->s_.max_size_)
    do
      {
        if (this->s_.search_structure_[this->next_].is_free_ == 0)
          {
            item = &this->s_.search_structure_[this->next_].item_;
            this->advance ();
            return 1;
          }
      }
    while (this->advance () == 1);

  return 0;
}




template <class T, size_t ACE_SIZE> void
ACE_Fixed_Set_Iterator<T, ACE_SIZE>::dump (void) const
{



}

template <class T, size_t ACE_SIZE>
ACE_Fixed_Set_Iterator<T, ACE_SIZE>::ACE_Fixed_Set_Iterator (ACE_Fixed_Set<T, ACE_SIZE> &s)
  : ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE> (s)
{
  ;
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set_Iterator<T, ACE_SIZE>::next (T *&item)
{
  ;
  return this->next_i (item);
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set_Iterator<T, ACE_SIZE>::remove (T *&item)
{
  ;

  if (this->s_.search_structure_[this->next_].is_free_ == 0)
    {
      item = &this->s_.search_structure_[this->next_].item_;
      this->s_.remove (*item);
      --(this->iterated_items_);
      return 1;
    }

  return 0;
}

template <class T, size_t ACE_SIZE> T&
ACE_Fixed_Set_Iterator<T, ACE_SIZE>::operator* (void)
{
  T *retv = 0;

  if (this->s_.search_structure_[this->next_].is_free_ == 0)
    retv = &this->s_.search_structure_[this->next_].item_;

  ((retv != 0) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Containers_T.cpp", 1174, "retv != 0"));

  return *retv;
}




template <class T, size_t ACE_SIZE> void
ACE_Fixed_Set_Const_Iterator<T, ACE_SIZE>::dump (void) const
{



}

template <class T, size_t ACE_SIZE>
ACE_Fixed_Set_Const_Iterator<T, ACE_SIZE>::ACE_Fixed_Set_Const_Iterator (const ACE_Fixed_Set<T, ACE_SIZE> &s)
  : ACE_Fixed_Set_Iterator_Base<T, ACE_SIZE> (s)
{
  ;
}

template <class T, size_t ACE_SIZE> int
ACE_Fixed_Set_Const_Iterator<T, ACE_SIZE>::next (const T *&item)
{
  ;

  return this->next_i (item);
}

template <class T, size_t ACE_SIZE> const T&
ACE_Fixed_Set_Const_Iterator<T, ACE_SIZE>::operator* (void) const
{
  const T *retv = 0;

  if (this->s_.search_structure_[this->next_].is_free_ == 0)
    retv = &this->s_.search_structure_[this->next_].item_;

  ((retv != 0) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Containers_T.cpp", 1213, "retv != 0"));

  return *retv;
}




template <class T> void
ACE_Bounded_Set<T>::dump (void) const
{



}

template <class T>
ACE_Bounded_Set<T>::~ACE_Bounded_Set (void)
{
  ;
  delete [] this->search_structure_;
}

template <class T>
ACE_Bounded_Set<T>::ACE_Bounded_Set (void)
  : cur_size_ (0),
    max_size_ (static_cast<size_t> (ACE_Bounded_Set<T>::DEFAULT_SIZE))
{
  ;

  do { this->search_structure_ = new(::std::nothrow) typename ACE_Bounded_Set<T>::Search_Structure[this->max_size_]; if (this->search_structure_ == 0) { (*__errno_location ()) = 12; return; } } while (0);


  for (size_t i = 0; i < this->max_size_; ++i)
    this->search_structure_[i].is_free_ = 1;
}

template <class T> size_t
ACE_Bounded_Set<T>::size (void) const
{
  ;
  return this->cur_size_;
}

template <class T>
ACE_Bounded_Set<T>::ACE_Bounded_Set (const ACE_Bounded_Set<T> &bs)
  : cur_size_ (bs.cur_size_),
    max_size_ (bs.max_size_)
{
  ;

  do { this->search_structure_ = new(::std::nothrow) typename ACE_Bounded_Set<T>::Search_Structure[this->max_size_]; if (this->search_structure_ == 0) { (*__errno_location ()) = 12; return; } } while (0);


  for (size_t i = 0; i < this->cur_size_; i++)
    this->search_structure_[i] = bs.search_structure_[i];
}

template <class T> void
ACE_Bounded_Set<T>::operator= (const ACE_Bounded_Set<T> &bs)
{
  ;

  if (this != &bs)
    {
      if (this->max_size_ < bs.cur_size_)
        {
          delete [] this->search_structure_;
          do { this->search_structure_ = new(::std::nothrow) typename ACE_Bounded_Set<T>::Search_Structure[bs.cur_size_]; if (this->search_structure_ == 0) { (*__errno_location ()) = 12; return; } } while (0);

          this->max_size_ = bs.cur_size_;
        }

      this->cur_size_ = bs.cur_size_;

      for (size_t i = 0; i < this->cur_size_; i++)
        this->search_structure_[i] = bs.search_structure_[i];
    }
}

template <class T>
ACE_Bounded_Set<T>::ACE_Bounded_Set (size_t size)
  : cur_size_ (0),
    max_size_ (size)
{
  ;
  do { this->search_structure_ = new(::std::nothrow) typename ACE_Bounded_Set<T>::Search_Structure[size]; if (this->search_structure_ == 0) { (*__errno_location ()) = 12; return; } } while (0);


  for (size_t i = 0; i < this->max_size_; i++)
    this->search_structure_[i].is_free_ = 1;
}

template <class T> int
ACE_Bounded_Set<T>::find (const T &item) const
{
  ;

  for (size_t i = 0; i < this->cur_size_; i++)
    if (this->search_structure_[i].item_ == item
        && this->search_structure_[i].is_free_ == 0)
      return 0;

  return -1;
}

template <class T> int
ACE_Bounded_Set<T>::insert (const T &item)
{
  ;
  int first_free = -1;
  size_t i;

  for (i = 0; i < this->cur_size_; i++)


    if (this->search_structure_[i].item_ == item
        && this->search_structure_[i].is_free_ == 0)
      return 1;
    else if (this->search_structure_[i].is_free_ && first_free == -1)
      first_free = static_cast<int> (i);

  if (first_free > -1)
    {
      this->search_structure_[first_free].item_ = item;
      this->search_structure_[first_free].is_free_ = 0;
      return 0;
    }
  else if (i < this->max_size_)
    {
      this->search_structure_[i].item_ = item;
      this->search_structure_[i].is_free_ = 0;
      this->cur_size_++;
      return 0;
    }
  else
    {
      (*__errno_location ()) = 12;
      return -1;
    }
}

template <class T> int
ACE_Bounded_Set<T>::remove (const T &item)
{
  ;
  for (size_t i = 0; i < this->cur_size_; i++)
    if (this->search_structure_[i].item_ == item)
      {

        this->search_structure_[i].is_free_ = 1;



        if (i + 1 == this->cur_size_)
          {
            while (i > 0 && this->search_structure_[--i].is_free_)
              continue;

            if (i == 0 && this->search_structure_[i].is_free_)
              this->cur_size_ = 0;
            else
              this->cur_size_ = i + 1;
          }
        return 0;
      }

  return -1;
}



  template <class T> void
ACE_Bounded_Set_Iterator<T>::dump (void) const
{



}

template <class T>
ACE_Bounded_Set_Iterator<T>::ACE_Bounded_Set_Iterator (ACE_Bounded_Set<T> &s)
  : s_ (s),
    next_ (-1)
{
  ;
  this->advance ();
}

template <class T> int
ACE_Bounded_Set_Iterator<T>::advance (void)
{
  ;

  for (++this->next_;
       static_cast<size_t> (this->next_) < this->s_.cur_size_
         && this->s_.search_structure_[this->next_].is_free_;
       ++this->next_)
    continue;

  return static_cast<size_t> (this->next_) < this->s_.cur_size_;
}

template <class T> int
ACE_Bounded_Set_Iterator<T>::first (void)
{
  ;

  next_ = -1;
  return this->advance ();
}

template <class T> int
ACE_Bounded_Set_Iterator<T>::done (void) const
{
  ;

  return static_cast< size_t> (this->next_) >=
    this->s_.cur_size_;
}

template <class T> int
ACE_Bounded_Set_Iterator<T>::next (T *&item)
{
  ;
  if (static_cast<size_t> (this->next_) < this->s_.cur_size_)
    {
      item = &this->s_.search_structure_[this->next_].item_;
      return 1;
    }
  else
    return 0;
}



  template <class T>
ACE_DNode<T>::ACE_DNode (const T &i, ACE_DNode<T> *n, ACE_DNode<T> *p)
  : next_ (n), prev_ (p), item_ (i)
{
}

template <class T>
ACE_DNode<T>::~ACE_DNode (void)
{
}



template <class T> void
ACE_Unbounded_Stack_Iterator<T>::dump (void) const
{



}

template <class T>
ACE_Unbounded_Stack_Iterator<T>::ACE_Unbounded_Stack_Iterator (ACE_Unbounded_Stack<T> &q)
  : current_ (q.head_->next_),
    stack_ (q)
{

}

template <class T> int
ACE_Unbounded_Stack_Iterator<T>::advance (void)
{

  this->current_ = this->current_->next_;
  return this->current_ != this->stack_.head_;
}

template <class T> int
ACE_Unbounded_Stack_Iterator<T>::first (void)
{

  this->current_ = this->stack_.head_->next_;
  return this->current_ != this->stack_.head_;
}

template <class T> int
ACE_Unbounded_Stack_Iterator<T>::done (void) const
{
  ;

  return this->current_ == this->stack_.head_;
}

template <class T> int
ACE_Unbounded_Stack_Iterator<T>::next (T *&item)
{

  if (this->current_ == this->stack_.head_)
    return 0;
  else
    {
      item = &this->current_->item_;
      return 1;
    }
}





  template <class T>
ACE_Ordered_MultiSet<T>::ACE_Ordered_MultiSet (ACE_Allocator *alloc)
  : head_ (0)
  , tail_ (0)
  , cur_size_ (0)
  , allocator_ (alloc)
{


  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();
}

template <class T>
ACE_Ordered_MultiSet<T>::ACE_Ordered_MultiSet (const ACE_Ordered_MultiSet<T> &us)
  : head_ (0)
  , tail_ (0)
  , cur_size_ (0)
  , allocator_ (us.allocator_)
{
  ;

  if (this->allocator_ == 0)
    this->allocator_ = ACE_Allocator::instance ();

  this->copy_nodes (us);
}

template <class T>
ACE_Ordered_MultiSet<T>::~ACE_Ordered_MultiSet (void)
{


  this->delete_nodes ();
}


template <class T> void
ACE_Ordered_MultiSet<T>::operator= (const ACE_Ordered_MultiSet<T> &us)
{
  ;

  if (this != &us)
    {
      this->delete_nodes ();
      this->copy_nodes (us);
    }
}


template <class T> int
ACE_Ordered_MultiSet<T>::insert (const T &item)
{


  return this->insert_from (item, this->head_, 0);
}

template <class T> int
ACE_Ordered_MultiSet<T>::insert (const T &new_item,
                                 ITERATOR &iter)
{


  return this->insert_from (new_item, iter.current_, &iter.current_);
}

template <class T> int
ACE_Ordered_MultiSet<T>::remove (const T &item)
{


  ACE_DNode<T> *node = 0;

  int result = locate (item, 0, node);


  if (node && (result == 0))
    {
      if (node->prev_)
        node->prev_->next_ = node->next_;
      else
        head_ = node->next_;

      if (node->next_)
        node->next_->prev_ = node->prev_;
      else
        tail_ = node->prev_;

      --this->cur_size_;

      do { if (node) { (node)->~ACE_DNode <T> (); this->allocator_->free (node); } } while (0);



      return 0;
    }

  return -1;
}

template <class T> int
ACE_Ordered_MultiSet<T>::find (const T &item,
                               ITERATOR &iter) const
{

  ACE_DNode<T> *node = iter.current_;
  int const result = locate (item, node, node);


  if (node && (result == 0))
    {
      iter.current_ = node;
      return 0;
    }

  return -1;
}



template <class T> void
ACE_Ordered_MultiSet<T>::reset (void)
{
  ;

  this->delete_nodes ();
}

template <class T> void
ACE_Ordered_MultiSet<T>::dump (void) const
{
# 1669 "/usr/local/include/ace/Containers_T.cpp" 3
}

template <class T> int
ACE_Ordered_MultiSet<T>::insert_from (const T &item, ACE_DNode<T> *position,
                                      ACE_DNode<T> **new_position)
{



  ACE_DNode<T> *temp = 0;
  do { temp = static_cast<ACE_DNode<T>*> (this->allocator_->malloc (sizeof (ACE_DNode<T>))); if (temp == 0) { (*__errno_location ()) = 12; return -1;} else { (void) new (temp) ACE_DNode<T> (item); } } while (0);




  int result = locate (item, position, position);


  if (position)
    {
      switch (result)
        {

        case -1:


          if (position->next_)
            {

              position->next_->prev_ = temp;
              temp->next_ = position->next_;
            }
          else

            tail_ = temp;


          temp->prev_ = position;
          position->next_ = temp;

          break;


        case 0:
        case 1:


          if (position->prev_)
            {

              position->prev_->next_ = temp;
              temp->prev_ = position->prev_;
            }
          else

            head_ = temp;


          temp->next_ = position;
          position->prev_ = temp;

          break;

        default:
          return -1;
        }
    }
  else
    {

      this->head_ = temp;
      this->tail_ = temp;
    }

  ++this->cur_size_;
  if (new_position)
    *new_position = temp;

  return 0;
}

template <class T> int
ACE_Ordered_MultiSet<T>::locate (const T &item, ACE_DNode<T> *start_position,
                                 ACE_DNode<T> *&new_position) const
{
  if (! start_position)
    start_position = this->head_;



  while (start_position && start_position->item_ < item &&
         start_position->next_)
    start_position = start_position->next_;


  while (start_position && item < start_position->item_ &&
         start_position->prev_)
    start_position = start_position->prev_;


  new_position = start_position;


  if (!new_position)
    return 1;
  else if (item < new_position->item_)
    return 1;
  else if (new_position->item_ < item)
    return -1;
  else
    return 0;
}
# 1792 "/usr/local/include/ace/Containers_T.cpp" 3
template <class T> void
ACE_Ordered_MultiSet<T>::copy_nodes (const ACE_Ordered_MultiSet<T> &us)
{
  ACE_DNode<T> *insertion_point = this->head_;

  for (ACE_DNode<T> *curr = us.head_;
       curr != 0;
       curr = curr->next_)
    this->insert_from (curr->item_, insertion_point, &insertion_point);
}

template <class T> void
ACE_Ordered_MultiSet<T>::delete_nodes (void)
{

  for (ACE_DNode<T> *curr = this->head_;
       curr != 0;
       )
    {
      ACE_DNode<T> *temp = curr;
      curr = curr->next_;
      do { if (temp) { (temp)->~ACE_DNode <T> (); this->allocator_->free (temp); } } while (0);



    }

  this->head_ = 0;
  this->tail_ = 0;
  this->cur_size_ = 0;
}



template <class T>
ACE_Ordered_MultiSet_Iterator<T>::ACE_Ordered_MultiSet_Iterator (ACE_Ordered_MultiSet<T> &s)
  : current_ (s.head_),
    set_ (s)
{

}

template <class T> int
ACE_Ordered_MultiSet_Iterator<T>::next (T *&item) const
{

  if (this->current_)
    {
      item = &this->current_->item_;
      return 1;
    }

  return 0;
}

template <class T> T&
ACE_Ordered_MultiSet_Iterator<T>::operator* (void)
{

  T *retv = 0;

  int const result = this->next (retv);
  ((result != 0) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Containers_T.cpp", 1854, "result != 0"));
  (void) (result);

  return *retv;
}



template <class T> T *
ACE_DLList<T>::insert_tail (T *new_item)
{
  ACE_DLList_Node *temp1 = 0;
  do { temp1 = static_cast<ACE_DLList_Node *> (this->allocator_->malloc (sizeof (ACE_DLList_Node))); if (temp1 == 0) { (*__errno_location ()) = 12; return 0;} else { (void) new (temp1) ACE_DLList_Node (new_item); } } while (0);



  ACE_DLList_Node *temp2 = ACE_DLList_Base::insert_tail (temp1);
  return (T *) (temp2 ? temp2->item_ : 0);
}

template <class T> T *
ACE_DLList<T>::insert_head (T *new_item)
{
  ACE_DLList_Node *temp1 = 0;
  do { temp1 = (ACE_DLList_Node *) this->allocator_->malloc (sizeof (ACE_DLList_Node)); if (temp1 == 0) { (*__errno_location ()) = 12; return 0;} else { (void) new (temp1) ACE_DLList_Node (new_item); } } while (0);


  ACE_DLList_Node *temp2 = ACE_DLList_Base::insert_head (temp1);
  return (T *) (temp2 ? temp2->item_ : 0);
}

template <class T> T *
ACE_DLList<T>::delete_head (void)
{
  ACE_DLList_Node *temp1 = ACE_DLList_Base::delete_head ();
  T *temp2 = (T *) (temp1 ? temp1->item_ : 0);
  do { if (temp1) { (temp1)->~ACE_DLList_Node (); this->allocator_->free (temp1); } } while (0);



  return temp2;
}

template <class T> T *
ACE_DLList<T>::delete_tail (void)
{
  ACE_DLList_Node *temp1 = ACE_DLList_Base::delete_tail ();
  T *temp2 = (T *) (temp1 ? temp1->item_ : 0);
  do { if (temp1) { (temp1)->~ACE_DLList_Node (); this->allocator_->free (temp1); } } while (0);


  return temp2;
}





template <class T> bool
ACE_Array<T>::operator== (const ACE_Array<T> &s) const
{
  if (this == &s)
    return true;
  else if (this->size () != s.size ())
    return false;

  const size_t len = s.size ();
  for (size_t slot = 0; slot < len; ++slot)
    if ((*this)[slot] != s[slot])
      return false;

  return true;
}




# 2060 "/usr/local/include/ace/Containers_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 2067 "/usr/local/include/ace/Containers_T.h" 2 3
# 68 "/usr/local/include/ace/Containers.h" 2 3

# 1 "/usr/local/include/ace/post.h" 1 3
# 70 "/usr/local/include/ace/Containers.h" 2 3
# 28 "/usr/local/include/ace/Thread_Manager.h" 2 3
# 1 "/usr/local/include/ace/Free_List.h" 1 3
# 15 "/usr/local/include/ace/Free_List.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Free_List.h" 2 3
# 27 "/usr/local/include/ace/Free_List.h" 3

# 36 "/usr/local/include/ace/Free_List.h" 3
template <class T>
class ACE_Free_List
{
public:

  virtual ~ACE_Free_List (void);



  virtual void add (T *element) = 0;



  virtual T *remove (void) = 0;


  virtual size_t size (void) = 0;


  virtual void resize (size_t newsize) = 0;
};
# 68 "/usr/local/include/ace/Free_List.h" 3
template <class T, class ACE_LOCK>
class ACE_Locked_Free_List : public ACE_Free_List<T>
{
public:
# 81 "/usr/local/include/ace/Free_List.h" 3
  ACE_Locked_Free_List (int mode = 1,
                        size_t prealloc = 0,
                        size_t lwm = 0,
                        size_t hwm = 25000,
                        size_t inc = 100);


  virtual ~ACE_Locked_Free_List (void);



  virtual void add (T *element);



  virtual T *remove (void);


  virtual size_t size (void);


  virtual void resize (size_t newsize);

protected:

  virtual void alloc (size_t n);


  virtual void dealloc (size_t n);



  int mode_;


  T *free_list_;


  size_t lwm_;


  size_t hwm_;


  size_t inc_;


  size_t size_;


  ACE_LOCK mutex_;

private:

  ACE_Locked_Free_List (const ACE_Locked_Free_List<T, ACE_LOCK> &);
  void operator= (const ACE_Locked_Free_List<T, ACE_LOCK> &);
};




# 1 "/usr/local/include/ace/Free_List.cpp" 1 3





# 1 "/usr/local/include/ace/Free_List.h" 1 3
# 7 "/usr/local/include/ace/Free_List.cpp" 2 3








template <class T>
ACE_Free_List<T>::~ACE_Free_List (void)
{
}





template <class T, class ACE_LOCK>
ACE_Locked_Free_List<T, ACE_LOCK>::ACE_Locked_Free_List (int mode,
                                                     size_t prealloc,
                                                     size_t lwm,
                                                     size_t hwm,
                                                     size_t inc)
  : mode_ (mode),
    free_list_ (0),
    lwm_ (lwm),
    hwm_ (hwm),
    inc_ (inc),
    size_ (0)
{
  this->alloc (prealloc);
}



template <class T, class ACE_LOCK>
ACE_Locked_Free_List<T, ACE_LOCK>::~ACE_Locked_Free_List (void)
{
  if (this->mode_ != 2)
    while (this->free_list_ != 0)
      {
        T *temp = this->free_list_;
        this->free_list_ = this->free_list_->get_next ();
        delete temp;
      }
}





template <class T, class ACE_LOCK> void
ACE_Locked_Free_List<T, ACE_LOCK>::add (T *element)
{
  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return; };


  if (this->mode_ == 2
      || this->size_ < this->hwm_)
    {
      element->set_next (this->free_list_);
      this->free_list_ = element;
      this->size_++;
    }
  else
    delete element;
}





template <class T, class ACE_LOCK> T *
ACE_Locked_Free_List<T, ACE_LOCK>::remove (void)
{
  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return 0; };


  if (this->mode_ != 2 && this->size_ <= this->lwm_)
    this->alloc (this->inc_);


  T *temp = this->free_list_;

  if (temp != 0)
    {
      this->free_list_ = this->free_list_->get_next ();
      this->size_--;
    }

  return temp;
}




template <class T, class ACE_LOCK> size_t
ACE_Locked_Free_List<T, ACE_LOCK>::size (void)
{
  return this->size_;
}



template <class T, class ACE_LOCK> void
ACE_Locked_Free_List<T, ACE_LOCK>::resize (size_t newsize)
{
  ACE_Guard< ACE_LOCK > ace_mon (this->mutex_); if (ace_mon.locked () != 0) { ;; } else { return; };


  if (this->mode_ != 2)
    {

      if (newsize < this->size_)
        {
          this->dealloc (this->size_ - newsize);
        }
      else
        {
          this->alloc (newsize - this->size_);
        }
    }
}



template <class T, class ACE_LOCK> void
ACE_Locked_Free_List<T, ACE_LOCK>::alloc (size_t n)
{
  for (; n > 0; n--)
    {
      T *temp = 0;
      do { temp = new(::std::nothrow) T; if (temp == 0) { (*__errno_location ()) = 12; return; } } while (0);
      temp->set_next (this->free_list_);
      this->free_list_ = temp;
      this->size_++;
    }
}



template <class T, class ACE_LOCK> void
ACE_Locked_Free_List<T, ACE_LOCK>::dealloc (size_t n)
{
  for (; this->free_list_ != 0 && n > 0;
       n--)
    {
      T *temp = this->free_list_;
      this->free_list_ = this->free_list_->get_next ();
      delete temp;
      this->size_--;
    }
}


# 143 "/usr/local/include/ace/Free_List.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 150 "/usr/local/include/ace/Free_List.h" 2 3
# 29 "/usr/local/include/ace/Thread_Manager.h" 2 3



# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 33 "/usr/local/include/ace/Thread_Manager.h" 2 3
# 77 "/usr/local/include/ace/Thread_Manager.h" 3



class ACE_Task_Base;
class ACE_Thread_Manager;
class ACE_Thread_Descriptor;






class ACE_At_Thread_Exit
{
  friend class ACE_Thread_Descriptor;
  friend class ACE_Thread_Manager;
public:

  ACE_At_Thread_Exit (void);


  virtual ~ACE_At_Thread_Exit (void);


  bool is_owner (void) const;


  bool is_owner (bool owner);


  bool was_applied (void) const;


  bool was_applied (bool applied);

protected:

  ACE_At_Thread_Exit *next_;


  void do_apply (void);


  virtual void apply (void) = 0;


  ACE_Thread_Descriptor* td_;


  bool was_applied_;


  bool is_owner_;
};

class ACE_At_Thread_Exit_Func : public ACE_At_Thread_Exit
{
public:

   ACE_At_Thread_Exit_Func (void *object,
                            ACE_CLEANUP_FUNC func,
                            void *param = 0);

  virtual ~ACE_At_Thread_Exit_Func (void);

protected:

   void *object_;


   ACE_CLEANUP_FUNC func_;


   void *param_;


   void apply (void);
};
# 165 "/usr/local/include/ace/Thread_Manager.h" 3
class ACE_Thread_Descriptor_Base : public ACE_OS_Thread_Descriptor
{

  friend class ACE_Thread_Manager;
  friend class ACE_Double_Linked_List<ACE_Thread_Descriptor_Base>;
  friend class ACE_Double_Linked_List_Iterator_Base<ACE_Thread_Descriptor_Base>;
  friend class ACE_Double_Linked_List_Iterator<ACE_Thread_Descriptor_Base>;
  friend class ACE_Double_Linked_List<ACE_Thread_Descriptor>;
  friend class ACE_Double_Linked_List_Iterator_Base<ACE_Thread_Descriptor>;
  friend class ACE_Double_Linked_List_Iterator<ACE_Thread_Descriptor>;
public:
  ACE_Thread_Descriptor_Base (void);
  ~ACE_Thread_Descriptor_Base (void);




  bool operator== (const ACE_Thread_Descriptor_Base &rhs) const;


  bool operator!= (const ACE_Thread_Descriptor_Base &rhs) const;


  int grp_id (void) const;


  ACE_UINT32 state (void) const;



  ACE_Task_Base *task (void) const;

protected:

  void reset (void);


  ACE_thread_t thr_id_;


  ACE_hthread_t thr_handle_;


  int grp_id_;


  ACE_UINT32 thr_state_;



  ACE_Task_Base *task_;



  ACE_Thread_Descriptor_Base *next_;
  ACE_Thread_Descriptor_Base *prev_;
};







class ACE_Thread_Descriptor : public ACE_Thread_Descriptor_Base
{
  friend class ACE_At_Thread_Exit;
  friend class ACE_Thread_Manager;
  friend class ACE_Double_Linked_List<ACE_Thread_Descriptor>;
  friend class ACE_Double_Linked_List_Iterator<ACE_Thread_Descriptor>;
public:

  ACE_Thread_Descriptor (void);



  ACE_thread_t self (void) const;


  void self (ACE_hthread_t &);


  void dump (void) const;






  void log_msg_cleanup(ACE_Log_Msg* log_msg);






  int at_exit (ACE_At_Thread_Exit* cleanup);



  int at_exit (ACE_At_Thread_Exit& cleanup);
# 278 "/usr/local/include/ace/Thread_Manager.h" 3
  int at_exit (void *object,
               ACE_CLEANUP_FUNC cleanup_hook,
               void *param);


  ~ACE_Thread_Descriptor (void);
# 294 "/usr/local/include/ace/Thread_Manager.h" 3
  void acquire_release (void);
  void acquire (void);
  void release (void);





  void set_next (ACE_Thread_Descriptor *td);
  ACE_Thread_Descriptor *get_next (void) const;

private:

  void reset (ACE_Thread_Manager *tm);



  void at_pop (int apply = 1);



  void at_push (ACE_At_Thread_Exit* cleanup,
                bool is_owner = false);


  void do_at_exit (void);


  void terminate (void);



  ACE_Log_Msg *log_msg_;


  ACE_At_Thread_Exit *at_exit_list_;
# 342 "/usr/local/include/ace/Thread_Manager.h" 3
  ACE_Thread_Manager* tm_;


  ACE_MT_SYNCH::MUTEX *sync_;


  bool terminated_;
};


class ACE_Thread_Control;
# 361 "/usr/local/include/ace/Thread_Manager.h" 3
typedef int (ACE_Thread_Manager::*ACE_THR_MEMBER_FUNC)(ACE_Thread_Descriptor *, int);
# 383 "/usr/local/include/ace/Thread_Manager.h" 3
class ACE_Thread_Manager
{
public:
  friend class ACE_Thread_Control;


  friend class ACE_Thread_Exit;
  friend class ACE_Thread_Descriptor;







  enum
  {

    ACE_THR_IDLE = 0x00000000,


    ACE_THR_SPAWNED = 0x00000001,



    ACE_THR_RUNNING = 0x00000002,


    ACE_THR_SUSPENDED = 0x00000004,



    ACE_THR_CANCELLED = 0x00000008,



    ACE_THR_TERMINATED = 0x00000010,


    ACE_THR_JOINING = 0x10000000
  };
# 436 "/usr/local/include/ace/Thread_Manager.h" 3
  ACE_Thread_Manager (size_t preaolloc = 0,
                      size_t lwm = 1,
                      size_t inc = 1,
                      size_t hwm = 25000);
  ~ACE_Thread_Manager (void);



  static ACE_Thread_Manager *instance (void);



  static ACE_Thread_Manager *instance (ACE_Thread_Manager *);


  static void close_singleton (void);



  int open (size_t size = 0);
# 464 "/usr/local/include/ace/Thread_Manager.h" 3
  int close (void);
# 517 "/usr/local/include/ace/Thread_Manager.h" 3
  int spawn (ACE_THR_FUNC func,
             void *arg = 0,
             long flags = 0x00000002 | 0x00010000 | 0x00400000,
             ACE_thread_t *t_id = 0,
             ACE_hthread_t *t_handle = 0,
             long priority = (-0x7fffffffL - 1L),
             int grp_id = -1,
             void *stack = 0,
             size_t stack_size = 0,
             const char** thr_name = 0);
# 593 "/usr/local/include/ace/Thread_Manager.h" 3
  int spawn_n (size_t n,
               ACE_THR_FUNC func,
               void *arg = 0,
               long flags = 0x00000002 | 0x00010000 | 0x00400000,
               long priority = (-0x7fffffffL - 1L),
               int grp_id = -1,
               ACE_Task_Base *task = 0,
               ACE_hthread_t thread_handles[] = 0,
               void *stack[] = 0,
               size_t stack_size[] = 0,
               const char* thr_name[] = 0);
# 675 "/usr/local/include/ace/Thread_Manager.h" 3
  int spawn_n (ACE_thread_t thread_ids[],
               size_t n,
               ACE_THR_FUNC func,
               void *arg,
               long flags,
               long priority = (-0x7fffffffL - 1L),
               int grp_id = -1,
               void *stack[] = 0,
               size_t stack_size[] = 0,
               ACE_hthread_t thread_handles[] = 0,
               ACE_Task_Base *task = 0,
               const char* thr_name[] = 0);
# 697 "/usr/local/include/ace/Thread_Manager.h" 3
  ACE_THR_FUNC_RETURN exit (ACE_THR_FUNC_RETURN status = 0,
                            bool do_thread_exit = true);
# 731 "/usr/local/include/ace/Thread_Manager.h" 3
  int wait (const ACE_Time_Value *timeout = 0,
            bool abandon_detached_threads = false,
            bool use_absolute_time = true);


  int join (ACE_thread_t tid, ACE_THR_FUNC_RETURN *status = 0);






  int wait_grp (int grp_id);
# 755 "/usr/local/include/ace/Thread_Manager.h" 3
  int thr_self (ACE_hthread_t &);





  ACE_thread_t thr_self (void);






  ACE_Task_Base *task (void);
# 779 "/usr/local/include/ace/Thread_Manager.h" 3
  int suspend_all (void);


  int suspend (ACE_thread_t);


  int suspend_grp (int grp_id);





  int testsuspend (ACE_thread_t t_id);


  int resume_all (void);


  int resume (ACE_thread_t);


  int resume_grp (int grp_id);





  int testresume (ACE_thread_t t_id);
# 815 "/usr/local/include/ace/Thread_Manager.h" 3
  int kill_all (int signum);




  int kill (ACE_thread_t, int signum);




  int kill_grp (int grp_id, int signum);





  int cancel_all (int async_cancel = 0);




  int cancel (ACE_thread_t, int async_cancel = 0);




  int cancel_grp (int grp_id, int async_cancel = 0);





  int testcancel (ACE_thread_t t_id);







  int testterminate (ACE_thread_t t_id);


  int set_grp (ACE_thread_t,
               int grp_id);


  int get_grp (ACE_thread_t,
               int &grp_id);
# 881 "/usr/local/include/ace/Thread_Manager.h" 3
  int wait_task (ACE_Task_Base *task);




  int suspend_task (ACE_Task_Base *task);




  int resume_task (ACE_Task_Base *task);




  int kill_task (ACE_Task_Base *task, int signum);







  int cancel_task (ACE_Task_Base *task, int async_cancel = 0);







  int hthread_within (ACE_hthread_t handle);
  int thread_within (ACE_thread_t tid);


  int num_tasks_in_group (int grp_id);


  int num_threads_in_task (ACE_Task_Base *task);
# 944 "/usr/local/include/ace/Thread_Manager.h" 3
  ssize_t task_list (int grp_id,
                     ACE_Task_Base *task_list[],
                     size_t n);
# 955 "/usr/local/include/ace/Thread_Manager.h" 3
  ssize_t thread_list (ACE_Task_Base *task,
                       ACE_thread_t thread_list[],
                       size_t n);
# 966 "/usr/local/include/ace/Thread_Manager.h" 3
  ssize_t hthread_list (ACE_Task_Base *task,
                        ACE_hthread_t hthread_list[],
                        size_t n);
# 977 "/usr/local/include/ace/Thread_Manager.h" 3
  ssize_t thread_grp_list (int grp_id,
                           ACE_thread_t thread_list[],
                           size_t n);






  ssize_t hthread_grp_list (int grp_id,
                            ACE_hthread_t hthread_list[],
                            size_t n);
# 1011 "/usr/local/include/ace/Thread_Manager.h" 3
  ssize_t task_all_list (ACE_Task_Base *task_list[],
                         size_t n);
# 1021 "/usr/local/include/ace/Thread_Manager.h" 3
  ssize_t thread_all_list (ACE_thread_t thread_list[],
                           size_t n);


  int set_grp (ACE_Task_Base *task, int grp_id);


  int get_grp (ACE_Task_Base *task, int &grp_id);



  size_t count_threads (void) const;



  int thr_state (ACE_thread_t id, ACE_UINT32& state);






  int at_exit (ACE_At_Thread_Exit* cleanup);



  int at_exit (ACE_At_Thread_Exit& cleanup);
# 1069 "/usr/local/include/ace/Thread_Manager.h" 3
  int at_exit (void *object,
               ACE_CLEANUP_FUNC cleanup_hook,
               void *param);



  void wait_on_exit (int dowait);
  int wait_on_exit (void);


  void dump (void);


  struct __Ace {};

protected:






  ACE_Thread_Descriptor *thread_desc_self (void);



  ACE_Thread_Descriptor *thread_descriptor (ACE_thread_t);



  ACE_Thread_Descriptor *hthread_descriptor (ACE_hthread_t);


  int spawn_i (ACE_THR_FUNC func,
               void *arg,
               long flags,
               ACE_thread_t * = 0,
               ACE_hthread_t *t_handle = 0,
               long priority = (-0x7fffffffL - 1L),
               int grp_id = -1,
               void *stack = 0,
               size_t stack_size = 0,
               ACE_Task_Base *task = 0,
               const char** thr_name = 0);


  void run_thread_exit_hooks (int i);



  ACE_Thread_Descriptor *find_thread (ACE_thread_t t_id);



  ACE_Thread_Descriptor *find_hthread (ACE_hthread_t h_id);






  ACE_Thread_Descriptor *find_task (ACE_Task_Base *task,
                                    size_t slot = 0);


  int insert_thr (ACE_thread_t t_id,
                  ACE_hthread_t,
                  int grp_id = -1,
                  long flags = 0);



  int append_thr (ACE_thread_t t_id, ACE_hthread_t,
                  ACE_UINT32,
                  int grp_id,
                  ACE_Task_Base *task = 0,
                  long flags = 0,
                  ACE_Thread_Descriptor *td = 0);


  void remove_thr (ACE_Thread_Descriptor *td,
                   int close_handler);


  void remove_thr_all (void);
# 1163 "/usr/local/include/ace/Thread_Manager.h" 3
  int check_state (ACE_UINT32 state,
                   ACE_thread_t thread,
                   int enable = 1);


  int apply_task (ACE_Task_Base *task,
                  ACE_THR_MEMBER_FUNC func,
                  int = 0);


  int apply_grp (int grp_id,
                 ACE_THR_MEMBER_FUNC func,
                 int arg = 0);


  int apply_all (ACE_THR_MEMBER_FUNC,
                 int = 0);


  int join_thr (ACE_Thread_Descriptor *td,
                int = 0);


  int resume_thr (ACE_Thread_Descriptor *td,
                  int = 0);


  int suspend_thr (ACE_Thread_Descriptor *td,
                   int = 0);


  int kill_thr (ACE_Thread_Descriptor *td,
                int signum);


  int cancel_thr (ACE_Thread_Descriptor *td,
                  int async_cancel = 0);


  int register_as_terminated (ACE_Thread_Descriptor *td);


  static int set_thr_exit (ACE_TSS< ACE_Thread_Exit > *ptr);







  ACE_Double_Linked_List<ACE_Thread_Descriptor> thr_list_;



  ACE_Double_Linked_List<ACE_Thread_Descriptor_Base> terminated_thr_list_;



  ACE_Unbounded_Queue<ACE_Thread_Descriptor*> thr_to_be_removed_;


  int grp_id_;



  int automatic_wait_;




  ACE_Thread_Mutex lock_;


  ACE_Condition_Thread_Mutex zero_cond_;


  ACE_Locked_Free_List<ACE_Thread_Descriptor, ACE_MT_SYNCH::MUTEX> thread_desc_freelist_;

private:


  static ACE_Thread_Manager *thr_mgr_;


  static bool delete_thr_mgr_;


  static ACE_TSS< ACE_Thread_Exit > *thr_exit_;

};










# 1 "/usr/local/include/ace/Thread_Manager.inl" 1 3






inline
ACE_At_Thread_Exit::ACE_At_Thread_Exit (void)
  : next_ (0),
    td_ (0),
    was_applied_ (false),
    is_owner_ (true)
{
}

inline bool
ACE_At_Thread_Exit::was_applied() const
{
   return was_applied_;
}

inline bool
ACE_At_Thread_Exit::was_applied (bool applied)
{
  was_applied_ = applied;
  if (was_applied_)
    td_ = 0;
  return was_applied_;
}

inline bool
ACE_At_Thread_Exit::is_owner() const
{
  return is_owner_;
}

inline bool
ACE_At_Thread_Exit::is_owner (bool owner)
{
  is_owner_ = owner;
  return is_owner_;
}

inline void
ACE_At_Thread_Exit::do_apply (void)
{
  if (!this->was_applied_ && this->is_owner_)
    td_->at_pop();
}

inline
ACE_At_Thread_Exit_Func::ACE_At_Thread_Exit_Func (void *object,
                                                  ACE_CLEANUP_FUNC func,
                                                  void *param)
  : object_(object),
    func_(func),
    param_(param)
{
}

inline
ACE_Thread_Descriptor_Base::ACE_Thread_Descriptor_Base (void)
  : ACE_OS_Thread_Descriptor (),
    thr_id_ (ACE_OS::NULL_thread),
    thr_handle_ (ACE_OS::NULL_hthread),
    grp_id_ (0),
    thr_state_ (ACE_Thread_Manager::ACE_THR_IDLE),
    task_ (0),
    next_ (0),
    prev_ (0)
{
}

inline
ACE_Thread_Descriptor_Base::~ACE_Thread_Descriptor_Base (void)
{
}

inline bool
ACE_Thread_Descriptor_Base::operator== (
  const ACE_Thread_Descriptor_Base &rhs) const
{
  return
    ACE_OS::thr_cmp (this->thr_handle_, rhs.thr_handle_)
    && ACE_OS::thr_equal (this->thr_id_, rhs.thr_id_);
}

inline bool
ACE_Thread_Descriptor_Base::operator!=(const ACE_Thread_Descriptor_Base &rhs) const
{
  return !(*this == rhs);
}

inline ACE_Task_Base *
ACE_Thread_Descriptor_Base::task (void) const
{
  ;
  return this->task_;
}



inline int
ACE_Thread_Descriptor_Base::grp_id (void) const
{
  ;
  return grp_id_;
}


inline ACE_UINT32
ACE_Thread_Descriptor_Base::state (void) const
{
  ;
  return thr_state_;
}


inline void
ACE_Thread_Descriptor_Base::reset (void)
{
  ;
  this->thr_id_ = ACE_OS::NULL_thread;
  this->thr_handle_ = ACE_OS::NULL_hthread;
  this->grp_id_ = 0;
  this->thr_state_ = ACE_Thread_Manager::ACE_THR_IDLE;
  this->task_ = 0;
  this->flags_ = 0;
}


inline ACE_thread_t
ACE_Thread_Descriptor::self (void) const
{
  ;
  return this->thr_id_;
}



inline void
ACE_Thread_Descriptor::self (ACE_hthread_t &handle)
{
  ;
  handle = this->thr_handle_;
}

inline void
ACE_Thread_Descriptor::log_msg_cleanup (ACE_Log_Msg* log_msg)

{
  log_msg_ = log_msg;
}


inline void
ACE_Thread_Descriptor::set_next (ACE_Thread_Descriptor *td)
{
  ;
  this->next_ = td;
}


inline ACE_Thread_Descriptor *
ACE_Thread_Descriptor::get_next (void) const
{
  ;
  return static_cast<ACE_Thread_Descriptor * > (this->next_);
}


inline void
ACE_Thread_Descriptor::reset (ACE_Thread_Manager *tm)
{
  ;
  this->ACE_Thread_Descriptor_Base::reset ();
  this->at_exit_list_ = 0;

  this->tm_ = tm;

  this->log_msg_ = 0;
  this->terminated_ = false;
}

inline ACE_Thread_Descriptor *
ACE_Thread_Manager::thread_desc_self (void)
{



  ACE_Thread_Descriptor *desc = ACE_Log_Msg::instance ()->thr_desc ();
# 210 "/usr/local/include/ace/Thread_Manager.inl" 3
  return desc;
}



inline ACE_thread_t
ACE_Thread_Manager::thr_self (void)
{
  ;
  return ACE_Thread::self ();
}

inline ACE_Task_Base *
ACE_Thread_Manager::task (void)
{
  ;

  ACE_Thread_Descriptor *td = this->thread_desc_self () ;

  if (td == 0)
    return 0;
  else
    return td->task ();
}

inline int
ACE_Thread_Manager::open (size_t)
{

  return 0;
}

inline int
ACE_Thread_Manager::at_exit (ACE_At_Thread_Exit* at)
{
  ACE_Thread_Descriptor *td = this->thread_desc_self ();
  if (td == 0)
    return -1;
  else
    return td->at_exit (at);
}

inline int
ACE_Thread_Manager::at_exit (ACE_At_Thread_Exit& at)
{
  ACE_Thread_Descriptor *td = this->thread_desc_self ();
  if (td == 0)
    return -1;
  else
    return td->at_exit (at);
}

inline int
ACE_Thread_Manager::at_exit (void *object,
                             ACE_CLEANUP_FUNC cleanup_hook,
                             void *param)
{
  ACE_Thread_Descriptor *td = this->thread_desc_self ();
  if (td == 0)
    return -1;
  else
    return td->at_exit (object, cleanup_hook, param);
}

inline void
ACE_Thread_Manager::wait_on_exit (int do_wait)
{
  this->automatic_wait_ = do_wait;
}

inline int
ACE_Thread_Manager::wait_on_exit (void)
{
  return this->automatic_wait_;
}

inline int
ACE_Thread_Manager::register_as_terminated (ACE_Thread_Descriptor *td)
{



  ACE_Thread_Descriptor_Base *tdb = 0;
  do { tdb = new (::std::nothrow) ACE_Thread_Descriptor_Base (*td); if (tdb == 0) { (*__errno_location ()) = 12; return -1; } } while (0);
  this->terminated_thr_list_.insert_tail (tdb);

  return 0;
}

inline size_t
ACE_Thread_Manager::count_threads (void) const
{
  return this->thr_list_.size ();
}


# 1264 "/usr/local/include/ace/Thread_Manager.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 1267 "/usr/local/include/ace/Thread_Manager.h" 2 3
# 24 "/usr/local/include/ace/Task.h" 2 3


# 37 "/usr/local/include/ace/Task.h" 3
namespace ACE_Task_Flags
{
  enum
  {

    ACE_READER = 01,

    ACE_FLUSHDATA = 02,

    ACE_FLUSHALL = 04,

    ACE_FLUSHR = 010,

    ACE_FLUSHW = 020,

    ACE_FLUSHRW = 030
  };
}
# 66 "/usr/local/include/ace/Task.h" 3
class ACE_Task_Base : public ACE_Service_Object
{
public:


  ACE_Task_Base (ACE_Thread_Manager * = 0);


  virtual ~ACE_Task_Base (void);
# 83 "/usr/local/include/ace/Task.h" 3
  virtual int open (void *args = 0);
# 94 "/usr/local/include/ace/Task.h" 3
  virtual int close (u_long flags = 0);
# 105 "/usr/local/include/ace/Task.h" 3
  virtual int module_closed (void);
# 115 "/usr/local/include/ace/Task.h" 3
  virtual int put (ACE_Message_Block *, ACE_Time_Value * = 0);


  virtual int svc (void);
# 179 "/usr/local/include/ace/Task.h" 3
  virtual int activate (long flags = 0x00000002 | 0x00010000 | 0x00400000,
                        int n_threads = 1,
                        int force_active = 0,
                        long priority = (-0x7fffffffL - 1L),
                        int grp_id = -1,
                        ACE_Task_Base *task = 0,
                        ACE_hthread_t thread_handles[] = 0,
                        void *stack[] = 0,
                        size_t stack_size[] = 0,
                        ACE_thread_t thread_ids[] = 0,
                        const char* thr_name[] = 0);
# 201 "/usr/local/include/ace/Task.h" 3
  virtual int wait (void);







  virtual int suspend (void);

  virtual int resume (void);


  int grp_id (void) const;


  void grp_id (int);


  ACE_Thread_Manager *thr_mgr (void) const;


  void thr_mgr (ACE_Thread_Manager *);


  int is_reader (void) const;


  int is_writer (void) const;






  size_t thr_count (void) const;
# 254 "/usr/local/include/ace/Task.h" 3
  ACE_thread_t last_thread (void) const;


  static ACE_THR_FUNC_RETURN svc_run (void *);



  static void cleanup (void *object, void *params);

protected:






  size_t thr_count_;


  ACE_Thread_Manager *thr_mgr_;


  u_long flags_;


  int grp_id_;




  ACE_Thread_Mutex lock_;



  ACE_thread_t last_thread_id_;

private:


  ACE_Task_Base &operator= (const ACE_Task_Base &);
  ACE_Task_Base (const ACE_Task_Base &);
};




# 1 "/usr/local/include/ace/Task.inl" 1 3







inline int
ACE_Task_Base::grp_id (void) const
{
  ;
  ACE_Guard< ACE_Thread_Mutex > ace_mon (const_cast <ACE_Thread_Mutex&>(this->lock_)); if (ace_mon.locked () != 0) { ;; } else { return -1; };
  return this->grp_id_;
}



inline void
ACE_Task_Base::grp_id (int identifier)
{
  ;
  ACE_Guard< ACE_Thread_Mutex > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return; };



  this->grp_id_ = identifier;
  if (this->thr_mgr ())
    this->thr_mgr ()->set_grp (this, identifier);
}

inline ACE_Thread_Manager *
ACE_Task_Base::thr_mgr (void) const
{
  ;
  return this->thr_mgr_;
}

inline void
ACE_Task_Base::thr_mgr (ACE_Thread_Manager *thr_mgr)
{
  ;
  this->thr_mgr_ = thr_mgr;
}

inline int
ACE_Task_Base::is_reader (void) const
{
  ;
  return ((((this->flags_) & (ACE_Task_Flags::ACE_READER)) != 0));
}

inline int
ACE_Task_Base::is_writer (void) const
{
  ;
  return ((((this->flags_) & (ACE_Task_Flags::ACE_READER)) == 0));
}


inline size_t
ACE_Task_Base::thr_count (void) const
{
  ;
  ACE_Guard< ACE_Thread_Mutex > ace_mon (const_cast <ACE_Thread_Mutex&>(this->lock_)); if (ace_mon.locked () != 0) { ;; } else { return 0; };

  return this->thr_count_;
}


inline ACE_thread_t
ACE_Task_Base::last_thread (void) const
{
  ;
  return this->last_thread_id_;
}


# 301 "/usr/local/include/ace/Task.h" 2 3



# 1 "/usr/local/include/ace/Task_T.h" 1 3
# 15 "/usr/local/include/ace/Task_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Task_T.h" 2 3

# 1 "/usr/local/include/ace/Message_Queue.h" 1 3
# 15 "/usr/local/include/ace/Message_Queue.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 16 "/usr/local/include/ace/Message_Queue.h" 2 3

# 1 "/usr/local/include/ace/Message_Block.h" 1 3
# 16 "/usr/local/include/ace/Message_Block.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Message_Block.h" 2 3
# 29 "/usr/local/include/ace/Message_Block.h" 3



class ACE_Allocator;
class ACE_Data_Block;
class ACE_Lock;
# 59 "/usr/local/include/ace/Message_Block.h" 3
class ACE_Message_Block
{
public:
  friend class ACE_Data_Block;

  enum
  {


    MB_DATA = 0x01,

    MB_PROTO = 0x02,



    MB_BREAK = 0x03,

    MB_PASSFP = 0x04,

    MB_EVENT = 0x05,

    MB_SIG = 0x06,

    MB_IOCTL = 0x07,

    MB_SETOPTS = 0x08,



    MB_IOCACK = 0x81,

    MB_IOCNAK = 0x82,

    MB_PCPROTO = 0x83,

    MB_PCSIG = 0x84,

    MB_READ = 0x85,

    MB_FLUSH = 0x86,

    MB_STOP = 0x87,

    MB_START = 0x88,

    MB_HANGUP = 0x89,

    MB_ERROR = 0x8a,

    MB_PCEVENT = 0x8b,



    MB_NORMAL = 0x00,

    MB_PRIORITY = 0x80,

    MB_USER = 0x200
  };

  typedef int ACE_Message_Type;
  typedef unsigned long Message_Flags;

  enum
  {

    DONT_DELETE = 01,

    USER_FLAGS = 0x1000
  };



  ACE_Message_Block (ACE_Allocator *message_block_allocator = 0);
# 141 "/usr/local/include/ace/Message_Block.h" 3
  ACE_Message_Block (ACE_Data_Block *data_block,
                     Message_Flags flags = 0,
                     ACE_Allocator *message_block_allocator = 0);
# 152 "/usr/local/include/ace/Message_Block.h" 3
  ACE_Message_Block (const char *data,
                     size_t size = 0,
                     unsigned long priority = 0);
# 179 "/usr/local/include/ace/Message_Block.h" 3
  ACE_Message_Block (size_t size,
                     ACE_Message_Type type = MB_DATA,
                     ACE_Message_Block *cont = 0,
                     const char *data = 0,
                     ACE_Allocator *allocator_strategy = 0,
                     ACE_Lock *locking_strategy = 0,
                     unsigned long priority = 0,
                     const ACE_Time_Value &execution_time = ACE_Time_Value::zero,
                     const ACE_Time_Value &deadline_time = ACE_Time_Value::max_time,
                     ACE_Allocator *data_block_allocator = 0,
                     ACE_Allocator *message_block_allocator = 0);
# 202 "/usr/local/include/ace/Message_Block.h" 3
  ACE_Message_Block (const ACE_Message_Block &mb,
                     size_t align);







  int init (const char *data,
            size_t size = 0);
# 229 "/usr/local/include/ace/Message_Block.h" 3
  int init (size_t size,
            ACE_Message_Type type = MB_DATA,
            ACE_Message_Block *cont = 0,
            const char *data = 0,
            ACE_Allocator *allocator_strategy = 0,
            ACE_Lock *locking_strategy = 0,
            unsigned long priority = 0,
            const ACE_Time_Value &execution_time = ACE_Time_Value::zero,
            const ACE_Time_Value &deadline_time = ACE_Time_Value::max_time,
            ACE_Allocator *data_block_allocator = 0,
            ACE_Allocator *message_block_allocator = 0);







  virtual ~ACE_Message_Block (void);




  ACE_Message_Type msg_type (void) const;


  void msg_type (ACE_Message_Type type);


  int is_data_msg (void) const;



  ACE_Message_Type msg_class (void) const;




  Message_Flags set_flags (Message_Flags more_flags);



  Message_Flags clr_flags (Message_Flags less_flags);


  Message_Flags flags (void) const;
# 284 "/usr/local/include/ace/Message_Block.h" 3
  Message_Flags set_self_flags (ACE_Message_Block::Message_Flags more_flags);



  Message_Flags clr_self_flags (ACE_Message_Block::Message_Flags less_flags);


  Message_Flags self_flags (void) const;


  unsigned long msg_priority (void) const;


  void msg_priority (unsigned long priority);


  const ACE_Time_Value &msg_execution_time (void) const;


  void msg_execution_time (const ACE_Time_Value &et);


  const ACE_Time_Value &msg_deadline_time (void) const;


  void msg_deadline_time (const ACE_Time_Value &dt);





  virtual ACE_Message_Block *clone (Message_Flags mask = 0) const;


  virtual ACE_Message_Block *duplicate (void) const;







  static ACE_Message_Block *duplicate (const ACE_Message_Block *mb);
# 355 "/usr/local/include/ace/Message_Block.h" 3
  virtual ACE_Message_Block *release (void);







  static ACE_Message_Block *release (ACE_Message_Block *mb);
# 379 "/usr/local/include/ace/Message_Block.h" 3
  int copy (const char *buf, size_t n);
# 394 "/usr/local/include/ace/Message_Block.h" 3
  int copy (const char *buf);






  int crunch (void);



  void reset (void);
# 423 "/usr/local/include/ace/Message_Block.h" 3
  void access_allocators (ACE_Allocator *&allocator_strategy,
                          ACE_Allocator *&data_block_allocator,
                          ACE_Allocator *&message_block_allocator);
# 434 "/usr/local/include/ace/Message_Block.h" 3
  void reset_allocators (ACE_Allocator *allocator_strategy = 0,
                         ACE_Allocator *data_block_allocator = 0,
                         ACE_Allocator *message_block_allocator = 0);


  char *base (void) const;


  void base (char *data,
             size_t size,
             Message_Flags = DONT_DELETE);


  char *end (void) const;






  char *mark (void) const;


  char *rd_ptr (void) const;


  void rd_ptr (char *ptr);


  void rd_ptr (size_t n);


  char *wr_ptr (void) const;


  void wr_ptr (char *ptr);



  void wr_ptr (size_t n);
# 484 "/usr/local/include/ace/Message_Block.h" 3
  size_t length (void) const;


  void length (size_t n);



  size_t total_length (void) const;



  size_t total_size (void) const;



  void total_size_and_length (size_t &mb_size,
                              size_t &mb_length) const;



  size_t size (void) const;







  int size (size_t length);



  size_t total_capacity (void) const;


  size_t capacity (void) const;



  size_t space (void) const;
# 533 "/usr/local/include/ace/Message_Block.h" 3
  ACE_Data_Block *data_block (void) const;
# 542 "/usr/local/include/ace/Message_Block.h" 3
  void data_block (ACE_Data_Block *);



  ACE_Data_Block *replace_data_block (ACE_Data_Block*);



  ACE_Message_Block *cont (void) const;


  void cont (ACE_Message_Block *);



  ACE_Message_Block *next (void) const;


  void next (ACE_Message_Block *);



  ACE_Message_Block *prev (void) const;


  void prev (ACE_Message_Block *);



  ACE_Lock *locking_strategy (void);


  ACE_Lock *locking_strategy (ACE_Lock *);


  int reference_count (void) const;


  void dump (void) const;


  struct __Ace {};

protected:


  ACE_Message_Block (size_t size,
                     ACE_Message_Type type,
                     ACE_Message_Block *cont,
                     const char *data,
                     ACE_Allocator *allocator_strategy,
                     ACE_Lock *locking_strategy,
                     Message_Flags flags,
                     unsigned long priority,
                     const ACE_Time_Value &execution_time,
                     const ACE_Time_Value &deadline_time,
                     ACE_Data_Block *db,
                     ACE_Allocator *data_block_allocator,
                     ACE_Allocator *message_block_allocator);



  int release_i (ACE_Lock *lock);


  int init_i (size_t size,
              ACE_Message_Type type,
              ACE_Message_Block *cont,
              const char *data,
              ACE_Allocator *allocator_strategy,
              ACE_Lock *locking_strategy,
              Message_Flags flags,
              unsigned long priority,
              const ACE_Time_Value &execution_time,
              const ACE_Time_Value &deadline_time,
              ACE_Data_Block *db,
              ACE_Allocator *data_block_allocator,
              ACE_Allocator *message_block_allocator);


  size_t rd_ptr_;


  size_t wr_ptr_;


  unsigned long priority_;
# 640 "/usr/local/include/ace/Message_Block.h" 3
  ACE_Message_Block *cont_;


  ACE_Message_Block *next_;


  ACE_Message_Block *prev_;


  ACE_Message_Block::Message_Flags flags_;



  ACE_Data_Block *data_block_;



  ACE_Allocator *message_block_allocator_;

private:

  ACE_Message_Block &operator= (const ACE_Message_Block &);
  ACE_Message_Block (const ACE_Message_Block &);
};
# 677 "/usr/local/include/ace/Message_Block.h" 3
class ACE_Data_Block
{
public:


  ACE_Data_Block (void);


  ACE_Data_Block (size_t size,
                  ACE_Message_Block::ACE_Message_Type msg_type,
                  const char *msg_data,
                  ACE_Allocator *allocator_strategy,
                  ACE_Lock *locking_strategy,
                  ACE_Message_Block::Message_Flags flags,
                  ACE_Allocator *data_block_allocator);


  virtual ~ACE_Data_Block (void);


  ACE_Message_Block::ACE_Message_Type msg_type (void) const;


  void msg_type (ACE_Message_Block::ACE_Message_Type type);


  char *base (void) const;


  void base (char *data,
             size_t size,
             ACE_Message_Block::Message_Flags mflags = ACE_Message_Block::DONT_DELETE);


  char *end (void) const;






  char *mark (void) const;





  size_t size (void) const;



  int size (size_t length);


  size_t capacity (void) const;
# 740 "/usr/local/include/ace/Message_Block.h" 3
  virtual ACE_Data_Block *clone (ACE_Message_Block::Message_Flags mask = 0) const;
# 750 "/usr/local/include/ace/Message_Block.h" 3
  virtual ACE_Data_Block *clone_nocopy (ACE_Message_Block::Message_Flags mask = 0,
                                        size_t max_size = 0) const;


  ACE_Data_Block *duplicate (void);







  ACE_Data_Block *release (ACE_Lock *lock = 0);




  ACE_Message_Block::Message_Flags set_flags (ACE_Message_Block::Message_Flags more_flags);



  ACE_Message_Block::Message_Flags clr_flags (ACE_Message_Block::Message_Flags less_flags);


  ACE_Message_Block::Message_Flags flags (void) const;


  ACE_Allocator *allocator_strategy (void) const;



  ACE_Lock *locking_strategy (void);


  ACE_Lock *locking_strategy (ACE_Lock *);


  void dump (void) const;


  int reference_count (void) const;


  ACE_Allocator *data_block_allocator (void) const;

protected:

  virtual ACE_Data_Block *release_i (void);


  int reference_count_i (void) const;
# 810 "/usr/local/include/ace/Message_Block.h" 3
  friend class ACE_Message_Block;
  ACE_Data_Block *release_no_delete (ACE_Lock *lock);


  ACE_Message_Block::ACE_Message_Type type_;


  size_t cur_size_;


  size_t max_size_;


  ACE_Message_Block::Message_Flags flags_;


  char *base_;







  ACE_Allocator *allocator_strategy_;







  ACE_Lock *locking_strategy_;







  int reference_count_;


  ACE_Allocator *data_block_allocator_;

private:

  ACE_Data_Block &operator= (const ACE_Data_Block &);
  ACE_Data_Block (const ACE_Data_Block &);
};




# 1 "/usr/local/include/ace/Message_Block.inl" 1 3






inline ACE_Data_Block *
ACE_Message_Block::data_block (void) const
{
  ;
  return this->data_block_;
}

inline ACE_Message_Block::Message_Flags
ACE_Message_Block::set_self_flags (ACE_Message_Block::Message_Flags more_flags)
{
  ;


  return (this->flags_ |= (more_flags));
}

inline ACE_Message_Block::Message_Flags
ACE_Message_Block::clr_self_flags (ACE_Message_Block::Message_Flags less_flags)
{
  ;


  return (this->flags_ &= ~(less_flags));
}

inline ACE_Message_Block::Message_Flags
ACE_Message_Block::self_flags (void) const
{
  ;
  return this->flags_;
}

inline int
ACE_Data_Block::reference_count_i (void) const
{
  return reference_count_;
}

inline int
ACE_Message_Block::reference_count (void) const
{
  return data_block () ? data_block ()->reference_count () : 0;
}

inline char *
ACE_Data_Block::base (void) const
{
  ;
  return this->base_;
}

inline size_t
ACE_Data_Block::size (void) const
{
  ;
  return this->cur_size_;
}

inline size_t
ACE_Data_Block::capacity (void) const
{
  ;
  return this->max_size_;
}

inline ACE_Message_Block::Message_Flags
ACE_Data_Block::set_flags (ACE_Message_Block::Message_Flags more_flags)
{
  ;


  return (this->flags_ |= (more_flags));
}

inline ACE_Message_Block::Message_Flags
ACE_Data_Block::clr_flags (ACE_Message_Block::Message_Flags less_flags)
{
  ;


  return (this->flags_ &= ~(less_flags));
}

inline ACE_Message_Block::Message_Flags
ACE_Data_Block::flags (void) const
{
  ;
   return this->flags_;
}

inline ACE_Allocator*
ACE_Data_Block::data_block_allocator (void) const
{
  ;
  return this->data_block_allocator_;
}

inline ACE_Message_Block::Message_Flags
ACE_Message_Block::set_flags (ACE_Message_Block::Message_Flags more_flags)
{
  ;
  return this->data_block ()->set_flags (more_flags);
}

inline ACE_Message_Block::Message_Flags
ACE_Message_Block::clr_flags (ACE_Message_Block::Message_Flags less_flags)
{
  ;
  return this->data_block ()->clr_flags (less_flags);
}

inline ACE_Message_Block::Message_Flags
ACE_Message_Block::flags (void) const
{
  ;
   return this->data_block ()->flags ();
}



inline size_t
ACE_Message_Block::length (void) const
{
  ;
  return this->wr_ptr_ - this->rd_ptr_;
}




inline void
ACE_Message_Block::length (size_t len)
{
  ;
  this->wr_ptr_ = this->rd_ptr_ + len;
}



inline size_t
ACE_Message_Block::size (void) const
{
  ;
  return this->data_block ()->size ();
}

inline size_t
ACE_Message_Block::capacity (void) const
{
  ;
  return this->data_block ()->capacity ();
}

inline ACE_Message_Block::ACE_Message_Type
ACE_Data_Block::msg_type (void) const
{
  ;
  return this->type_;
}

inline void
ACE_Data_Block::msg_type (ACE_Message_Block::ACE_Message_Type t)
{
  ;
  this->type_ = t;
}

inline ACE_Message_Block::ACE_Message_Type
ACE_Message_Block::msg_type (void) const
{
  ;
  return this->data_block ()->msg_type ();
}

inline void
ACE_Message_Block::msg_type (ACE_Message_Block::ACE_Message_Type t)
{
  ;
  this->data_block ()->msg_type (t);
}

inline ACE_Message_Block::ACE_Message_Type
ACE_Message_Block::msg_class (void) const
{
  ;

  if (this->msg_type () < ACE_Message_Block::MB_PRIORITY)
    return ACE_Message_Block::MB_NORMAL;
  else if (this->msg_type () < ACE_Message_Block::MB_USER)
    return ACE_Message_Block::MB_PRIORITY;
  else
    return ACE_Message_Block::MB_USER;
}

inline int
ACE_Message_Block::is_data_msg (void) const
{
  ;
  ACE_Message_Type mt = this->msg_type ();
  return
    mt == ACE_Message_Block::MB_DATA
    || mt == ACE_Message_Block::MB_PROTO
    || mt == ACE_Message_Block::MB_PCPROTO;
}

inline unsigned long
ACE_Message_Block::msg_priority (void) const
{
  ;
  return this->priority_;
}

inline void
ACE_Message_Block::msg_priority (unsigned long pri)
{
  ;
  this->priority_ = pri;
}

inline const ACE_Time_Value &
ACE_Message_Block::msg_execution_time (void) const
{
  ;



  return ACE_Time_Value::zero;

}

inline void
ACE_Message_Block::msg_execution_time (const ACE_Time_Value &et)
{
  ;



  (void) (et);

}

inline const ACE_Time_Value &
ACE_Message_Block::msg_deadline_time (void) const
{
  ;




  return ACE_Time_Value::max_time;

}

inline void
ACE_Message_Block::msg_deadline_time (const ACE_Time_Value &dt)
{
  ;



  (void) (dt);

}

inline void
ACE_Message_Block::access_allocators (ACE_Allocator *& allocator_strategy,
                                      ACE_Allocator *& data_block_allocator,
                                      ACE_Allocator *& message_block_allocator)
{
  allocator_strategy =
    this->data_block_->allocator_strategy_;
  data_block_allocator =
    this->data_block_->data_block_allocator_;
  message_block_allocator =
    this->message_block_allocator_;
}

inline char *
ACE_Message_Block::base (void) const
{
  ;
  return this->data_block ()->base ();
}

inline void
ACE_Message_Block::base (char *msg_data,
                         size_t msg_length,
                         Message_Flags msg_flags)
{
  ;
  this->rd_ptr_ = 0;
  this->wr_ptr_ = 0;
  this->data_block ()->base (msg_data, msg_length, msg_flags);
}

inline char *
ACE_Message_Block::rd_ptr (void) const
{
  ;
  return this->base () + this->rd_ptr_;
}

inline void
ACE_Message_Block::wr_ptr (char *new_ptr)
{
  ;
  this->wr_ptr_ = new_ptr - this->base ();
}



inline char *
ACE_Data_Block::mark (void) const
{
  ;
  return this->base_ + this->cur_size_;
}

inline char *
ACE_Message_Block::mark (void) const
{
  ;
  return this->data_block ()->mark ();
}

inline char *
ACE_Data_Block::end (void) const
{
  ;
  return this->base_ + this->max_size_;
}

inline char *
ACE_Message_Block::end (void) const
{
  ;
  return this->data_block ()->end ();
}


inline void
ACE_Message_Block::rd_ptr (char *new_ptr)
{
  ;
  this->rd_ptr_ = new_ptr - this->base ();
}

inline void
ACE_Message_Block::rd_ptr (size_t n)
{
  ;
  this->rd_ptr_ += n;
}

inline char *
ACE_Message_Block::wr_ptr (void) const
{
  ;
  return this->base () + this->wr_ptr_;
}

inline void
ACE_Message_Block::wr_ptr (size_t n)
{
  ;
  this->wr_ptr_ += n;
}

inline void
ACE_Message_Block::reset (void)
{
  ;
  this->rd_ptr_ = 0;
  this->wr_ptr_ = 0;
}

inline size_t
ACE_Message_Block::space (void) const
{
  ;
  return this->mark () - this->wr_ptr ();
}

inline ACE_Data_Block *
ACE_Message_Block::replace_data_block (ACE_Data_Block *db)
{
  ;
  ACE_Data_Block *old = this->data_block_;
  this->data_block_ = db;

  if (db != 0)
    {


      this->rd_ptr (this->data_block ()->base ());
      this->wr_ptr (this->data_block ()->base ());
    }

  return old;
}

inline void
ACE_Message_Block::cont (ACE_Message_Block *cont_msg)
{
  ;
  this->cont_ = cont_msg;
}

inline ACE_Message_Block *
ACE_Message_Block::cont (void) const
{
  ;
  return this->cont_;
}

inline void
ACE_Message_Block::reset_allocators (ACE_Allocator *allocator_strategy,
                                     ACE_Allocator *data_block_allocator,
                                     ACE_Allocator *message_block_allocator)
{
  this->data_block_->allocator_strategy_ =
    allocator_strategy;
  this->data_block_->data_block_allocator_ =
    data_block_allocator;
  this->message_block_allocator_ =
    message_block_allocator;

  if (this->cont () != 0)
    this->cont ()->reset_allocators (allocator_strategy,
                                     data_block_allocator,
                                     message_block_allocator);
}

inline void
ACE_Message_Block::next (ACE_Message_Block *next_msg)
{
  ;
  this->next_ = next_msg;
}

inline ACE_Message_Block *
ACE_Message_Block::next (void) const
{
  ;
  return this->next_;
}

inline void
ACE_Message_Block::prev (ACE_Message_Block *next_msg)
{
  ;
  this->prev_ = next_msg;
}

inline ACE_Message_Block *
ACE_Message_Block::prev (void) const
{
  ;
  return this->prev_;
}

inline ACE_Allocator *
ACE_Data_Block::allocator_strategy (void) const
{
  ;
  return this->allocator_strategy_;
}

inline ACE_Lock *
ACE_Data_Block::locking_strategy (void)
{
  ;
  return this->locking_strategy_;
}

inline ACE_Lock *
ACE_Data_Block::locking_strategy (ACE_Lock *nls)
{
  ;
  ACE_Lock *ols = this->locking_strategy_;

  this->locking_strategy_ = nls;
  return ols;
}

inline ACE_Lock *
ACE_Message_Block::locking_strategy (void)
{
  ;
  return this->data_block ()->locking_strategy ();
}

inline ACE_Lock *
ACE_Message_Block::locking_strategy (ACE_Lock *nls)
{
  ;
  ACE_Lock *ols = this->data_block ()->locking_strategy ();
  this->data_block ()->locking_strategy (nls);
  return ols;
}


# 865 "/usr/local/include/ace/Message_Block.h" 2 3


# 1 "/usr/local/include/ace/Message_Block_T.h" 1 3
# 16 "/usr/local/include/ace/Message_Block_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Message_Block_T.h" 2 3

# 1 "/usr/local/include/ace/Message_Block.h" 1 3
# 19 "/usr/local/include/ace/Message_Block_T.h" 2 3






# 37 "/usr/local/include/ace/Message_Block_T.h" 3
template <class ACE_LOCK>
class ACE_Locked_Data_Block : public ACE_Data_Block
{
public:


  ACE_Locked_Data_Block (void);


  ACE_Locked_Data_Block (size_t size,
                         ACE_Message_Block::ACE_Message_Type msg_type,
                         const char *msg_data,
                         ACE_Allocator *allocator_strategy,
                         ACE_Message_Block::Message_Flags flags,
                         ACE_Allocator *data_block_allocator);


  virtual ~ACE_Locked_Data_Block (void);






  virtual ACE_Data_Block *clone_nocopy (ACE_Message_Block::Message_Flags mask = 0,
                                        size_t max_size = 0) const;

private:

  ACE_LOCK lock_;


  ACE_Locked_Data_Block<ACE_LOCK> &operator= (const ACE_Locked_Data_Block<ACE_LOCK> &);
  ACE_Locked_Data_Block (const ACE_Locked_Data_Block<ACE_LOCK> &);
};




# 1 "/usr/local/include/ace/Message_Block_T.inl" 1 3






template<class ACE_LOCK> inline
ACE_Locked_Data_Block<ACE_LOCK>::ACE_Locked_Data_Block (void)
{
  this->locking_strategy_ = &this->lock_;
}

template<class ACE_LOCK> inline
ACE_Locked_Data_Block<ACE_LOCK>::
ACE_Locked_Data_Block (size_t size,
                       ACE_Message_Block::ACE_Message_Type msg_type,
                       const char *msg_data,
                       ACE_Allocator *allocator_strategy,
                       ACE_Message_Block::Message_Flags flags,
                       ACE_Allocator *data_block_allocator)
  : ACE_Data_Block (size,
                    msg_type,
                    msg_data,
                    allocator_strategy,
                    &lock_,
                    flags,
                    data_block_allocator)
{
}


# 77 "/usr/local/include/ace/Message_Block_T.h" 2 3



# 1 "/usr/local/include/ace/Message_Block_T.cpp" 1 3
# 14 "/usr/local/include/ace/Message_Block_T.cpp" 3


template<class L>
ACE_Locked_Data_Block<L>::~ACE_Locked_Data_Block (void)
{
}

template<class ACE_LOCK> ACE_Data_Block *
ACE_Locked_Data_Block<ACE_LOCK>::clone_nocopy (ACE_Message_Block::Message_Flags mask,
                                               size_t max_size) const
{
  ;



  const ACE_Message_Block::Message_Flags always_clear =
    ACE_Message_Block::DONT_DELETE;

  ACE_Locked_Data_Block<ACE_LOCK> *nb = 0;

  do { nb = static_cast<ACE_Locked_Data_Block<ACE_LOCK>*> ( this->data_block_allocator ()->malloc (sizeof (ACE_Locked_Data_Block<ACE_LOCK>))); if (nb == 0) { (*__errno_location ()) = 12; return 0;} else { (void) new (nb) ACE_Locked_Data_Block<ACE_LOCK> ( max_size == 0 ? this->size () : max_size, this->msg_type (), 0, this->allocator_strategy (), this->flags (), this->data_block_allocator ()); } } while (0);
# 48 "/usr/local/include/ace/Message_Block_T.cpp" 3
  nb->clr_flags (mask | always_clear);
  return nb;
}


# 81 "/usr/local/include/ace/Message_Block_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 88 "/usr/local/include/ace/Message_Block_T.h" 2 3
# 868 "/usr/local/include/ace/Message_Block.h" 2 3

# 1 "/usr/local/include/ace/post.h" 1 3
# 870 "/usr/local/include/ace/Message_Block.h" 2 3
# 18 "/usr/local/include/ace/Message_Queue.h" 2 3





# 1 "/usr/local/include/ace/IO_Cntl_Msg.h" 1 3
# 17 "/usr/local/include/ace/IO_Cntl_Msg.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/IO_Cntl_Msg.h" 2 3
# 26 "/usr/local/include/ace/IO_Cntl_Msg.h" 3







class ACE_IO_Cntl_Msg
{
public:
  enum
  {

    SET_LWM = 1,

    GET_LWM = 2,

    SET_HWM = 3,

    GET_HWM = 4,

    MOD_LINK = 5,

    MOD_UNLINK = 6
  };

  typedef unsigned short ACE_IO_Cntl_Cmds;



  ACE_IO_Cntl_Msg (ACE_IO_Cntl_Cmds c);




  ACE_IO_Cntl_Cmds cmd (void);


  void cmd (ACE_IO_Cntl_Cmds c);


  size_t count (void);


  void count (size_t c);


  int error (void);


  void error (int e);


  int rval (void);


  void rval (int r);


  void dump (void) const;


  struct __Ace {};

private:

  ACE_IO_Cntl_Cmds cmd_;


  size_t count_;


  int error_;


  int rval_;
};




# 1 "/usr/local/include/ace/IO_Cntl_Msg.inl" 1 3






inline
ACE_IO_Cntl_Msg::ACE_IO_Cntl_Msg (ACE_IO_Cntl_Cmds c)
{
  this->cmd_ = c;
}

inline ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds
ACE_IO_Cntl_Msg::cmd (void)
{
  return this->cmd_;
}

inline void
ACE_IO_Cntl_Msg::cmd (ACE_IO_Cntl_Cmds c)
{
  this->cmd_ = c;
}

inline size_t
ACE_IO_Cntl_Msg::count (void)
{
  return this->count_;
}

inline void
ACE_IO_Cntl_Msg::count (size_t c)
{
  this->count_ = c;
}

inline int
ACE_IO_Cntl_Msg::error (void)
{
  return this->error_;
}

inline void
ACE_IO_Cntl_Msg::error (int e)
{
  this->error_ = e;
}

inline int
ACE_IO_Cntl_Msg::rval (void)
{
  return this->rval_;
}

inline void
ACE_IO_Cntl_Msg::rval (int r)
{
  this->rval_ = r;
}


# 108 "/usr/local/include/ace/IO_Cntl_Msg.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 111 "/usr/local/include/ace/IO_Cntl_Msg.h" 2 3
# 24 "/usr/local/include/ace/Message_Queue.h" 2 3




class ACE_Notification_Strategy;
template <class _ACE_SYNCH> class ACE_Message_Queue_Iterator;
template <class _ACE_SYNCH> class ACE_Message_Queue_Reverse_Iterator;
# 48 "/usr/local/include/ace/Message_Queue.h" 3
class ACE_Message_Queue_Base
{
public:
  enum
  {



    DEFAULT_HWM = 16 * 1024,

    DEFAULT_LWM = 16 * 1024,
# 68 "/usr/local/include/ace/Message_Queue.h" 3
    WAS_ACTIVE = 1,

    ACTIVATED = 1,


    WAS_INACTIVE = 2,

    DEACTIVATED = 2,


    PULSED = 3

  };

  ACE_Message_Queue_Base (void);


  virtual int close (void) = 0;


  virtual ~ACE_Message_Queue_Base (void);
# 101 "/usr/local/include/ace/Message_Queue.h" 3
  virtual int peek_dequeue_head (ACE_Message_Block *&first_item,
                                 ACE_Time_Value *timeout = 0) = 0;
# 113 "/usr/local/include/ace/Message_Queue.h" 3
  virtual int enqueue_tail (ACE_Message_Block *new_item,
                            ACE_Time_Value *timeout = 0) = 0;
  virtual int enqueue (ACE_Message_Block *new_item,
                       ACE_Time_Value *timeout = 0) = 0;
# 127 "/usr/local/include/ace/Message_Queue.h" 3
  virtual int dequeue_head (ACE_Message_Block *&first_item,
                            ACE_Time_Value *timeout = 0) = 0;
  virtual int dequeue (ACE_Message_Block *&first_item,
                       ACE_Time_Value *timeout = 0) = 0;



  virtual bool is_full (void) = 0;


  virtual bool is_empty (void) = 0;





  virtual size_t message_bytes (void) = 0;



  virtual size_t message_length (void) = 0;


  virtual size_t message_count (void) = 0;



  virtual void message_bytes (size_t new_size) = 0;



  virtual void message_length (size_t new_length) = 0;
# 171 "/usr/local/include/ace/Message_Queue.h" 3
  virtual int deactivate (void) = 0;







  virtual int activate (void) = 0;
# 188 "/usr/local/include/ace/Message_Queue.h" 3
  virtual int pulse (void) = 0;


  virtual int state (void);



  virtual int deactivated (void) = 0;


  virtual ACE_Notification_Strategy *notification_strategy (void) = 0;


  virtual void notification_strategy (ACE_Notification_Strategy *s) = 0;




  virtual void dump (void) const = 0;


  struct __Ace {};

private:

  ACE_Message_Queue_Base (const ACE_Message_Queue_Base &);
  void operator= (const ACE_Message_Queue_Base &);

protected:


  int state_;

};




# 1 "/usr/local/include/ace/Message_Queue_T.h" 1 3
# 16 "/usr/local/include/ace/Message_Queue_T.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Message_Queue_T.h" 2 3

# 1 "/usr/local/include/ace/Message_Queue.h" 1 3
# 19 "/usr/local/include/ace/Message_Queue_T.h" 2 3
# 1 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 1 3
# 16 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 2 3
# 27 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 3

# 48 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 3
class ACE_Dynamic_Message_Strategy
{
public:






  enum Priority_Status
  {

    PENDING = 0x01,

    LATE = 0x02,

    BEYOND_LATE = 0x04,

    ANY_STATUS = 0x07
  };


  ACE_Dynamic_Message_Strategy (unsigned long static_bit_field_mask,
                                unsigned long static_bit_field_shift,
                                unsigned long dynamic_priority_max,
                                unsigned long dynamic_priority_offset);


  virtual ~ACE_Dynamic_Message_Strategy (void);


  Priority_Status priority_status (ACE_Message_Block &mb,
                                   const ACE_Time_Value &tv);


  unsigned long static_bit_field_mask (void) const;


  void static_bit_field_mask (unsigned long);


  unsigned long static_bit_field_shift (void) const;


  void static_bit_field_shift (unsigned long);


  unsigned long dynamic_priority_max (void) const;


  void dynamic_priority_max (unsigned long);


  unsigned long dynamic_priority_offset (void) const;


  void dynamic_priority_offset (unsigned long);


  virtual void dump (void) const;

protected:

  virtual void convert_priority (ACE_Time_Value &priority,
                                 const ACE_Message_Block &mb) = 0;


  unsigned long static_bit_field_mask_;






  unsigned long static_bit_field_shift_;


  unsigned long dynamic_priority_max_;


  unsigned long dynamic_priority_offset_;


  ACE_Time_Value max_late_;


  ACE_Time_Value min_pending_;


  ACE_Time_Value pending_shift_;
};
# 154 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 3
class ACE_Deadline_Message_Strategy : public ACE_Dynamic_Message_Strategy
{
public:

  ACE_Deadline_Message_Strategy (unsigned long static_bit_field_mask = 0x3FFUL,
                                 unsigned long static_bit_field_shift = 10,
                                 unsigned long dynamic_priority_max = 0x3FFFFFUL,
                                 unsigned long dynamic_priority_offset = 0x200000UL);


  virtual ~ACE_Deadline_Message_Strategy (void);


  virtual void convert_priority (ACE_Time_Value &priority,
                                 const ACE_Message_Block &mb);


  virtual void dump (void) const;
};
# 189 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 3
class ACE_Laxity_Message_Strategy : public ACE_Dynamic_Message_Strategy
{
public:

  ACE_Laxity_Message_Strategy (unsigned long static_bit_field_mask = 0x3FFUL,
                               unsigned long static_bit_field_shift = 10,
                               unsigned long dynamic_priority_max = 0x3FFFFFUL,
                               unsigned long dynamic_priority_offset = 0x200000UL);


  virtual ~ACE_Laxity_Message_Strategy (void);


  virtual void convert_priority (ACE_Time_Value &priority,
                                 const ACE_Message_Block &mb);


  virtual void dump (void) const;
};




# 1 "/usr/local/include/ace/Dynamic_Message_Strategy.inl" 1 3






inline unsigned long
ACE_Dynamic_Message_Strategy::static_bit_field_mask (void) const
{
  return static_bit_field_mask_;
}


inline void
ACE_Dynamic_Message_Strategy::static_bit_field_mask (unsigned long ul)
{
  static_bit_field_mask_ = ul;
}


inline unsigned long
ACE_Dynamic_Message_Strategy::static_bit_field_shift (void) const
{
  return static_bit_field_shift_;
}


inline void
ACE_Dynamic_Message_Strategy::static_bit_field_shift (unsigned long ul)
{
  static_bit_field_shift_ = ul;
}


inline unsigned long
ACE_Dynamic_Message_Strategy::dynamic_priority_max (void) const
{
  return dynamic_priority_max_;
}


inline void
ACE_Dynamic_Message_Strategy::dynamic_priority_max (unsigned long ul)
{




  dynamic_priority_max_ = ul;
  pending_shift_ = ACE_Time_Value (0, ul);
}


inline unsigned long
ACE_Dynamic_Message_Strategy::dynamic_priority_offset (void) const
{
  return dynamic_priority_offset_;
}


inline void
ACE_Dynamic_Message_Strategy::dynamic_priority_offset (unsigned long ul)
{





  dynamic_priority_offset_ = ul;
  max_late_ = ACE_Time_Value (0, ul - 1);
  min_pending_ = ACE_Time_Value (0, ul);
}



# 213 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 216 "/usr/local/include/ace/Dynamic_Message_Strategy.h" 2 3
# 20 "/usr/local/include/ace/Message_Queue_T.h" 2 3








# 64 "/usr/local/include/ace/Message_Queue_T.h" 3
template <class _ACE_SYNCH>
class ACE_Message_Queue : public ACE_Message_Queue_Base
{
public:
  friend class ACE_Message_Queue_Iterator<_ACE_SYNCH>;
  friend class ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH>;


  typedef ACE_Message_Queue_Iterator<_ACE_SYNCH>
          ITERATOR;
  typedef ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH>
          REVERSE_ITERATOR;
# 100 "/usr/local/include/ace/Message_Queue_T.h" 3
  ACE_Message_Queue (size_t hwm = ACE_Message_Queue_Base::DEFAULT_HWM,
                     size_t lwm = ACE_Message_Queue_Base::DEFAULT_LWM,
                     ACE_Notification_Strategy *ns = 0);
  virtual int open (size_t hwm = ACE_Message_Queue_Base::DEFAULT_HWM,
                    size_t lwm = ACE_Message_Queue_Base::DEFAULT_LWM,
                    ACE_Notification_Strategy *ns = 0);






  virtual int close (void);


  virtual ~ACE_Message_Queue (void);
# 124 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int flush (void);
# 135 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int flush_i (void);
# 177 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int peek_dequeue_head (ACE_Message_Block *&first_item,
                                 ACE_Time_Value *timeout = 0);
# 198 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_prio (ACE_Message_Block *new_item,
                            ACE_Time_Value *timeout = 0);
# 219 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_deadline (ACE_Message_Block *new_item,
                                ACE_Time_Value *timeout = 0);






  virtual int enqueue (ACE_Message_Block *new_item,
                       ACE_Time_Value *timeout = 0);
# 250 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_tail (ACE_Message_Block *new_item,
                            ACE_Time_Value *timeout = 0);
# 273 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_head (ACE_Message_Block *new_item,
                            ACE_Time_Value *timeout = 0);


  virtual int dequeue (ACE_Message_Block *&first_item,
                       ACE_Time_Value *timeout = 0);
# 294 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_head (ACE_Message_Block *&first_item,
                            ACE_Time_Value *timeout = 0);
# 312 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_prio (ACE_Message_Block *&first_item,
                            ACE_Time_Value *timeout = 0);
# 329 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_tail (ACE_Message_Block *&dequeued,
                            ACE_Time_Value *timeout = 0);
# 346 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_deadline (ACE_Message_Block *&dequeued,
                                ACE_Time_Value *timeout = 0);







  virtual bool is_full (void);

  virtual bool is_empty (void);





  virtual size_t message_bytes (void);





  virtual size_t message_length (void);




  virtual size_t message_count (void);







  virtual void message_bytes (size_t new_size);




  virtual void message_length (size_t new_length);
# 399 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual size_t high_water_mark (void);




  virtual void high_water_mark (size_t hwm);




  virtual size_t low_water_mark (void);





  virtual void low_water_mark (size_t lwm);
# 433 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int deactivate (void);





  virtual int activate (void);
# 448 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int pulse (void);



  virtual int state (void);



  virtual int deactivated (void);
# 473 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int notify (void);


  virtual ACE_Notification_Strategy *notification_strategy (void);


  virtual void notification_strategy (ACE_Notification_Strategy *s);



  virtual typename _ACE_SYNCH::MUTEX &lock (void);


  virtual void dump (void) const;


  struct __Ace {};

protected:







  virtual int enqueue_i (ACE_Message_Block *new_item);


  virtual int enqueue_deadline_i (ACE_Message_Block *new_item);


  virtual int enqueue_tail_i (ACE_Message_Block *new_item);


  virtual int enqueue_head_i (ACE_Message_Block *new_item);



  virtual int dequeue_head_i (ACE_Message_Block *&first_item);



  virtual int dequeue_prio_i (ACE_Message_Block *&dequeued);



  virtual int dequeue_tail_i (ACE_Message_Block *&first_item);



  virtual int dequeue_deadline_i (ACE_Message_Block *&first_item);




  virtual bool is_full_i (void);


  virtual bool is_empty_i (void);
# 552 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int deactivate_i (int pulse = 0);


  virtual int activate_i (void);




  virtual int wait_not_full_cond (ACE_Guard<typename _ACE_SYNCH::MUTEX> &mon,
                                  ACE_Time_Value *timeout);


  virtual int wait_not_empty_cond (ACE_Guard<typename _ACE_SYNCH::MUTEX> &mon,
                                   ACE_Time_Value *timeout);


  virtual int signal_enqueue_waiters (void);


  virtual int signal_dequeue_waiters (void);


  ACE_Message_Block *head_;


  ACE_Message_Block *tail_;


  size_t low_water_mark_;


  size_t high_water_mark_;


  size_t cur_bytes_;


  size_t cur_length_;


  size_t cur_count_;


  ACE_Notification_Strategy *notification_strategy_;



  typename _ACE_SYNCH::MUTEX lock_;


  typename _ACE_SYNCH::CONDITION not_empty_cond_;


  typename _ACE_SYNCH::CONDITION not_full_cond_;






private:


  void operator= (const ACE_Message_Queue<_ACE_SYNCH> &);
  ACE_Message_Queue (const ACE_Message_Queue<_ACE_SYNCH> &);
};


typedef ACE_Message_Queue<ACE_MT_SYNCH> ACE_DEFAULT_MESSAGE_QUEUE_TYPE;







template <class _ACE_SYNCH>
class ACE_Message_Queue_Iterator
{
public:

  ACE_Message_Queue_Iterator (ACE_Message_Queue <_ACE_SYNCH> &queue);




  int next (ACE_Message_Block *&entry);


  int done (void) const;



  int advance (void);


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Message_Queue <_ACE_SYNCH> &queue_;


  ACE_Message_Block *curr_;
};






template <class _ACE_SYNCH>
class ACE_Message_Queue_Reverse_Iterator
{
public:

  ACE_Message_Queue_Reverse_Iterator (ACE_Message_Queue <_ACE_SYNCH> &queue);




  int next (ACE_Message_Block *&entry);


  int done (void) const;



  int advance (void);


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Message_Queue <_ACE_SYNCH> &queue_;


  ACE_Message_Block *curr_;
};
# 766 "/usr/local/include/ace/Message_Queue_T.h" 3
template <class _ACE_SYNCH>
class ACE_Dynamic_Message_Queue : public ACE_Message_Queue<_ACE_SYNCH>
{
public:

  ACE_Dynamic_Message_Queue (ACE_Dynamic_Message_Strategy & message_strategy,
                             size_t hwm = ACE_Message_Queue_Base::DEFAULT_HWM,
                             size_t lwm = ACE_Message_Queue_Base::DEFAULT_LWM,
                             ACE_Notification_Strategy * = 0);


  virtual ~ACE_Dynamic_Message_Queue (void);
# 788 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int remove_messages (ACE_Message_Block *&list_head,
                               ACE_Message_Block *&list_tail,
                               u_int status_flags);






  virtual int dequeue_head (ACE_Message_Block *&first_item,
                            ACE_Time_Value *timeout = 0);


  virtual void dump (void) const;







  virtual int enqueue_tail (ACE_Message_Block *new_item,
                            ACE_Time_Value *timeout = 0);







  virtual int enqueue_head (ACE_Message_Block *new_item,
                            ACE_Time_Value *timeout = 0);



  struct __Ace {};

protected:
# 834 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_i (ACE_Message_Block *new_item);


  virtual int sublist_enqueue_i (ACE_Message_Block *new_item,
                                 const ACE_Time_Value &current_time,
                                 ACE_Message_Block *&sublist_head,
                                 ACE_Message_Block *&sublist_tail,
                                 ACE_Dynamic_Message_Strategy::Priority_Status status);
# 850 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_head_i (ACE_Message_Block *&first_item);



  virtual int refresh_queue (const ACE_Time_Value & current_time);



  virtual int refresh_pending_queue (const ACE_Time_Value & current_time);



  virtual int refresh_late_queue (const ACE_Time_Value & current_time);


  ACE_Message_Block *pending_head_;


  ACE_Message_Block *pending_tail_;


  ACE_Message_Block *late_head_;


  ACE_Message_Block *late_tail_;


  ACE_Message_Block *beyond_late_head_;


  ACE_Message_Block *beyond_late_tail_;


  ACE_Dynamic_Message_Strategy &message_strategy_;

private:


  void operator= (const ACE_Dynamic_Message_Queue<_ACE_SYNCH> &);
  ACE_Dynamic_Message_Queue (const ACE_Dynamic_Message_Queue<_ACE_SYNCH> &);





  virtual int peek_dequeue_head (ACE_Message_Block *&first_item,
                                 ACE_Time_Value *timeout = 0);

};
# 914 "/usr/local/include/ace/Message_Queue_T.h" 3
template <class _ACE_SYNCH>
class ACE_Message_Queue_Factory
{
public:

  static ACE_Message_Queue<_ACE_SYNCH> *
    create_static_message_queue (size_t hwm = ACE_Message_Queue_Base::DEFAULT_HWM,
                                 size_t lwm = ACE_Message_Queue_Base::DEFAULT_LWM,
                                 ACE_Notification_Strategy * = 0);


  static ACE_Dynamic_Message_Queue<_ACE_SYNCH> *
    create_deadline_message_queue (size_t hwm = ACE_Message_Queue_Base::DEFAULT_HWM,
                                   size_t lwm = ACE_Message_Queue_Base::DEFAULT_LWM,
                                   ACE_Notification_Strategy * = 0,
                                   u_long static_bit_field_mask = 0x3FFUL,
                                   u_long static_bit_field_shift = 10,
                                   u_long dynamic_priority_max = 0x3FFFFFUL,
                                   u_long dynamic_priority_offset = 0x200000UL);


  static ACE_Dynamic_Message_Queue<_ACE_SYNCH> *
    create_laxity_message_queue (size_t hwm = ACE_Message_Queue_Base::DEFAULT_HWM,
                                 size_t lwm = ACE_Message_Queue_Base::DEFAULT_LWM,
                                 ACE_Notification_Strategy * = 0,
                                 u_long static_bit_field_mask = 0x3FFUL,
                                 u_long static_bit_field_shift = 10,
                                 u_long dynamic_priority_max = 0x3FFFFFUL,
                                 u_long dynamic_priority_offset = 0x200000UL);
# 961 "/usr/local/include/ace/Message_Queue_T.h" 3
};


template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> class ACE_Message_Queue_Ex_Iterator;
template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> class ACE_Message_Queue_Ex_Reverse_Iterator;
# 984 "/usr/local/include/ace/Message_Queue_T.h" 3
template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
class ACE_Message_Queue_Ex
{
public:

  enum
  {

    DEFAULT_PRIORITY = 0
  };

  friend class ACE_Message_Queue_Ex_Iterator <ACE_MESSAGE_TYPE, _ACE_SYNCH>;
  friend class ACE_Message_Queue_Ex_Reverse_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>;


  typedef ACE_Message_Queue_Ex_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>
          ITERATOR;
  typedef ACE_Message_Queue_Ex_Reverse_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>
          REVERSE_ITERATOR;
# 1027 "/usr/local/include/ace/Message_Queue_T.h" 3
  ACE_Message_Queue_Ex (size_t high_water_mark = ACE_Message_Queue_Base::DEFAULT_HWM,
                        size_t low_water_mark = ACE_Message_Queue_Base::DEFAULT_LWM,
                        ACE_Notification_Strategy * ns = 0);
  virtual int open (size_t hwm = ACE_Message_Queue_Base::DEFAULT_HWM,
                    size_t lwm = ACE_Message_Queue_Base::DEFAULT_LWM,
                    ACE_Notification_Strategy * = 0);






  virtual int close (void);


  virtual ~ACE_Message_Queue_Ex (void);
# 1051 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int flush (void);
# 1062 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int flush_i (void);
# 1104 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int peek_dequeue_head (ACE_MESSAGE_TYPE *&first_item,
                                 ACE_Time_Value *timeout = 0);
# 1124 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_prio (ACE_MESSAGE_TYPE *new_item,
                            ACE_Time_Value *timeout = 0,
                            unsigned long priority = DEFAULT_PRIORITY);





  virtual int enqueue_deadline (ACE_MESSAGE_TYPE *new_item,
                                ACE_Time_Value *timeout = 0);






  virtual int enqueue (ACE_MESSAGE_TYPE *new_item,
                       ACE_Time_Value *timeout = 0);
# 1156 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_tail (ACE_MESSAGE_TYPE *new_item,
                            ACE_Time_Value *timeout = 0);
# 1172 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_head (ACE_MESSAGE_TYPE *new_item,
                            ACE_Time_Value *timeout = 0);


  virtual int dequeue (ACE_MESSAGE_TYPE *&first_item,
                       ACE_Time_Value *timeout = 0);
# 1192 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_head (ACE_MESSAGE_TYPE *&first_item,
                            ACE_Time_Value *timeout = 0);
# 1210 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_prio (ACE_MESSAGE_TYPE *&dequeued,
                            ACE_Time_Value *timeout = 0);
# 1226 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int dequeue_tail (ACE_MESSAGE_TYPE *&dequeued,
                            ACE_Time_Value *timeout = 0);





  virtual int dequeue_deadline (ACE_MESSAGE_TYPE *&dequeued,
                                ACE_Time_Value *timeout = 0);







  virtual bool is_full (void);


  virtual bool is_empty (void);





  virtual size_t message_bytes (void);




  virtual size_t message_length (void);



  virtual size_t message_count (void);







  virtual void message_bytes (size_t new_size);




  virtual void message_length (size_t new_length);
# 1284 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual size_t high_water_mark (void);




  virtual void high_water_mark (size_t hwm);




  virtual size_t low_water_mark (void);





  virtual void low_water_mark (size_t lwm);
# 1318 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int deactivate (void);





  virtual int activate (void);
# 1333 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int pulse (void);



  virtual int state (void);



  virtual int deactivated (void);
# 1358 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int notify (void);


  virtual ACE_Notification_Strategy *notification_strategy (void);


  virtual void notification_strategy (ACE_Notification_Strategy *s);



  virtual typename _ACE_SYNCH::MUTEX &lock (void);


  virtual void dump (void) const;


  struct __Ace {};

protected:

  ACE_Message_Queue<_ACE_SYNCH> queue_;
};






template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
class ACE_Message_Queue_Ex_Iterator
{
public:

  ACE_Message_Queue_Ex_Iterator (ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH> & queue);




  int next (ACE_MESSAGE_TYPE *&entry);


  int done (void) const;



  int advance (void);


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Message_Queue_Iterator<_ACE_SYNCH> iter_;
};






template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
class ACE_Message_Queue_Ex_Reverse_Iterator
{
public:

  ACE_Message_Queue_Ex_Reverse_Iterator (ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH> & queue);




  int next (ACE_MESSAGE_TYPE *&entry);


  int done (void) const;



  int advance (void);


  void dump (void) const;


  struct __Ace {};

private:

  ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH> iter_;
};
# 1469 "/usr/local/include/ace/Message_Queue_T.h" 3
template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
class ACE_Message_Queue_Ex_N : public ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>
{
public:
# 1489 "/usr/local/include/ace/Message_Queue_T.h" 3
  ACE_Message_Queue_Ex_N (size_t high_water_mark = ACE_Message_Queue_Base::DEFAULT_HWM,
                          size_t low_water_mark = ACE_Message_Queue_Base::DEFAULT_LWM,
                          ACE_Notification_Strategy * ns = 0);


  virtual ~ACE_Message_Queue_Ex_N (void);
# 1516 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_head (ACE_MESSAGE_TYPE *new_item, ACE_Time_Value *tv = 0);
# 1538 "/usr/local/include/ace/Message_Queue_T.h" 3
  virtual int enqueue_tail (ACE_MESSAGE_TYPE *new_item, ACE_Time_Value *tv = 0);


  struct __Ace {};

protected:




  ACE_Message_Block *wrap_with_mbs_i (ACE_MESSAGE_TYPE *new_item);
};




# 1 "/usr/local/include/ace/Message_Queue_T.cpp" 1 3
# 20 "/usr/local/include/ace/Message_Queue_T.cpp" 3
# 1 "/usr/local/include/ace/Notification_Strategy.h" 1 3
# 14 "/usr/local/include/ace/Notification_Strategy.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 15 "/usr/local/include/ace/Notification_Strategy.h" 2 3










class ACE_Reactor;
# 36 "/usr/local/include/ace/Notification_Strategy.h" 3
class ACE_Notification_Strategy
{
public:

  ACE_Notification_Strategy (ACE_Event_Handler *eh, ACE_Reactor_Mask mask);


  virtual ~ACE_Notification_Strategy (void);

  virtual int notify (void) = 0;
  virtual int notify (ACE_Event_Handler *, ACE_Reactor_Mask mask) = 0;


  ACE_Event_Handler *event_handler (void);


  void event_handler (ACE_Event_Handler *eh);


  ACE_Reactor_Mask mask (void) const;


  void mask (ACE_Reactor_Mask m);

protected:

  ACE_Event_Handler *eh_;


  ACE_Reactor_Mask mask_;
};




# 1 "/usr/local/include/ace/Notification_Strategy.inl" 1 3






inline ACE_Event_Handler *
ACE_Notification_Strategy::event_handler (void)
{
  return eh_;
}

inline void
ACE_Notification_Strategy::event_handler (ACE_Event_Handler *eh)
{
  this->eh_ = eh;
}

inline ACE_Reactor_Mask
ACE_Notification_Strategy::mask (void) const
{
  return mask_;
}

inline void
ACE_Notification_Strategy::mask (ACE_Reactor_Mask m)
{
  this->mask_ = m;
}


# 72 "/usr/local/include/ace/Notification_Strategy.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 75 "/usr/local/include/ace/Notification_Strategy.h" 2 3
# 21 "/usr/local/include/ace/Message_Queue_T.cpp" 2 3
# 29 "/usr/local/include/ace/Message_Queue_T.cpp" 3







template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dump (void) const
{





}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::message_bytes (size_t new_value)
{
  ;

  this->queue_.message_bytes (new_value);
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::message_length (size_t new_value)
{
  ;

  this->queue_.message_length (new_value);
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::ACE_Message_Queue_Ex (size_t hwm,
                                                                             size_t lwm,
                                                                             ACE_Notification_Strategy *ns)
{
  ;

  if (this->queue_.open (hwm, lwm, ns) == -1)
    do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 71, -1, __ace_error); ace___->log (LM_ERROR, "ACE_Message_Queue_Ex"); } while (0);

}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::~ACE_Message_Queue_Ex (void)
{
  ;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::open (size_t hwm,
                                                             size_t lwm,
                                                             ACE_Notification_Strategy *ns)
{
  ;

  return this->queue_.open (hwm, lwm, ns);
}



template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::close (void)
{
  ;

  return this->queue_.close ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::flush (void)
{
  ;

  return this->queue_.flush ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::flush_i (void)
{
  ;

  return this->queue_.flush_i ();
}



template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::peek_dequeue_head (ACE_MESSAGE_TYPE *&first_item,
                                                                          ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  int const cur_count = this->queue_.peek_dequeue_head (mb, timeout);

  if (cur_count != -1)
    first_item = reinterpret_cast<ACE_MESSAGE_TYPE *> (mb->base ());

  return cur_count;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::enqueue_head (ACE_MESSAGE_TYPE *new_item,
                                                                     ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  do { mb = new (::std::nothrow) ACE_Message_Block ((char *) new_item, sizeof (*new_item), ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::DEFAULT_PRIORITY); if (mb == 0) { (*__errno_location ()) = 12; return -1; } } while (0);





  int const result = this->queue_.enqueue_head (mb, timeout);
  if (result == -1)

    mb->release ();
  return result;
}





template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::enqueue (ACE_MESSAGE_TYPE *new_item,
                                                                ACE_Time_Value *timeout)
{
  ;

  return this->enqueue_prio (new_item, timeout);
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::enqueue_prio (ACE_MESSAGE_TYPE *new_item,
                                                                     ACE_Time_Value *timeout,
                                                                     unsigned long priority)
{
  ;

  ACE_Message_Block *mb = 0;

  do { mb = new (::std::nothrow) ACE_Message_Block ((char *) new_item, sizeof (*new_item), priority); if (mb == 0) { (*__errno_location ()) = 12; return -1; } } while (0);





  int const result = this->queue_.enqueue_prio (mb, timeout);
  if (result == -1)

    mb->release ();

  return result;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::enqueue_deadline (ACE_MESSAGE_TYPE *new_item,
                                                                         ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  do { mb = new (::std::nothrow) ACE_Message_Block ((char *) new_item, sizeof (*new_item), ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::DEFAULT_PRIORITY ); if (mb == 0) { (*__errno_location ()) = 12; return -1; } } while (0);





  int const result = this->queue_.enqueue_deadline (mb, timeout);
  if (result == -1)

    mb->release ();

  return result;
}




template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::enqueue_tail (ACE_MESSAGE_TYPE *new_item,
                                                                     ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  do { mb = new (::std::nothrow) ACE_Message_Block ((char *) new_item, sizeof (*new_item), ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::DEFAULT_PRIORITY); if (mb == 0) { (*__errno_location ()) = 12; return -1; } } while (0);





  int const result = this->queue_.enqueue_tail (mb, timeout);
  if (result == -1)

    mb->release ();
  return result;
}





template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dequeue_head (ACE_MESSAGE_TYPE *&first_item,
                                                                     ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  int const cur_count = this->queue_.dequeue_head (mb, timeout);


  if (cur_count != -1)
    {
      first_item = reinterpret_cast<ACE_MESSAGE_TYPE *> (mb->base ());

      mb->release ();
    }

  return cur_count;
}





template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dequeue_prio (ACE_MESSAGE_TYPE *&dequeued,
                                                                     ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  int const cur_count = this->queue_.dequeue_prio (mb, timeout);


  if (cur_count != -1)
    {
      dequeued = reinterpret_cast<ACE_MESSAGE_TYPE *> (mb->base ());

      mb->release ();
    }

  return cur_count;
}





template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dequeue_tail (ACE_MESSAGE_TYPE *&dequeued,
                                                                     ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  int const cur_count = this->queue_.dequeue_tail (mb, timeout);


  if (cur_count != -1)
    {
      dequeued = reinterpret_cast<ACE_MESSAGE_TYPE *> (mb->base ());

      mb->release ();
    }

  return cur_count;
}





template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dequeue_deadline (ACE_MESSAGE_TYPE *&dequeued,
                                                                         ACE_Time_Value *timeout)
{
  ;

  ACE_Message_Block *mb = 0;

  int const cur_count = this->queue_.dequeue_deadline (mb, timeout);


  if (cur_count != -1)
    {
      dequeued = reinterpret_cast<ACE_MESSAGE_TYPE *> (mb->base ());

      mb->release ();
    }

  return cur_count;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::notify (void)
{
  ;

  return this->queue_.notify ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
ACE_Message_Queue_Ex_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::
ACE_Message_Queue_Ex_Iterator (ACE_Message_Queue_Ex <ACE_MESSAGE_TYPE, _ACE_SYNCH> & queue)
: iter_ (queue.queue_)
{

}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::
next (ACE_MESSAGE_TYPE *&entry)
{
  ACE_Message_Block * mb = 0;
  int retval = this->iter_.next (mb);

  if (retval == 1)
    entry = reinterpret_cast<ACE_MESSAGE_TYPE *> (mb->base ());

  return retval;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::done (void) const
{
  return this->iter_.done ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::advance (void)
{
  return this->iter_.advance ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dump (void) const
{
  this->iter_.dump ();
}



template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
ACE_Message_Queue_Ex_Reverse_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::
ACE_Message_Queue_Ex_Reverse_Iterator (ACE_Message_Queue_Ex <ACE_MESSAGE_TYPE, _ACE_SYNCH> & queue)
: iter_ (queue.queue_)
{

}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_Reverse_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::
next (ACE_MESSAGE_TYPE *&entry)
{
  ACE_Message_Block * mb = 0;
  int retval = this->iter_.next (mb);

  if (retval == 1)
    entry = reinterpret_cast<ACE_MESSAGE_TYPE *> (mb->base ());

  return retval;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_Reverse_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::done (void) const
{
  return this->iter_.done ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_Reverse_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::advance (void)
{
  return this->iter_.advance ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex_Reverse_Iterator<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dump (void) const
{
  this->iter_.dump ();
}



template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
ACE_Message_Queue_Ex_N<ACE_MESSAGE_TYPE, _ACE_SYNCH>::ACE_Message_Queue_Ex_N
  (size_t high_water_mark,
   size_t low_water_mark,
   ACE_Notification_Strategy *ns):
    ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH> (high_water_mark,
                                                           low_water_mark,
                                                           ns)
{
  ;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH>
ACE_Message_Queue_Ex_N<ACE_MESSAGE_TYPE, _ACE_SYNCH>::~ACE_Message_Queue_Ex_N (void)
{
  ;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_N<ACE_MESSAGE_TYPE, _ACE_SYNCH>::enqueue_head
  (ACE_MESSAGE_TYPE *new_item,
   ACE_Time_Value *timeout)
{
  ;



  ACE_Message_Block *mb = this->wrap_with_mbs_i (new_item);
  if (0 == mb)
    {
      return -1;
    }

  int result = this->queue_.enqueue_head (mb, timeout);
  if (-1 == result)
    {

      mb->release ();
    }
  return result;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex_N<ACE_MESSAGE_TYPE, _ACE_SYNCH>::enqueue_tail
  (ACE_MESSAGE_TYPE *new_item,
   ACE_Time_Value *timeout)
{
  ;



  ACE_Message_Block *mb = this->wrap_with_mbs_i (new_item);
  if (0 == mb)
    {
      return -1;
    }

  int result = this->queue_.enqueue_tail (mb, timeout);
  if (-1 == result)
    {

      mb->release ();
    }
  return result;
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> ACE_Message_Block *
ACE_Message_Queue_Ex_N<ACE_MESSAGE_TYPE, _ACE_SYNCH>::wrap_with_mbs_i
  (ACE_MESSAGE_TYPE *new_item)
{
  ;


  ACE_Message_Block *mb_head = 0;

  do { mb_head = new (::std::nothrow) ACE_Message_Block ((char *) new_item, sizeof (*new_item), ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::DEFAULT_PRIORITY); if (mb_head == 0) { (*__errno_location ()) = 12; return 0; } } while (0);






  ACE_Message_Block *mb_tail = mb_head;


  for (ACE_MESSAGE_TYPE *pobj = new_item->next (); pobj; pobj = pobj->next ())
    {
      ACE_Message_Block *mb_temp = 0;
      do { mb_temp = new(::std::nothrow) ACE_Message_Block ((char *) pobj, sizeof (*pobj), ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::DEFAULT_PRIORITY); if (mb_temp == 0) { (*__errno_location ()) = 12; } } while (0);



      if (mb_temp == 0)
        {
          mb_head->release ();
          mb_head = 0;
          break;
        }

      mb_tail->next (mb_temp);
      mb_tail = mb_temp;
    }

  return mb_head;
}



template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::dequeue (ACE_MESSAGE_TYPE *&first_item,
                                                                ACE_Time_Value *timeout)
{
  ;

  return this->dequeue_head (first_item, timeout);
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> ACE_Notification_Strategy *
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::notification_strategy (void)
{
  ;

  return this->queue_.notification_strategy ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::notification_strategy (ACE_Notification_Strategy *s)
{
  ;

  this->queue_.notification_strategy (s);
}



template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> bool
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::is_empty (void)
{
  ;

  return this->queue_.is_empty ();
}



template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> bool
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::is_full (void)
{
  ;

  return this->queue_.is_full ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> size_t
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::high_water_mark (void)
{
  ;

  return this->queue_.high_water_mark ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::high_water_mark (size_t hwm)
{
  ;

  this->queue_.high_water_mark (hwm);
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> size_t
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::low_water_mark (void)
{
  ;

  return this->queue_.low_water_mark ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> void
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::low_water_mark (size_t lwm)
{
  ;

  this->queue_.low_water_mark (lwm);
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> size_t
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::message_bytes (void)
{
  ;

  return this->queue_.message_bytes ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> size_t
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::message_length (void)
{
  ;

  return this->queue_.message_length ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> size_t
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::message_count (void)
{
  ;

  return this->queue_.message_count ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::deactivate (void)
{
  ;

  return this->queue_.deactivate ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::activate (void)
{
  ;

  return this->queue_.activate ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::pulse (void)
{
  ;

  return this->queue_.pulse ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::deactivated (void)
{
  ;

  return this->queue_.deactivated ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> int
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::state (void)
{
  ;

  return this->queue_.state ();
}

template <class ACE_MESSAGE_TYPE, class _ACE_SYNCH> typename _ACE_SYNCH::MUTEX &
ACE_Message_Queue_Ex<ACE_MESSAGE_TYPE, _ACE_SYNCH>::lock (void)
{
  return this->queue_.lock ();
}

template <class _ACE_SYNCH>
ACE_Message_Queue_Iterator<_ACE_SYNCH>::ACE_Message_Queue_Iterator (ACE_Message_Queue <_ACE_SYNCH> &q)
  : queue_ (q),
    curr_ (q.head_)
{
}

template <class _ACE_SYNCH> int
ACE_Message_Queue_Iterator<_ACE_SYNCH>::next (ACE_Message_Block *&entry)
{
  ACE_Read_Guard< typename _ACE_SYNCH::MUTEX > m (this->queue_.lock_); if (m.locked () == 0) return -1;

  if (this->curr_ != 0)
    {
      entry = this->curr_;
      return 1;
    }

  return 0;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue_Iterator<_ACE_SYNCH>::done (void) const
{
  ACE_Read_Guard< typename _ACE_SYNCH::MUTEX > m (this->queue_.lock_); if (m.locked () == 0) return -1;

  return this->curr_ == 0;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue_Iterator<_ACE_SYNCH>::advance (void)
{
  ACE_Read_Guard< typename _ACE_SYNCH::MUTEX > m (this->queue_.lock_); if (m.locked () == 0) return -1;

  if (this->curr_)
    this->curr_ = this->curr_->next ();
  return this->curr_ != 0;
}

template <class _ACE_SYNCH> void
ACE_Message_Queue_Iterator<_ACE_SYNCH>::dump (void) const
{


}



template <class _ACE_SYNCH>
ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH>::ACE_Message_Queue_Reverse_Iterator (ACE_Message_Queue <_ACE_SYNCH> &q)
  : queue_ (q),
    curr_ (queue_.tail_)
{
}

template <class _ACE_SYNCH> int
ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH>::next (ACE_Message_Block *&entry)
{
  ACE_Read_Guard< typename _ACE_SYNCH::MUTEX > m (this->queue_.lock_); if (m.locked () == 0) return -1;

  if (this->curr_ != 0)
    {
      entry = this->curr_;
      return 1;
    }

  return 0;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH>::done (void) const
{
  ACE_Read_Guard< typename _ACE_SYNCH::MUTEX > m (this->queue_.lock_); if (m.locked () == 0) return -1;

  return this->curr_ == 0;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH>::advance (void)
{
  ACE_Read_Guard< typename _ACE_SYNCH::MUTEX > m (this->queue_.lock_); if (m.locked () == 0) return -1;

  if (this->curr_)
    this->curr_ = this->curr_->prev ();
  return this->curr_ != 0;
}

template <class _ACE_SYNCH> void
ACE_Message_Queue_Reverse_Iterator<_ACE_SYNCH>::dump (void) const
{


}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue (ACE_Message_Block *&first_item,
                                           ACE_Time_Value *timeout)
{
  ;
  return this->dequeue_head (first_item, timeout);
}

template <class _ACE_SYNCH> ACE_Notification_Strategy *
ACE_Message_Queue<_ACE_SYNCH>::notification_strategy (void)
{
  ;

  return this->notification_strategy_;
}

template <class _ACE_SYNCH> void
ACE_Message_Queue<_ACE_SYNCH>::notification_strategy (ACE_Notification_Strategy *s)
{
  ;

  this->notification_strategy_ = s;
}



template <class _ACE_SYNCH> bool
ACE_Message_Queue<_ACE_SYNCH>::is_empty_i (void)
{
  ;
  return this->tail_ == 0;
}



template <class _ACE_SYNCH> bool
ACE_Message_Queue<_ACE_SYNCH>::is_full_i (void)
{
  ;
  return this->cur_bytes_ >= this->high_water_mark_;
}



template <class _ACE_SYNCH> bool
ACE_Message_Queue<_ACE_SYNCH>::is_empty (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return false; };

  return this->is_empty_i ();
}



template <class _ACE_SYNCH> bool
ACE_Message_Queue<_ACE_SYNCH>::is_full (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return false; };

  return this->is_full_i ();
}

template <class _ACE_SYNCH> size_t
ACE_Message_Queue<_ACE_SYNCH>::high_water_mark (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return 0; };

  return this->high_water_mark_;
}

template <class _ACE_SYNCH> void
ACE_Message_Queue<_ACE_SYNCH>::high_water_mark (size_t hwm)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return; };

  this->high_water_mark_ = hwm;
}

template <class _ACE_SYNCH> size_t
ACE_Message_Queue<_ACE_SYNCH>::low_water_mark (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return 0; };

  return this->low_water_mark_;
}

template <class _ACE_SYNCH> void
ACE_Message_Queue<_ACE_SYNCH>::low_water_mark (size_t lwm)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return; };

  this->low_water_mark_ = lwm;
}

template <class _ACE_SYNCH> size_t
ACE_Message_Queue<_ACE_SYNCH>::message_bytes (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return 0; };

  return this->cur_bytes_;
}

template <class _ACE_SYNCH> size_t
ACE_Message_Queue<_ACE_SYNCH>::message_length (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return 0; };

  return this->cur_length_;
}

template <class _ACE_SYNCH> size_t
ACE_Message_Queue<_ACE_SYNCH>::message_count (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return 0; };

  return this->cur_count_;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::deactivate ()
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  return this->deactivate_i (0);
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::activate (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  return this->activate_i ();
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::pulse ()
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  return this->deactivate_i (1);
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::deactivated (void)
{
  ;

  return this->state_ == ACE_Message_Queue_Base::DEACTIVATED;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::state (void)
{
  ;

  return this->state_;
}

template <class _ACE_SYNCH> typename _ACE_SYNCH::MUTEX &
ACE_Message_Queue<_ACE_SYNCH>::lock (void)
{
  return this->lock_;
}

template <class _ACE_SYNCH> void
ACE_Message_Queue<_ACE_SYNCH>::dump (void) const
{
# 994 "/usr/local/include/ace/Message_Queue_T.cpp" 3
}

template <class _ACE_SYNCH> void
ACE_Message_Queue<_ACE_SYNCH>::message_bytes (size_t new_value)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return; };

  this->cur_bytes_ = new_value;
}

template <class _ACE_SYNCH> void
ACE_Message_Queue<_ACE_SYNCH>::message_length (size_t new_value)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return; };

  this->cur_length_ = new_value;
}

template <class _ACE_SYNCH>
ACE_Message_Queue<_ACE_SYNCH>::ACE_Message_Queue (size_t hwm,
                                                     size_t lwm,
                                                     ACE_Notification_Strategy *ns)
  : not_empty_cond_ (lock_)
  , not_full_cond_ (lock_)
{
  ;

  if (this->open (hwm, lwm, ns) == -1)
    do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 1025, -1, __ace_error); ace___->log (LM_ERROR, "open"); } while (0);
# 1048 "/usr/local/include/ace/Message_Queue_T.cpp" 3
}

template <class _ACE_SYNCH>
ACE_Message_Queue<_ACE_SYNCH>::~ACE_Message_Queue (void)
{
  ;
  if (this->head_ != 0 && this->close () == -1)
    do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 1056, -1, __ace_error); ace___->log (LM_ERROR, "close"); } while (0);






}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::flush_i (void)
{
  int number_flushed = 0;



  for (this->tail_ = 0; this->head_ != 0; )
    {
      ++number_flushed;

      size_t mb_bytes = 0;
      size_t mb_length = 0;
      this->head_->total_size_and_length (mb_bytes,
                                          mb_length);

      this->cur_bytes_ -= mb_bytes;
      this->cur_length_ -= mb_length;
      --this->cur_count_;

      ACE_Message_Block *temp = this->head_;
      this->head_ = this->head_->next ();



      temp->release ();
    }
# 1100 "/usr/local/include/ace/Message_Queue_T.cpp" 3
  return number_flushed;
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::open (size_t hwm,
                                        size_t lwm,
                                        ACE_Notification_Strategy *ns)
{
  ;
  this->high_water_mark_ = hwm;
  this->low_water_mark_ = lwm;
  this->state_ = ACE_Message_Queue_Base::ACTIVATED;
  this->cur_bytes_ = 0;
  this->cur_length_ = 0;
  this->cur_count_ = 0;
  this->tail_ = 0;
  this->head_ = 0;
  this->notification_strategy_ = ns;
  return 0;
}




template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::deactivate_i (int pulse)
{
  ;
  int const previous_state = this->state_;

  if (previous_state != ACE_Message_Queue_Base::DEACTIVATED)
    {

      this->not_empty_cond_.broadcast ();
      this->not_full_cond_.broadcast ();

      if (pulse)
        this->state_ = ACE_Message_Queue_Base::PULSED;
      else
        this->state_ = ACE_Message_Queue_Base::DEACTIVATED;
    }

  return previous_state;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::activate_i (void)
{
  ;
  int const previous_state = this->state_;
  this->state_ = ACE_Message_Queue_Base::ACTIVATED;
  return previous_state;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::flush (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };


  return this->flush_i ();
}



template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::close (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };



  this->deactivate_i ();


  return this->flush_i ();
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::signal_enqueue_waiters (void)
{
  if (this->not_full_cond_.signal () != 0)
    return -1;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::signal_dequeue_waiters (void)
{

  if (this->not_empty_cond_.signal () != 0)
    return -1;
  return 0;
}




template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_tail_i (ACE_Message_Block *new_item)
{
  ;

  if (new_item == 0)
    return -1;






  ACE_Message_Block *seq_tail = new_item;
  ++this->cur_count_;
  new_item->total_size_and_length (this->cur_bytes_,
                                   this->cur_length_);
  while (seq_tail->next () != 0)
    {
      seq_tail->next ()->prev (seq_tail);
      seq_tail = seq_tail->next ();
      ++this->cur_count_;
      seq_tail->total_size_and_length (this->cur_bytes_,
                                       this->cur_length_);
    }


  if (this->tail_ == 0)
    {
      this->head_ = new_item;
      this->tail_ = seq_tail;

      new_item->prev (0);
    }

  else
    {

      this->tail_->next (new_item);
      new_item->prev (this->tail_);
      this->tail_ = seq_tail;
    }

  if (this->signal_dequeue_waiters () == -1)
    return -1;
  else
    return ACE_Utils::truncate_cast<int> (this->cur_count_);
}



template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_head_i (ACE_Message_Block *new_item)
{
  ;

  if (new_item == 0)
    return -1;






  ACE_Message_Block *seq_tail = new_item;
  ++this->cur_count_;
  new_item->total_size_and_length (this->cur_bytes_,
                                   this->cur_length_);
  while (seq_tail->next () != 0)
    {
      seq_tail->next ()->prev (seq_tail);
      seq_tail = seq_tail->next ();
      ++this->cur_count_;
      seq_tail->total_size_and_length (this->cur_bytes_,
                                       this->cur_length_);
    }

  new_item->prev (0);
  seq_tail->next (this->head_);

  if (this->head_ != 0)
    this->head_->prev (seq_tail);
  else
    this->tail_ = seq_tail;

  this->head_ = new_item;

  if (this->signal_dequeue_waiters () == -1)
    return -1;
  else
    return ACE_Utils::truncate_cast<int> (this->cur_count_);
}




template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_i (ACE_Message_Block *new_item)
{
  ;

  if (new_item == 0)
    return -1;





  new_item->next (0);

  if (this->head_ == 0)


    return this->enqueue_head_i (new_item);
  else
    {
      ACE_Message_Block *temp = 0;





      for (temp = this->tail_;
           temp != 0;
           temp = temp->prev ())
        if (temp->msg_priority () >= new_item->msg_priority ())


          break;

      if (temp == 0)



        return this->enqueue_head_i (new_item);
      else if (temp->next () == 0)



        return this->enqueue_tail_i (new_item);
      else
        {




          new_item->prev (temp);
          new_item->next (temp->next ());
          temp->next ()->prev (new_item);
          temp->next (new_item);
        }
    }


  new_item->total_size_and_length (this->cur_bytes_,
                                   this->cur_length_);
  ++this->cur_count_;

  if (this->signal_dequeue_waiters () == -1)
    return -1;
  else
    return ACE_Utils::truncate_cast<int> (this->cur_count_);
}




template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_deadline_i (ACE_Message_Block *new_item)
{
# 1434 "/usr/local/include/ace/Message_Queue_T.cpp" 3
  return this->enqueue_tail_i (new_item);

}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_head_i (ACE_Message_Block *&first_item)
{
  if (this->head_ ==0)
    do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 1448, -1, __ace_error); ace___->log (LM_ERROR, "Attempting to dequeue from empty queue"); return -1; } while (0);


  ;
  first_item = this->head_;
  this->head_ = this->head_->next ();

  if (this->head_ == 0)
    this->tail_ = 0;
  else

    this->head_->prev (0);

  size_t mb_bytes = 0;
  size_t mb_length = 0;
  first_item->total_size_and_length (mb_bytes,
                                     mb_length);

  this->cur_bytes_ -= mb_bytes;
  this->cur_length_ -= mb_length;
  --this->cur_count_;

  if (this->cur_count_ == 0 && this->head_ == this->tail_)
    this->head_ = this->tail_ = 0;


  first_item->prev (0);
  first_item->next (0);







  if (this->cur_bytes_ <= this->low_water_mark_
      && this->signal_enqueue_waiters () == -1)
    return -1;
  else
    return ACE_Utils::truncate_cast<int> (this->cur_count_);
}






template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_prio_i (ACE_Message_Block *&dequeued)
{
  ;

  if (this->head_ == 0)
    return -1;



  ACE_Message_Block *chosen = 0;
  u_long priority = (9223372036854775807L * 2UL + 1UL);

  for (ACE_Message_Block *temp = this->tail_;
       temp != 0;
       temp = temp->prev ())
    {


      if (temp->msg_priority () <= priority)
        {
          priority = temp->msg_priority ();
          chosen = temp;
        }
    }



  if (chosen == 0)
    chosen = this->head_;



  if (chosen->prev () == 0)
    this->head_ = chosen->next ();
  else
    chosen->prev ()->next (chosen->next ());

  if (chosen->next () == 0)
    this->tail_ = chosen->prev ();
  else
    chosen->next ()->prev (chosen->prev ());


  dequeued = chosen;

  size_t mb_bytes = 0;
  size_t mb_length = 0;
  dequeued->total_size_and_length (mb_bytes,
                                   mb_length);

  this->cur_bytes_ -= mb_bytes;
  this->cur_length_ -= mb_length;
  --this->cur_count_;

  if (this->cur_count_ == 0 && this->head_ == this->tail_)
    this->head_ = this->tail_ = 0;


  dequeued->prev (0);
  dequeued->next (0);



  if (this->cur_bytes_ <= this->low_water_mark_
      && this->signal_enqueue_waiters () == -1)
    return -1;
  else
    return ACE_Utils::truncate_cast<int> (this->cur_count_);
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_tail_i (ACE_Message_Block *&dequeued)
{
  if (this->head_ == 0)
    do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 1574, -1, __ace_error); ace___->log (LM_ERROR, "Attempting to dequeue from empty queue"); return -1; } while (0);


  ;
  dequeued = this->tail_;
  if (this->tail_->prev () == 0)
    {
      this->head_ = 0;
      this->tail_ = 0;
    }
  else
    {
      this->tail_->prev ()->next (0);
      this->tail_ = this->tail_->prev ();
    }

  size_t mb_bytes = 0;
  size_t mb_length = 0;
  dequeued->total_size_and_length (mb_bytes,
                                   mb_length);

  this->cur_bytes_ -= mb_bytes;
  this->cur_length_ -= mb_length;
  --this->cur_count_;

  if (this->cur_count_ == 0 && this->head_ == this->tail_)
    this->head_ = this->tail_ = 0;


  dequeued->prev (0);
  dequeued->next (0);



  if (this->cur_bytes_ <= this->low_water_mark_
      && this->signal_enqueue_waiters () == -1)
    return -1;
  else
    return ACE_Utils::truncate_cast<int> (this->cur_count_);
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_deadline_i (ACE_Message_Block *&dequeued)
{
# 1681 "/usr/local/include/ace/Message_Queue_T.cpp" 3
  return this->dequeue_head_i (dequeued);

}



template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::peek_dequeue_head (ACE_Message_Block *&first_item,
                                                     ACE_Time_Value *timeout)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
    {
      (*__errno_location ()) = 108;
      return -1;
    }



  if (this->wait_not_empty_cond (ace_mon, timeout) == -1)
    return -1;

  first_item = this->head_;
  return ACE_Utils::truncate_cast<int> (this->cur_count_);
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::wait_not_full_cond (ACE_Guard<typename _ACE_SYNCH::MUTEX> &,
                                                      ACE_Time_Value *timeout)
{
  int result = 0;



  while (this->is_full_i ())
    {
      if (this->not_full_cond_.wait (timeout) == -1)
        {
          if ((*__errno_location ()) == 62)
            (*__errno_location ()) = 11;
          result = -1;
          break;
        }
      if (this->state_ != ACE_Message_Queue_Base::ACTIVATED)
        {
          (*__errno_location ()) = 108;
          result = -1;
          break;
        }
    }
  return result;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::wait_not_empty_cond
    (ACE_Guard<typename _ACE_SYNCH::MUTEX> &, ACE_Time_Value *timeout)
{
  int result = 0;



  while (this->is_empty_i ())
    {
      if (this->not_empty_cond_.wait (timeout) == -1)
        {
          if ((*__errno_location ()) == 62)
            (*__errno_location ()) = 11;
          result = -1;
          break;
        }
      if (this->state_ != ACE_Message_Queue_Base::ACTIVATED)
        {
          (*__errno_location ()) = 108;
          result = -1;
          break;
        }
    }
  return result;
}




template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_head (ACE_Message_Block *new_item,
                                                ACE_Time_Value *timeout)
{
  ;
  int queue_count = 0;
  ACE_Notification_Strategy *notifier = 0;
  {
    ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

    if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
      {
        (*__errno_location ()) = 108;
        return -1;
      }

    if (this->wait_not_full_cond (ace_mon, timeout) == -1)
      return -1;

    queue_count = this->enqueue_head_i (new_item);
    if (queue_count == -1)
      return -1;




    notifier = this->notification_strategy_;
  }

  if (0 != notifier)
    notifier->notify();
  return queue_count;
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_prio (ACE_Message_Block *new_item,
                                                ACE_Time_Value *timeout)
{
  ;
  int queue_count = 0;
  ACE_Notification_Strategy *notifier = 0;
  {
    ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

    if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
      {
        (*__errno_location ()) = 108;
        return -1;
      }

    if (this->wait_not_full_cond (ace_mon, timeout) == -1)
      return -1;

    queue_count = this->enqueue_i (new_item);

    if (queue_count == -1)
      return -1;




    notifier = this->notification_strategy_;
  }
  if (0 != notifier)
    notifier->notify ();
  return queue_count;
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_deadline (ACE_Message_Block *new_item,
                                                    ACE_Time_Value *timeout)
{
  ;
  int queue_count = 0;
  ACE_Notification_Strategy *notifier = 0;
  {
    ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

    if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
      {
        (*__errno_location ()) = 108;
        return -1;
      }

    if (this->wait_not_full_cond (ace_mon, timeout) == -1)
      return -1;

    queue_count = this->enqueue_deadline_i (new_item);

    if (queue_count == -1)
      return -1;




    notifier = this->notification_strategy_;
  }
  if (0 != notifier)
    notifier->notify ();
  return queue_count;
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue (ACE_Message_Block *new_item,
                                           ACE_Time_Value *timeout)
{
  ;
  return this->enqueue_prio (new_item, timeout);
}




template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::enqueue_tail (ACE_Message_Block *new_item,
                                              ACE_Time_Value *timeout)
{
  ;
  int queue_count = 0;
  ACE_Notification_Strategy *notifier = 0;
  {
    ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

    if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
      {
        (*__errno_location ()) = 108;
        return -1;
      }

    if (this->wait_not_full_cond (ace_mon, timeout) == -1)
      return -1;

    queue_count = this->enqueue_tail_i (new_item);

    if (queue_count == -1)
      return -1;




    notifier = this->notification_strategy_;
  }
  if (0 != notifier)
    notifier->notify ();
  return queue_count;
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_head (ACE_Message_Block *&first_item,
                                                ACE_Time_Value *timeout)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
    {
      (*__errno_location ()) = 108;
      return -1;
    }

  if (this->wait_not_empty_cond (ace_mon, timeout) == -1)
    return -1;

  return this->dequeue_head_i (first_item);
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_prio (ACE_Message_Block *&dequeued,
                                                ACE_Time_Value *timeout)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
    {
      (*__errno_location ()) = 108;
      return -1;
    }

  if (this->wait_not_empty_cond (ace_mon, timeout) == -1)
    return -1;

  return this->dequeue_prio_i (dequeued);
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_tail (ACE_Message_Block *&dequeued,
                                                ACE_Time_Value *timeout)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
    {
      (*__errno_location ()) = 108;
      return -1;
    }

  if (this->wait_not_empty_cond (ace_mon, timeout) == -1)
    return -1;

  return this->dequeue_tail_i (dequeued);
}





template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::dequeue_deadline (ACE_Message_Block *&dequeued,
                                                    ACE_Time_Value *timeout)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
    {
      (*__errno_location ()) = 108;
      return -1;
    }

  if (this->wait_not_empty_cond (ace_mon, timeout) == -1)
    return -1;

  return this->dequeue_deadline_i (dequeued);
}

template <class _ACE_SYNCH> int
ACE_Message_Queue<_ACE_SYNCH>::notify (void)
{
  ;


  if (this->notification_strategy_ == 0)
    return 0;
  else
    return this->notification_strategy_->notify ();
}


template <class _ACE_SYNCH>
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::ACE_Dynamic_Message_Queue (ACE_Dynamic_Message_Strategy & message_strategy,
                                                                     size_t hwm,
                                                                     size_t lwm,
                                                                     ACE_Notification_Strategy *ns)
  : ACE_Message_Queue<_ACE_SYNCH> (hwm, lwm, ns),
    pending_head_ (0),
    pending_tail_ (0),
    late_head_ (0),
    late_tail_ (0),
    beyond_late_head_ (0),
    beyond_late_tail_ (0),
    message_strategy_ (message_strategy)
{



}



template <class _ACE_SYNCH>
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::~ACE_Dynamic_Message_Queue (void)
{
  delete &this->message_strategy_;
}

template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::remove_messages (ACE_Message_Block *&list_head,
                                                           ACE_Message_Block *&list_tail,
                                                           u_int status_flags)
{

  list_head = 0;
  list_tail = 0;


  ACE_Time_Value current_time = ACE_OS::gettimeofday ();


  int result = this->refresh_queue (current_time);
  if (result < 0)
    return result;

  if ((((status_flags) & ((u_int) ACE_Dynamic_Message_Strategy::PENDING)) != 0)

      && this->pending_head_
      && this->pending_tail_)
    {

      if (this->pending_head_->prev ())
        {
          this->tail_ = this->pending_head_->prev ();
          this->pending_head_->prev ()->next (0);
        }
      else
        {

          this->head_ = 0;
          this->tail_ = 0;
        }


      list_head = this->pending_head_;
      list_tail = this->pending_tail_;


      this->pending_head_->prev (0);
      this->pending_head_ = 0;
      this->pending_tail_ = 0;
    }

  if ((((status_flags) & ((u_int) ACE_Dynamic_Message_Strategy::LATE)) != 0)

      && this->late_head_
      && this->late_tail_)
    {


      if (this->late_tail_->next ())
        this->late_tail_->next ()->prev (this->late_head_->prev ());
      else
        this->tail_ = this->late_head_->prev ();

      if (this->late_head_->prev ())
        this->late_head_->prev ()->next (this->late_tail_->next ());
      else
        this->head_ = this->late_tail_->next ();


      this->late_head_->prev (list_tail);
      if (list_tail)
        list_tail->next (this->late_head_);
      else
        list_head = this->late_head_;

      list_tail = this->late_tail_;

      this->late_tail_->next (0);
      this->late_head_ = 0;
      this->late_tail_ = 0;
    }

  if ((((status_flags) & ((u_int) ACE_Dynamic_Message_Strategy::BEYOND_LATE)) != 0)

      && this->beyond_late_head_
      && this->beyond_late_tail_)
    {

      if (this->beyond_late_tail_->next ())
        {
          this->head_ = this->beyond_late_tail_->next ();
          this->beyond_late_tail_->next ()->prev (0);
        }
      else
        {

          this->head_ = 0;
          this->tail_ = 0;
        }



      if (list_tail)
        {
          this->beyond_late_head_->prev (list_tail);
          list_tail->next (this->beyond_late_head_);
        }
      else
        list_head = this->beyond_late_head_;

      list_tail = this->beyond_late_tail_;

      this->beyond_late_tail_->next (0);
      this->beyond_late_head_ = 0;
      this->beyond_late_tail_ = 0;
    }


  ACE_Message_Block *temp1;

  for (temp1 = list_head;
       temp1 != 0;
       temp1 = temp1->next ())
    {
      --this->cur_count_;

      size_t mb_bytes = 0;
      size_t mb_length = 0;
      temp1->total_size_and_length (mb_bytes,
                                    mb_length);

      this->cur_bytes_ -= mb_bytes;
      this->cur_length_ -= mb_length;
    }

  return result;
}
# 2193 "/usr/local/include/ace/Message_Queue_T.cpp" 3
template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::dequeue_head (ACE_Message_Block *&first_item,
                                                        ACE_Time_Value *timeout)
{
  ;

  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  if (this->state_ == ACE_Message_Queue_Base::DEACTIVATED)
    {
      (*__errno_location ()) = 108;
      return -1;
    }

  int result;


  ACE_Time_Value current_time = ACE_OS::gettimeofday ();


  result = this->refresh_queue (current_time);
  if (result < 0)
    return result;


  result = this->wait_not_empty_cond (ace_mon, timeout);
  if (result == -1)
    return result;




  result = this->dequeue_head_i (first_item);

  return result;
}




template <class _ACE_SYNCH> void
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::dump (void) const
{
# 2262 "/usr/local/include/ace/Message_Queue_T.cpp" 3
}


template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::enqueue_i (ACE_Message_Block *new_item)
{
  ;

  if (new_item == 0)
    {
      return -1;
    }

  int result = 0;


  ACE_Time_Value current_time = ACE_OS::gettimeofday ();



  result = this->refresh_queue (current_time);

  if (result < 0)
    {
      return result;
    }


  switch (message_strategy_.priority_status (*new_item,
                                             current_time))
    {
    case ACE_Dynamic_Message_Strategy::PENDING:
      if (this->pending_tail_ == 0)
        {



          pending_head_ = new_item;
          pending_tail_ = pending_head_;
          return this->enqueue_tail_i (new_item);
        }
      else
        {


          result = sublist_enqueue_i (new_item,
                                      current_time,
                                      this->pending_head_,
                                      this->pending_tail_,
                                      ACE_Dynamic_Message_Strategy::PENDING);
        }
      break;

    case ACE_Dynamic_Message_Strategy::LATE:
      if (this->late_tail_ == 0)
        {
          late_head_ = new_item;
          late_tail_ = late_head_;

          if (this->pending_head_ == 0)



            return this->enqueue_tail_i (new_item);
          else if (this->beyond_late_tail_ == 0)


            return this->enqueue_head_i (new_item);
          else
            {



              this->beyond_late_tail_->next (new_item);
              new_item->prev (this->beyond_late_tail_);
              this->pending_head_->prev (new_item);
              new_item->next (this->pending_head_);
            }
        }
      else
        {


          result = sublist_enqueue_i (new_item,
                                      current_time,
                                      this->late_head_,
                                      this->late_tail_,
                                      ACE_Dynamic_Message_Strategy::LATE);
        }
      break;

    case ACE_Dynamic_Message_Strategy::BEYOND_LATE:
      if (this->beyond_late_tail_ == 0)
        {



          beyond_late_head_ = new_item;
          beyond_late_tail_ = beyond_late_head_;
          return this->enqueue_head_i (new_item);
        }
      else
        {



          if (this->beyond_late_tail_->next ())
            {
              this->beyond_late_tail_->next ()->prev (new_item);
            }
          else
            {
              this->tail_ = new_item;
            }

          new_item->next (this->beyond_late_tail_->next ());
          this->beyond_late_tail_->next (new_item);
          new_item->prev (this->beyond_late_tail_);
          this->beyond_late_tail_ = new_item;
        }

      break;


    default:
      result = -1;
      break;
    }

  if (result < 0)
    {
      return result;
    }

  size_t mb_bytes = 0;
  size_t mb_length = 0;
  new_item->total_size_and_length (mb_bytes,
                                   mb_length);
  this->cur_bytes_ += mb_bytes;
  this->cur_length_ += mb_length;
  ++this->cur_count_;

  if (this->signal_dequeue_waiters () == -1)
    {
      return -1;
    }
  else
    {
      return ACE_Utils::truncate_cast<int> (this->cur_count_);
    }
}







template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::sublist_enqueue_i (ACE_Message_Block *new_item,
                                                             const ACE_Time_Value &current_time,
                                                             ACE_Message_Block *&sublist_head,
                                                             ACE_Message_Block *&sublist_tail,
                                                             ACE_Dynamic_Message_Strategy::Priority_Status status)
{
  int result = 0;
  ACE_Message_Block *current_item = 0;



  for (current_item = sublist_tail;
       current_item;
       current_item = current_item->prev ())
    {
      if (message_strategy_.priority_status (*current_item, current_time) == status)
        {
          if (current_item->msg_priority () >= new_item->msg_priority ())
            break;
        }
      else
        {
          sublist_head = new_item;
          break;
        }
    }

  if (current_item == 0)
    {


      new_item->prev (0);
      new_item->next (this->head_);
      if (this->head_ != 0)
        this->head_->prev (new_item);
      else
        {
          this->tail_ = new_item;
          sublist_tail = new_item;
        }
      this->head_ = new_item;
      sublist_head = new_item;
    }
  else
    {

      new_item->next (current_item->next ());
      new_item->prev (current_item);

      if (current_item->next ())
        current_item->next ()->prev (new_item);
      else
        this->tail_ = new_item;

      current_item->next (new_item);



      if (current_item == sublist_tail)
        sublist_tail = new_item;
    }

  return result;
}




template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::dequeue_head_i (ACE_Message_Block *&first_item)
{
  ;

  int result = 0;
  int last_in_subqueue = 0;


  if (this->pending_head_)
    {
      first_item = this->pending_head_;

      if (0 == this->pending_head_->prev ())
        this->head_ = this->pending_head_->next ();
      else
        this->pending_head_->prev ()->next (this->pending_head_->next ());

      if (0 == this->pending_head_->next ())
        {
          this->tail_ = this->pending_head_->prev ();
          this->pending_head_ = 0;
          this->pending_tail_ = 0;
        }
      else
        {
          this->pending_head_->next ()->prev (this->pending_head_->prev ());
          this->pending_head_ = this->pending_head_->next ();
        }

      first_item->prev (0);
      first_item->next (0);
    }


  else if (this->late_head_)
    {
      last_in_subqueue = this->late_head_ == this->late_tail_ ? 1 : 0;

      first_item = this->late_head_;

      if (0 == this->late_head_->prev ())
        this->head_ = this->late_head_->next ();
      else
        this->late_head_->prev ()->next (this->late_head_->next ());

      if (0 == this->late_head_->next ())
        this->tail_ = this->late_head_->prev ();
      else
        {
          this->late_head_->next ()->prev (this->late_head_->prev ());
          this->late_head_ = this->late_head_->next ();
        }

      if (last_in_subqueue)
        {
          this->late_head_ = 0;
          this->late_tail_ = 0;
        }

      first_item->prev (0);
      first_item->next (0);
    }

  else if (this->beyond_late_head_)
    {
      last_in_subqueue =
        (this->beyond_late_head_ == this->beyond_late_tail_) ? 1 : 0;

      first_item = this->beyond_late_head_;
      this->head_ = this->beyond_late_head_->next ();

      if (0 == this->beyond_late_head_->next ())
        {
          this->tail_ = this->beyond_late_head_->prev ();
        }
      else
        {
          this->beyond_late_head_->next ()->prev (this->beyond_late_head_->prev ());
          this->beyond_late_head_ = this->beyond_late_head_->next ();
        }

      if (last_in_subqueue)
        {
          this->beyond_late_head_ = 0;
          this->beyond_late_tail_ = 0;
        }

      first_item->prev (0);
      first_item->next (0);
    }
  else
    {

      first_item = 0;
      result = -1;
    }

  if (result < 0)
    {
      return result;
    }

  size_t mb_bytes = 0;
  size_t mb_length = 0;
  first_item->total_size_and_length (mb_bytes,
                                     mb_length);

  this->cur_bytes_ -= mb_bytes;
  this->cur_length_ -= mb_length;
  --this->cur_count_;



  if (this->cur_bytes_ <= this->low_water_mark_
      && this->signal_enqueue_waiters () == -1)
    {
      return -1;
    }
  else
    {
      return ACE_Utils::truncate_cast<int> (this->cur_count_);
    }
}







template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::refresh_queue (const ACE_Time_Value &current_time)
{
  int result;

  result = refresh_pending_queue (current_time);

  if (result != -1)
    result = refresh_late_queue (current_time);

  return result;
}




template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::refresh_pending_queue (const ACE_Time_Value &current_time)
{
  ACE_Dynamic_Message_Strategy::Priority_Status current_status;


  if (this->pending_head_)
    {
      current_status = message_strategy_.priority_status (*this->pending_head_,
                                                          current_time);
      switch (current_status)
        {
        case ACE_Dynamic_Message_Strategy::BEYOND_LATE:


          this->beyond_late_head_ = this->head_;



          this->late_head_ = 0;
          this->late_tail_ = 0;


          do
            {
              this->pending_head_ = this->pending_head_->next ();

              if (this->pending_head_)
                current_status = message_strategy_.priority_status (*this->pending_head_,
                                                                    current_time);
              else
                break;

            }
          while (current_status == ACE_Dynamic_Message_Strategy::BEYOND_LATE);

          if (this->pending_head_)
            {

              this->beyond_late_tail_ = this->pending_head_->prev ();

              if (current_status == ACE_Dynamic_Message_Strategy::PENDING)

                break;
              else if (current_status != ACE_Dynamic_Message_Strategy::LATE)
                {

                  do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 2686, -1, __ace_error); ace___->log (LM_ERROR, "Unexpected message priority status [%d] (expected LATE)", (int) current_status); return -1; } while (0);



                }

            }
          else
            {


              this->beyond_late_tail_ = this->tail_;
              this->pending_head_ = 0;
              this->pending_tail_ = 0;
              break;
            }

        case ACE_Dynamic_Message_Strategy::LATE:



          if (this->late_head_ == 0)
            this->late_head_ = this->pending_head_;


          do
            {
              this->pending_head_ = this->pending_head_->next ();

              if (this->pending_head_)
                current_status = message_strategy_.priority_status (*this->pending_head_,
                                                                    current_time);
              else
                break;

            }
          while (current_status == ACE_Dynamic_Message_Strategy::LATE);

          if (this->pending_head_)
            {
              if (current_status != ACE_Dynamic_Message_Strategy::PENDING)

                do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 2728, -1, __ace_error); ace___->log (LM_ERROR, "Unexpected message priority status [%d] (expected PENDING)", (int) current_status); return -1; } while (0);





              this->late_tail_ = this->pending_head_->prev ();
            }
          else
            {

              this->late_tail_ = this->tail_;
              this->pending_head_ = 0;
              this->pending_tail_ = 0;
            }

          break;
        case ACE_Dynamic_Message_Strategy::PENDING:

          break;
        default:

          do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 2750, -1, __ace_error); ace___->log (LM_ERROR, "Unknown message priority status [%d]", (int) current_status); return -1; } while (0);



        }
    }
  return 0;
}




template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::refresh_late_queue (const ACE_Time_Value &current_time)
{
  ACE_Dynamic_Message_Strategy::Priority_Status current_status;

  if (this->late_head_)
    {
      current_status = message_strategy_.priority_status (*this->late_head_,
                                                          current_time);
      switch (current_status)
        {
        case ACE_Dynamic_Message_Strategy::BEYOND_LATE:



          this->beyond_late_head_ = this->head_;


          do
            {
              this->late_head_ = this->late_head_->next ();

              if (this->late_head_)
                current_status = message_strategy_.priority_status (*this->late_head_,
                                                                    current_time);
              else
                break;

            }
          while (current_status == ACE_Dynamic_Message_Strategy::BEYOND_LATE);

          if (this->late_head_)
            {

              this->beyond_late_tail_ = this->late_head_->prev ();

              if (current_status == ACE_Dynamic_Message_Strategy::PENDING)
                {

                  this->late_head_ = 0;
                  this->late_tail_ = 0;
                }
              else if (current_status != ACE_Dynamic_Message_Strategy::LATE)

                do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 2806, -1, __ace_error); ace___->log (LM_ERROR, "Unexpected message priority status [%d] (expected LATE)", (int) current_status); return -1; } while (0);



            }
          else
            {

              this->beyond_late_tail_ = this->tail_;
              this->late_head_ = 0;
              this->late_tail_ = 0;
            }

          break;

        case ACE_Dynamic_Message_Strategy::LATE:

          break;

        case ACE_Dynamic_Message_Strategy::PENDING:

          do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 2828, -1, __ace_error); ace___->log (LM_ERROR, "Unexpected message priority status " "[%d] (expected LATE or BEYOND_LATE)", (int) current_status); return -1; } while (0);




        default:

          do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Message_Queue_T.cpp", 2834, -1, __ace_error); ace___->log (LM_ERROR, "Unknown message priority status [%d]", (int) current_status); return -1; } while (0);



        }
    }

  return 0;
}




template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::peek_dequeue_head (ACE_Message_Block *&first_item,
                                                             ACE_Time_Value *timeout)
{
  return ACE_Message_Queue<_ACE_SYNCH>::peek_dequeue_head (first_item,
                                                              timeout);
}




template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::enqueue_tail (ACE_Message_Block *new_item,
                                                        ACE_Time_Value *timeout)
{
  ;
  return this->enqueue_prio (new_item, timeout);
}






template <class _ACE_SYNCH> int
ACE_Dynamic_Message_Queue<_ACE_SYNCH>::enqueue_head (ACE_Message_Block *new_item,
                                                        ACE_Time_Value *timeout)
{
  ;
  return this->enqueue_prio (new_item, timeout);
}






template <class _ACE_SYNCH>
ACE_Message_Queue<_ACE_SYNCH> *
ACE_Message_Queue_Factory<_ACE_SYNCH>::create_static_message_queue (size_t hwm,
                                                                       size_t lwm,
                                                                       ACE_Notification_Strategy *ns)
{
  ACE_Message_Queue<_ACE_SYNCH> *tmp = 0;

  do { tmp = new (::std::nothrow) ACE_Message_Queue<_ACE_SYNCH> (hwm, lwm, ns); if (tmp == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


  return tmp;
}



template <class _ACE_SYNCH>
ACE_Dynamic_Message_Queue<_ACE_SYNCH> *
ACE_Message_Queue_Factory<_ACE_SYNCH>::create_deadline_message_queue (size_t hwm,
                                                                         size_t lwm,
                                                                         ACE_Notification_Strategy *ns,
                                                                         u_long static_bit_field_mask,
                                                                         u_long static_bit_field_shift,
                                                                         u_long dynamic_priority_max,
                                                                         u_long dynamic_priority_offset)
{
  ACE_Deadline_Message_Strategy *adms = 0;

  do { adms = new (::std::nothrow) ACE_Deadline_Message_Strategy (static_bit_field_mask, static_bit_field_shift, dynamic_priority_max, dynamic_priority_offset); if (adms == 0) { (*__errno_location ()) = 12; return 0; } } while (0);






  ACE_Dynamic_Message_Queue<_ACE_SYNCH> *tmp = 0;
  do { tmp = new (::std::nothrow) ACE_Dynamic_Message_Queue<_ACE_SYNCH> (*adms, hwm, lwm, ns); if (tmp == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


  return tmp;
}




template <class _ACE_SYNCH>
ACE_Dynamic_Message_Queue<_ACE_SYNCH> *
ACE_Message_Queue_Factory<_ACE_SYNCH>::create_laxity_message_queue (size_t hwm,
                                                                       size_t lwm,
                                                                       ACE_Notification_Strategy *ns,
                                                                       u_long static_bit_field_mask,
                                                                       u_long static_bit_field_shift,
                                                                       u_long dynamic_priority_max,
                                                                       u_long dynamic_priority_offset)
{
  ACE_Laxity_Message_Strategy *alms = 0;

  do { alms = new (::std::nothrow) ACE_Laxity_Message_Strategy (static_bit_field_mask, static_bit_field_shift, dynamic_priority_max, dynamic_priority_offset); if (alms == 0) { (*__errno_location ()) = 12; return 0; } } while (0);






  ACE_Dynamic_Message_Queue<_ACE_SYNCH> *tmp = 0;
  do { tmp = new (::std::nothrow) ACE_Dynamic_Message_Queue<_ACE_SYNCH> (*alms, hwm, lwm, ns); if (tmp == 0) { (*__errno_location ()) = 12; return 0; } } while (0);


  return tmp;
}
# 2989 "/usr/local/include/ace/Message_Queue_T.cpp" 3

# 1555 "/usr/local/include/ace/Message_Queue_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 1562 "/usr/local/include/ace/Message_Queue_T.h" 2 3
# 227 "/usr/local/include/ace/Message_Queue.h" 2 3


# 1 "/usr/local/include/ace/Message_Queue.inl" 1 3






inline
ACE_Message_Queue_Base::ACE_Message_Queue_Base (void)
{
}


# 230 "/usr/local/include/ace/Message_Queue.h" 2 3


# 1 "/usr/local/include/ace/post.h" 1 3
# 233 "/usr/local/include/ace/Message_Queue.h" 2 3
# 18 "/usr/local/include/ace/Task_T.h" 2 3






# 1 "/usr/local/include/ace/Task.h" 1 3
# 25 "/usr/local/include/ace/Task_T.h" 2 3





template <class _ACE_SYNCH> class ACE_Module;
# 41 "/usr/local/include/ace/Task_T.h" 3
template <class _ACE_SYNCH>
class ACE_Task : public ACE_Task_Base
{
public:
  friend class ACE_Module<_ACE_SYNCH>;
  friend class ACE_Module_Type;
# 55 "/usr/local/include/ace/Task_T.h" 3
  ACE_Task (ACE_Thread_Manager *thr_mgr = 0,
            ACE_Message_Queue<_ACE_SYNCH> *mq = 0);


  virtual ~ACE_Task (void);


  ACE_Message_Queue<_ACE_SYNCH> *msg_queue (void);


  void msg_queue (ACE_Message_Queue<_ACE_SYNCH> *);

public:
# 81 "/usr/local/include/ace/Task_T.h" 3
  int putq (ACE_Message_Block *, ACE_Time_Value *timeout = 0);






  int getq (ACE_Message_Block *&mb, ACE_Time_Value *timeout = 0);



  int ungetq (ACE_Message_Block *, ACE_Time_Value *timeout = 0);
# 105 "/usr/local/include/ace/Task_T.h" 3
  int reply (ACE_Message_Block *, ACE_Time_Value *timeout = 0);






  int put_next (ACE_Message_Block *msg, ACE_Time_Value *timeout = 0);






  int can_put (ACE_Message_Block *);




  const ACE_TCHAR *name (void) const;



  ACE_Task<_ACE_SYNCH> *next (void);


  void next (ACE_Task<_ACE_SYNCH> *);



  ACE_Task<_ACE_SYNCH> *sibling (void);


  ACE_Module<_ACE_SYNCH> *module (void) const;







  int flush (u_long flag = ACE_Task_Flags::ACE_FLUSHALL);




  void water_marks (ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds, size_t);


  ACE_Message_Queue<_ACE_SYNCH> *msg_queue_;


  bool delete_msg_queue_;


  ACE_Module<_ACE_SYNCH> *mod_;


  ACE_Task<_ACE_SYNCH> *next_;


  void dump (void) const;


  struct __Ace {};

private:


  void operator= (const ACE_Task<_ACE_SYNCH> &);
  ACE_Task (const ACE_Task<_ACE_SYNCH> &);
};









# 1 "/usr/local/include/ace/Task_T.inl" 1 3






template <class _ACE_SYNCH> inline void
ACE_Task<_ACE_SYNCH>::water_marks (ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds cmd,
                                      size_t wm_size)
{
  ;
  if (cmd == ACE_IO_Cntl_Msg::SET_LWM)
    this->msg_queue_->low_water_mark (wm_size);
  else
    this->msg_queue_->high_water_mark (wm_size);
}

template <class _ACE_SYNCH> inline int
ACE_Task<_ACE_SYNCH>::getq (ACE_Message_Block *&mb, ACE_Time_Value *tv)
{
  ;
  return this->msg_queue_->dequeue_head (mb, tv);
}

template <class _ACE_SYNCH> inline int
ACE_Task<_ACE_SYNCH>::can_put (ACE_Message_Block *)
{
  ;
  do { (*__errno_location ()) = 95 ; return -1; } while (0);
}

template <class _ACE_SYNCH> inline int
ACE_Task<_ACE_SYNCH>::putq (ACE_Message_Block *mb, ACE_Time_Value *tv)
{
  ;
  return this->msg_queue_->enqueue_tail (mb, tv);
}

template <class _ACE_SYNCH> inline int
ACE_Task<_ACE_SYNCH>::ungetq (ACE_Message_Block *mb, ACE_Time_Value *tv)
{
  ;
  return this->msg_queue_->enqueue_head (mb, tv);
}

template <class _ACE_SYNCH> inline int
ACE_Task<_ACE_SYNCH>::flush (u_long flag)
{
  ;
  if ((((flag) & (ACE_Task_Flags::ACE_FLUSHALL)) != 0))
    return this->msg_queue_ != 0 && this->msg_queue_->close ();
  else
    return -1;
}

template <class _ACE_SYNCH> inline void
ACE_Task<_ACE_SYNCH>::msg_queue (ACE_Message_Queue<_ACE_SYNCH> *mq)
{
  ;
  if (this->delete_msg_queue_)
    {
      delete this->msg_queue_;
      this->delete_msg_queue_ = false;
    }
  this->msg_queue_ = mq;
}

template <class _ACE_SYNCH> ACE_Message_Queue<_ACE_SYNCH> *
ACE_Task<_ACE_SYNCH>::msg_queue (void)
{
  ;
  return this->msg_queue_;
}

template <class _ACE_SYNCH> inline int
ACE_Task<_ACE_SYNCH>::reply (ACE_Message_Block *mb, ACE_Time_Value *tv)
{
  ;
  return this->sibling ()->put_next (mb, tv);
}

template <class _ACE_SYNCH> inline ACE_Task<_ACE_SYNCH> *
ACE_Task<_ACE_SYNCH>::next (void)
{
  ;
  return this->next_;
}

template <class _ACE_SYNCH> inline void
ACE_Task<_ACE_SYNCH>::next (ACE_Task<_ACE_SYNCH> *q)
{
  ;
  this->next_ = q;
}



template <class _ACE_SYNCH> inline int
ACE_Task<_ACE_SYNCH>::put_next (ACE_Message_Block *msg, ACE_Time_Value *tv)
{
  ;
  return this->next_ == 0 ? -1 : this->next_->put (msg, tv);
}


# 187 "/usr/local/include/ace/Task_T.h" 2 3



# 1 "/usr/local/include/ace/Task_T.cpp" 1 3





# 1 "/usr/local/include/ace/Task_T.h" 1 3
# 7 "/usr/local/include/ace/Task_T.cpp" 2 3





# 1 "/usr/local/include/ace/Module.h" 1 3
# 16 "/usr/local/include/ace/Module.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Module.h" 2 3
# 25 "/usr/local/include/ace/Module.h" 3
# 1 "/usr/local/include/ace/os_include/os_dirent.h" 1 3
# 19 "/usr/local/include/ace/os_include/os_dirent.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 20 "/usr/local/include/ace/os_include/os_dirent.h" 2 3
# 35 "/usr/local/include/ace/os_include/os_dirent.h" 3
# 1 "/usr/include/dirent.h" 1 3 4
# 28 "/usr/include/dirent.h" 3 4
extern "C" {
# 62 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/bits/dirent.h" 1 3 4
# 23 "/usr/include/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };


struct dirent64
  {
    __ino64_t d_ino;
    __off64_t d_off;
    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 63 "/usr/include/dirent.h" 2 3 4
# 98 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 128 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (__const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 163 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 174 "/usr/include/dirent.h" 3 4
extern struct dirent64 *readdir64 (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 184 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 201 "/usr/include/dirent.h" 3 4
extern int readdir64_r (DIR *__restrict __dirp,
   struct dirent64 *__restrict __entry,
   struct dirent64 **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern void rewinddir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) throw () __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) throw () __attribute__ ((__nonnull__ (1)));
# 245 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.5/include/stddef.h" 1 3 4
# 246 "/usr/include/dirent.h" 2 3 4






extern int scandir (__const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (__const struct dirent *),
      int (*__cmp) (__const struct dirent **,
      __const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 275 "/usr/include/dirent.h" 3 4
extern int scandir64 (__const char *__restrict __dir,
        struct dirent64 ***__restrict __namelist,
        int (*__selector) (__const struct dirent64 *),
        int (*__cmp) (__const struct dirent64 **,
        __const struct dirent64 **))
     __attribute__ ((__nonnull__ (1, 2)));




extern int alphasort (__const struct dirent **__e1,
        __const struct dirent **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 300 "/usr/include/dirent.h" 3 4
extern int alphasort64 (__const struct dirent64 **__e1,
   __const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 313 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     throw () __attribute__ ((__nonnull__ (2, 4)));
# 330 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries64 (int __fd, char *__restrict __buf,
      size_t __nbytes,
      __off64_t *__restrict __basep)
     throw () __attribute__ ((__nonnull__ (2, 4)));






extern int versionsort (__const struct dirent **__e1,
   __const struct dirent **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 356 "/usr/include/dirent.h" 3 4
extern int versionsort64 (__const struct dirent64 **__e1,
     __const struct dirent64 **__e2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



}
# 36 "/usr/local/include/ace/os_include/os_dirent.h" 2 3




extern "C"
{
# 91 "/usr/local/include/ace/os_include/os_dirent.h" 3
typedef DIR ACE_DIR;
# 106 "/usr/local/include/ace/os_include/os_dirent.h" 3
}


# 1 "/usr/local/include/ace/post.h" 1 3
# 110 "/usr/local/include/ace/os_include/os_dirent.h" 2 3
# 26 "/usr/local/include/ace/Module.h" 2 3


# 38 "/usr/local/include/ace/Module.h" 3
class ACE_Module_Base
{
public:
  enum
  {

    M_FLAGS_NOT_SET = 0,


    M_DELETE_READER = 1,


    M_DELETE_WRITER = 2,
# 59 "/usr/local/include/ace/Module.h" 3
    M_DELETE = 3,


    M_DELETE_NONE = 4
  };
};
# 77 "/usr/local/include/ace/Module.h" 3
template <class _ACE_SYNCH>
class ACE_Module : public ACE_Module_Base
{
public:


  ACE_Module (void);


  virtual ~ACE_Module (void);



  ACE_Module (const ACE_TCHAR *module_name,
              ACE_Task<_ACE_SYNCH> *writer = 0,
              ACE_Task<_ACE_SYNCH> *reader = 0,
              void *args = 0,
              int flags = M_DELETE);
# 103 "/usr/local/include/ace/Module.h" 3
  int open (const ACE_TCHAR *module_name,
            ACE_Task<_ACE_SYNCH> *writer = 0,
            ACE_Task<_ACE_SYNCH> *reader = 0,
            void *a = 0,
            int flags = M_DELETE);
# 116 "/usr/local/include/ace/Module.h" 3
  int close (int flags = M_DELETE_NONE);



  ACE_Task<_ACE_SYNCH> *writer (void);
# 129 "/usr/local/include/ace/Module.h" 3
  void writer (ACE_Task<_ACE_SYNCH> *q, int flags = M_DELETE_WRITER);


  ACE_Task<_ACE_SYNCH> *reader (void);
# 141 "/usr/local/include/ace/Module.h" 3
  void reader (ACE_Task<_ACE_SYNCH> *q, int flags = M_DELETE_READER);


  ACE_Task<_ACE_SYNCH> *sibling (ACE_Task<_ACE_SYNCH> *orig);



  const ACE_TCHAR *name (void) const;


  void name (const ACE_TCHAR *);



  void *arg (void) const;


  void arg (void *);


  void link (ACE_Module<_ACE_SYNCH> *m);


  ACE_Module<_ACE_SYNCH> *next (void);


  void next (ACE_Module<_ACE_SYNCH> *m);


  void dump (void) const;


  struct __Ace {};

private:


  int close_i (int which, int flags);



  ACE_Task<_ACE_SYNCH> *q_pair_[2];


  ACE_TCHAR name_[4096 + 1];


  ACE_Module<_ACE_SYNCH> *next_;



  void *arg_;



  int flags_;
};




# 1 "/usr/local/include/ace/Module.inl" 1 3








template <class _ACE_SYNCH> inline void *
ACE_Module<_ACE_SYNCH>::arg (void) const
{
  ;
  return this->arg_;
}

template <class _ACE_SYNCH> inline void
ACE_Module<_ACE_SYNCH>::arg (void *a)
{
  ;
  this->arg_ = a;
}

template <class _ACE_SYNCH> inline const ACE_TCHAR *
ACE_Module<_ACE_SYNCH>::name (void) const
{
  ;
  return this->name_;
}

template <class _ACE_SYNCH> inline void
ACE_Module<_ACE_SYNCH>::name (const ACE_TCHAR *n)
{
  ;
  ACE_OS::strsncpy (this->name_, n, 4096);
}

template <class _ACE_SYNCH> inline ACE_Task<_ACE_SYNCH> *
ACE_Module<_ACE_SYNCH>::writer (void)
{
  ;
  return this->q_pair_[1];
}

template <class _ACE_SYNCH> inline ACE_Task<_ACE_SYNCH> *
ACE_Module<_ACE_SYNCH>::reader (void)
{
  ;
  return this->q_pair_[0];
}

template <class _ACE_SYNCH> inline ACE_Module<_ACE_SYNCH> *
ACE_Module<_ACE_SYNCH>::next (void)
{
  ;
  return this->next_;
}

template <class _ACE_SYNCH> inline void
ACE_Module<_ACE_SYNCH>::next (ACE_Module<_ACE_SYNCH> *m)
{
  ;
  this->next_ = m;
}


# 203 "/usr/local/include/ace/Module.h" 2 3



# 1 "/usr/local/include/ace/Module.cpp" 1 3





# 1 "/usr/local/include/ace/Module.h" 1 3
# 7 "/usr/local/include/ace/Module.cpp" 2 3





# 1 "/usr/local/include/ace/Stream_Modules.h" 1 3
# 22 "/usr/local/include/ace/Stream_Modules.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 23 "/usr/local/include/ace/Stream_Modules.h" 2 3


# 50 "/usr/local/include/ace/Stream_Modules.h" 3
template <class _ACE_SYNCH>
class ACE_Stream_Head : public ACE_Task<_ACE_SYNCH>
{
public:

  ACE_Stream_Head (void);


  ~ACE_Stream_Head (void);


  virtual int open (void *a = 0);
  virtual int close (u_long flags = 0);
  virtual int put (ACE_Message_Block *msg, ACE_Time_Value * = 0);
  virtual int svc (void);


  virtual int init (int argc, ACE_TCHAR *argv[]);
  virtual int info (ACE_TCHAR **info_string, size_t length) const;
  virtual int fini (void);


  void dump (void) const;


  struct __Ace {};

private:

  int control (ACE_Message_Block *);
  int canonical_flush (ACE_Message_Block *);
};






template <class _ACE_SYNCH>
class ACE_Stream_Tail : public ACE_Task<_ACE_SYNCH>
{
public:

  ACE_Stream_Tail (void);


  ~ACE_Stream_Tail (void);


  virtual int open (void *a = 0);
  virtual int close (u_long flags = 0);
  virtual int put (ACE_Message_Block *msg, ACE_Time_Value * = 0);
  virtual int svc (void);


  virtual int init (int argc, ACE_TCHAR *argv[]);
  virtual int info (ACE_TCHAR **info_string, size_t length) const;
  virtual int fini (void);


  void dump (void) const;


  struct __Ace {};

private:

  int control (ACE_Message_Block *);
  int canonical_flush (ACE_Message_Block *);
};







template <class _ACE_SYNCH>
class ACE_Thru_Task : public ACE_Task<_ACE_SYNCH>
{
public:

  ACE_Thru_Task (void);


  ~ACE_Thru_Task (void);


  virtual int open (void *a = 0);
  virtual int close (u_long flags = 0);
  virtual int put (ACE_Message_Block *msg, ACE_Time_Value * = 0);
  virtual int svc (void);


  virtual int init (int argc, ACE_TCHAR *argv[]);
  virtual int info (ACE_TCHAR **info_string, size_t length) const;
  virtual int fini (void);


  void dump (void) const;


  struct __Ace {};
};




# 1 "/usr/local/include/ace/Stream_Modules.cpp" 1 3





# 1 "/usr/local/include/ace/Stream_Modules.h" 1 3
# 7 "/usr/local/include/ace/Stream_Modules.cpp" 2 3











template <class _ACE_SYNCH>
ACE_Stream_Head<_ACE_SYNCH>::ACE_Stream_Head (void)
{
  ;
}

template <class _ACE_SYNCH>
ACE_Stream_Head<_ACE_SYNCH>::~ACE_Stream_Head (void)
{
  ;
}

template <class _ACE_SYNCH> void
ACE_Stream_Head<_ACE_SYNCH>::dump (void) const
{



}



template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::open (void *)
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::close (u_long)
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::svc (void)
{
  ;
  return -1;
}

template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::control (ACE_Message_Block *mb)
{
  ;
  ACE_IO_Cntl_Msg *ioc = (ACE_IO_Cntl_Msg *) mb->rd_ptr ();
  ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds cmd;

  switch (cmd = ioc->cmd ())
    {
    case ACE_IO_Cntl_Msg::SET_LWM:
    case ACE_IO_Cntl_Msg::SET_HWM:
      this->water_marks (cmd, *(size_t *) mb->cont ()->rd_ptr ());
      ioc->rval (0);
      break;
    default:
      return 0;
    }
  return ioc->rval ();
}



template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::canonical_flush (ACE_Message_Block *mb)
{
  ;
  char *cp = mb->rd_ptr ();

  if ((((*cp) & (ACE_Task_Flags::ACE_FLUSHR)) != 0))
    {
      this->flush (ACE_Task_Flags::ACE_FLUSHALL);
      (*cp &= ~(ACE_Task_Flags::ACE_FLUSHR));
    }

  if ((((*cp) & (ACE_Task_Flags::ACE_FLUSHW)) != 0))
    return this->reply (mb);
  else
    mb->release ();
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::put (ACE_Message_Block *mb,
                                     ACE_Time_Value *tv)
{
  ;
  int res = 0;

  if (mb->msg_type () == ACE_Message_Block::MB_IOCTL
      && (res = this->control (mb)) == -1)
    return res;

  if (this->is_writer ())
    return this->put_next (mb, tv);
  else
    {
      switch (mb->msg_type ())
        {
        case ACE_Message_Block::MB_FLUSH:
          return this->canonical_flush (mb);
        default:
          break;
        }

      return this->putq (mb, tv);
    }
}

template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::init (int, ACE_TCHAR *[])
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::info (ACE_TCHAR **strp, size_t length) const
{
  ;
  const ACE_TCHAR *name = this->name ();

  if (*strp == 0 && (*strp = ACE_OS::strdup (name)) == 0)
    return -1;
  else
    ACE_OS::strsncpy (*strp, name, length);
  return static_cast<int> (ACE_OS::strlen (name));
}

template <class _ACE_SYNCH> int
ACE_Stream_Head<_ACE_SYNCH>::fini (void)
{
  ;
  return 0;
}



template <class _ACE_SYNCH>
ACE_Stream_Tail<_ACE_SYNCH>::ACE_Stream_Tail (void)
{
  ;
}

template <class _ACE_SYNCH>
ACE_Stream_Tail<_ACE_SYNCH>::~ACE_Stream_Tail (void)
{
  ;
}

template <class _ACE_SYNCH> void
ACE_Stream_Tail<_ACE_SYNCH>::dump (void) const
{



}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::open (void *)
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::close (u_long)
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::svc (void)
{
  ;
  return -1;
}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::control (ACE_Message_Block *mb)
{
  ;
  ACE_IO_Cntl_Msg *ioc = (ACE_IO_Cntl_Msg *) mb->rd_ptr ();
  ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds cmd;

  switch (cmd = ioc->cmd ())
    {
    case ACE_IO_Cntl_Msg::SET_LWM:
    case ACE_IO_Cntl_Msg::SET_HWM:
      {
        size_t wm_size = *(size_t *) mb->cont ()->rd_ptr ();

        this->water_marks (cmd, wm_size);
        this->sibling ()->water_marks (cmd, wm_size);
        ioc->rval (0);
        break;
      }
    default:
      mb->msg_type (ACE_Message_Block::MB_IOCNAK);
    }
  return this->reply (mb);
}



template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::canonical_flush (ACE_Message_Block *mb)
{
  ;
  char *cp = mb->rd_ptr ();

  if ((((*cp) & (ACE_Task_Flags::ACE_FLUSHW)) != 0))
    {
      this->flush (ACE_Task_Flags::ACE_FLUSHALL);
      (*cp &= ~(ACE_Task_Flags::ACE_FLUSHW));
    }

  if ((((*cp) & (ACE_Task_Flags::ACE_FLUSHR)) != 0))
    {
      this->sibling ()->flush (ACE_Task_Flags::ACE_FLUSHALL);
      return this->reply (mb);
    }
  else
    mb->release ();

  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::put (ACE_Message_Block *mb,
                                   ACE_Time_Value *)
{
  ;

  if (this->is_writer ())
    {
      switch (mb->msg_type ())
        {
        case ACE_Message_Block::MB_IOCTL:
          return this->control (mb);

        default:
          mb->release ();
          return 0;

        }
    }

  return -1;
}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::init (int, ACE_TCHAR *[])
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::info (ACE_TCHAR **strp, size_t length) const
{
  ;
  const ACE_TCHAR *name = this->name ();

  if (*strp == 0 && (*strp = ACE_OS::strdup (name)) == 0)
    return -1;
  else
    ACE_OS::strsncpy (*strp, name, length);
  return static_cast<int> (ACE_OS::strlen (name));
}

template <class _ACE_SYNCH> int
ACE_Stream_Tail<_ACE_SYNCH>::fini (void)
{
  ;
  return 0;
}



template <class _ACE_SYNCH>
ACE_Thru_Task<_ACE_SYNCH>::ACE_Thru_Task (void)
{
  ;
}

template <class _ACE_SYNCH>
ACE_Thru_Task<_ACE_SYNCH>::~ACE_Thru_Task (void)
{
  ;
}

template <class _ACE_SYNCH> void
ACE_Thru_Task<_ACE_SYNCH>::dump (void) const
{



}

template <class _ACE_SYNCH> int
ACE_Thru_Task<_ACE_SYNCH>::open (void *)
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Thru_Task<_ACE_SYNCH>::close (u_long)
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Thru_Task<_ACE_SYNCH>::svc (void)
{
  ;
  return -1;
}

template <class _ACE_SYNCH> int
ACE_Thru_Task<_ACE_SYNCH>::put (ACE_Message_Block *msg,
                                 ACE_Time_Value *tv)
{
  ;
  return this->put_next (msg, tv);
}

template <class _ACE_SYNCH> int
ACE_Thru_Task<_ACE_SYNCH>::init (int, ACE_TCHAR *[])
{
  ;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Thru_Task<_ACE_SYNCH>::info (ACE_TCHAR **strp,
                                    size_t length) const
{
  ;
  const ACE_TCHAR *name = this->name ();

  if (*strp == 0 && (*strp = ACE_OS::strdup (name)) == 0)
    return -1;
  else
    ACE_OS::strsncpy (*strp, name, length);
  return static_cast<int> (ACE_OS::strlen (name));
}

template <class _ACE_SYNCH> int
ACE_Thru_Task<_ACE_SYNCH>::fini (void)
{
  ;
  return 0;
}


# 159 "/usr/local/include/ace/Stream_Modules.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 166 "/usr/local/include/ace/Stream_Modules.h" 2 3
# 13 "/usr/local/include/ace/Module.cpp" 2 3









template <class _ACE_SYNCH> void
ACE_Module<_ACE_SYNCH>::dump (void) const
{



}

template <class _ACE_SYNCH> void
ACE_Module<_ACE_SYNCH>::writer (ACE_Task<_ACE_SYNCH> *q,
                                   int flags )
{
  ;


  this->close_i (1, flags);

  this->q_pair_[1] = q;

  if (q != 0)
    {
      (q->flags_ &= ~(ACE_Task_Flags::ACE_READER));

      q->mod_ = this;
    }


  (flags_ |= ((flags & M_DELETE_WRITER)));
}

template <class _ACE_SYNCH> void
ACE_Module<_ACE_SYNCH>::reader (ACE_Task<_ACE_SYNCH> *q,
                                 int flags )
{
  ;


  this->close_i (0, flags);

  this->q_pair_[0] = q;

  if (q != 0)
    {
      (q->flags_ |= (ACE_Task_Flags::ACE_READER));

      q->mod_ = this;
    }


  (flags_ |= ((flags & M_DELETE_READER)));
}



template <class _ACE_SYNCH> void
ACE_Module<_ACE_SYNCH>::link (ACE_Module<_ACE_SYNCH> *m)
{
  ;
  this->next (m);
  this->writer ()->next (m->writer ());
  m->reader ()->next (this->reader ());
}

template <class _ACE_SYNCH> int
ACE_Module<_ACE_SYNCH>::open (const ACE_TCHAR *module_name,
                                 ACE_Task<_ACE_SYNCH> *writer_q,
                                 ACE_Task<_ACE_SYNCH> *reader_q,
                                 void *arg,
                                 int flags )
{
  ;
  this->name (module_name);
  this->arg_ = arg;


  if (this->reader ())
    this->close_i (0, M_DELETE_READER);

  if (this->writer ())
    this->close_i (1, M_DELETE_WRITER);

  if (writer_q == 0)
    {
      do { writer_q = new (::std::nothrow) ACE_Thru_Task<_ACE_SYNCH>; if (writer_q == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      (flags |= (M_DELETE_WRITER));
    }

  if (reader_q == 0)
    {
      do { reader_q = new (::std::nothrow) ACE_Thru_Task<_ACE_SYNCH>; if (reader_q == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      (flags |= (M_DELETE_READER));
    }

  this->reader (reader_q);
  this->writer (writer_q);


  this->flags_ = flags;


  if (writer_q == 0 || reader_q == 0)
    {


      this->close_i (0, M_DELETE_READER);
      this->close_i (1, M_DELETE_WRITER);

      (*__errno_location ()) = 12;
      return -1;
    }



  reader_q->mod_ = this;
  writer_q->mod_ = this;

  return 0;
}



template <class _ACE_SYNCH> ACE_Task<_ACE_SYNCH> *
ACE_Module<_ACE_SYNCH>::sibling (ACE_Task<_ACE_SYNCH> *orig)
{
  ;
  if (this->q_pair_[0] == orig)
    return this->q_pair_[1];
  else if (this->q_pair_[1] == orig)
    return this->q_pair_[0];
  else
    return 0;
}

template <class _ACE_SYNCH>
ACE_Module<_ACE_SYNCH>::ACE_Module (void)
  : flags_ (M_FLAGS_NOT_SET)
{
  ;
  this->name ("<unknown>");

  this->q_pair_[0] = 0;
  this->q_pair_[1] = 0;
}

template <class _ACE_SYNCH>
ACE_Module<_ACE_SYNCH>::~ACE_Module (void)
{
  ;


  if (this->reader () || this->writer ())
    this->close ();
}

template <class _ACE_SYNCH>
ACE_Module<_ACE_SYNCH>::ACE_Module (const ACE_TCHAR *module_name,
                                       ACE_Task<_ACE_SYNCH> *writer_q,
                                       ACE_Task<_ACE_SYNCH> *reader_q,
                                       void *args,
                                       int flags )
  : flags_ (M_FLAGS_NOT_SET)
{
  ;

  this->q_pair_[0] = 0;
  this->q_pair_[1] = 0;

  if (this->open (module_name, writer_q, reader_q, args, flags) == -1)
    do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Module.cpp", 196, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "ACE_Module"); } while (0);


}

template <class _ACE_SYNCH> int
ACE_Module<_ACE_SYNCH>::close (int flags )
{
  ;

  int result = 0;



  if (this->flags_ == M_FLAGS_NOT_SET)
    (flags_ |= (flags));

  if (this->close_i (0, flags_) == -1)
    result = -1;

  if (this->close_i (1, flags_) == -1)
    result = -1;

  return result;
}

template <class _ACE_SYNCH> int
ACE_Module<_ACE_SYNCH>::close_i (int which,
                                    int flags)
{
  ;

  if (this->q_pair_[which] == 0)
    return 0;



  ACE_Task<_ACE_SYNCH> *task = this->q_pair_[which];




  int result = 0;

  if (task->module_closed () == -1)
    result = -1;

  task->flush ();
  task->next (0);


  if (flags != M_DELETE_NONE
      && (((flags_) & (which + 1)) != 0))
    {


      task->wait ();





      ((task->thr_count () == 0) ? static_cast<void>(0) : ::__ace_assert("/usr/local/include/ace/Module.cpp", 256, "task->thr_count () == 0"));

      delete task;
    }



  this->q_pair_[which] = 0;


  (flags_ &= ~(which + 1));

  return result;
}


# 207 "/usr/local/include/ace/Module.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 214 "/usr/local/include/ace/Module.h" 2 3
# 13 "/usr/local/include/ace/Task_T.cpp" 2 3
# 1 "/usr/local/include/ace/Null_Condition.h" 1 3
# 17 "/usr/local/include/ace/Null_Condition.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Null_Condition.h" 2 3



# 1 "/usr/local/include/ace/Null_Mutex.h" 1 3
# 17 "/usr/local/include/ace/Null_Mutex.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 18 "/usr/local/include/ace/Null_Mutex.h" 2 3
# 35 "/usr/local/include/ace/Null_Mutex.h" 3


class ACE_Time_Value;







class ACE_Null_Mutex
{
public:
  ACE_Null_Mutex (const ACE_TCHAR * = 0)
    : lock_ (0) {}
  ~ACE_Null_Mutex (void) {}

  int remove (void) {return 0;}


  int acquire (void) {return 0;}


  int acquire (ACE_Time_Value &) {(*__errno_location ()) = 62; return -1;}


  int acquire (ACE_Time_Value *) {(*__errno_location ()) = 62; return -1;}


  int tryacquire (void) {return 0;}


  int release (void) {return 0;}


  int acquire_write (void) {return 0;}


  int tryacquire_write (void) {return 0;}


  int tryacquire_write_upgrade (void) {return 0;}


  int acquire_read (void) {return 0;}


  int tryacquire_read (void) {return 0;}


  void dump (void) const {}




  int lock_;
};
# 123 "/usr/local/include/ace/Null_Mutex.h" 3
template <class ACE_LOCK>
class ACE_Guard;
# 133 "/usr/local/include/ace/Null_Mutex.h" 3
template<>
class ACE_Guard<ACE_Null_Mutex>
{
public:

  ACE_Guard (ACE_Null_Mutex &) {}
  ACE_Guard (ACE_Null_Mutex &, int) {}
  ACE_Guard (ACE_Null_Mutex &, int, int) {}




  int acquire (void) { return 0; }
  int tryacquire (void) { return 0; }
  int release (void) { return 0; }
  void disown (void) {}
  int locked (void) { return 1; }
  int remove (void) { return 0; }
  void dump (void) const {}

private:


  ACE_Guard (const ACE_Guard<ACE_Null_Mutex> &);
  void operator= (const ACE_Guard<ACE_Null_Mutex> &);

};

template <class ACE_LOCK>
class ACE_Write_Guard;





template<>
class ACE_Write_Guard<ACE_Null_Mutex>
  : public ACE_Guard<ACE_Null_Mutex>
{
public:
  ACE_Write_Guard (ACE_Null_Mutex &m)
    : ACE_Guard<ACE_Null_Mutex> (m) {}
  ACE_Write_Guard (ACE_Null_Mutex &m, int blocked)
    : ACE_Guard<ACE_Null_Mutex> (m, blocked) {}

  int acquire_write (void) { return 0; }
  int acquire (void) { return 0; }
  int tryacquire_write (void) { return 0; }
  int tryacquire (void) { return 0; }
  void dump (void) const {}
};

template <class ACE_LOCK>
class ACE_Read_Guard;





template<>
class ACE_Read_Guard<ACE_Null_Mutex>
  : public ACE_Guard<ACE_Null_Mutex>
{
public:
  ACE_Read_Guard (ACE_Null_Mutex &m)
    : ACE_Guard<ACE_Null_Mutex> (m) {}
  ACE_Read_Guard (ACE_Null_Mutex &m, int blocked)
    : ACE_Guard<ACE_Null_Mutex> (m, blocked) {}

  int acquire_read (void) { return 0; }
  int acquire (void) { return 0; }
  int tryacquire_read (void) { return 0; }
  int tryacquire (void) { return 0; }
  void dump (void) const {}
};

template <class T> class ACE_Malloc_Lock_Adapter_T;





template<>
class ACE_Malloc_Lock_Adapter_T<ACE_Null_Mutex>
{
public:
  ACE_Null_Mutex * operator () (const ACE_TCHAR *name)
  {
    ACE_Null_Mutex *p;
    do { p = new (::std::nothrow) ACE_Null_Mutex (name); if (p == 0) { (*__errno_location ()) = 12; return 0; } } while (0);
    return p;
  }
};



# 1 "/usr/local/include/ace/post.h" 1 3
# 230 "/usr/local/include/ace/Null_Mutex.h" 2 3
# 22 "/usr/local/include/ace/Null_Condition.h" 2 3









class ACE_Time_Value;
# 40 "/usr/local/include/ace/Null_Condition.h" 3
class ACE_Null_Condition
{
public:
  ACE_Null_Condition (const ACE_Null_Mutex &m,
                      const ACE_TCHAR * = 0,
                      void * = 0)
    : mutex_ ((ACE_Null_Mutex &) m) {}

  ~ACE_Null_Condition (void) {}


  int remove (void) {return 0;}


  int wait (const ACE_Time_Value * = 0) {(*__errno_location ()) = 62; return -1;}


  int wait (ACE_Null_Mutex &,
            const ACE_Time_Value * = 0) {(*__errno_location ()) = 62; return -1;}


  int signal (void) {return 0;}


  int broadcast (void) {return 0;}
  ACE_Null_Mutex &mutex (void) {return this->mutex_;};


  void dump (void) const {}




protected:
  ACE_Null_Mutex &mutex_;

private:

  void operator= (const ACE_Null_Condition &);
  ACE_Null_Condition (const ACE_Null_Condition &);
};



# 1 "/usr/local/include/ace/post.h" 1 3
# 85 "/usr/local/include/ace/Null_Condition.h" 2 3
# 14 "/usr/local/include/ace/Task_T.cpp" 2 3







template <class _ACE_SYNCH> void
ACE_Task<_ACE_SYNCH>::dump (void) const
{
# 41 "/usr/local/include/ace/Task_T.cpp" 3
}




template<class _ACE_SYNCH>
ACE_Task<_ACE_SYNCH>::ACE_Task (ACE_Thread_Manager *thr_man,
                                   ACE_Message_Queue<_ACE_SYNCH> *mq)
  : ACE_Task_Base (thr_man),
    msg_queue_ (0),
    delete_msg_queue_ (false),
    mod_ (0),
    next_ (0)
{
  ;

  if (mq == 0)
    {
      do { mq = new(::std::nothrow) ACE_Message_Queue<_ACE_SYNCH>; if (mq == 0) { (*__errno_location ()) = 12; return; } } while (0);

      this->delete_msg_queue_ = true;
    }

  this->msg_queue_ = mq;
}

template<class _ACE_SYNCH>
ACE_Task<_ACE_SYNCH>::~ACE_Task (void)
{
  ;
  if (this->delete_msg_queue_)
    delete this->msg_queue_;



  this->delete_msg_queue_ = false;
}

template<class _ACE_SYNCH> ACE_Task<_ACE_SYNCH> *
ACE_Task<_ACE_SYNCH>::sibling (void)
{
  ;
  if (this->mod_ == 0)
    return 0;
  else
    return this->mod_->sibling (this);
}

template<class _ACE_SYNCH> const ACE_TCHAR *
ACE_Task<_ACE_SYNCH>::name (void) const
{
  ;
  if (this->mod_ == 0)
    return 0;
  else
    return this->mod_->name ();
}

template<class _ACE_SYNCH> ACE_Module<_ACE_SYNCH> *
ACE_Task<_ACE_SYNCH>::module (void) const
{
  ;
  return this->mod_;
}


# 191 "/usr/local/include/ace/Task_T.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 198 "/usr/local/include/ace/Task_T.h" 2 3
# 305 "/usr/local/include/ace/Task.h" 2 3

# 1 "/usr/local/include/ace/post.h" 1 3
# 307 "/usr/local/include/ace/Task.h" 2 3
# 5 "../../Gadget.h" 2
# 1 "/usr/local/include/ace/Stream.h" 1 3
# 16 "/usr/local/include/ace/Stream.h" 3
# 1 "/usr/local/include/ace/pre.h" 1 3
# 17 "/usr/local/include/ace/Stream.h" 2 3
# 28 "/usr/local/include/ace/Stream.h" 3



template<class _ACE_SYNCH> class ACE_Stream_Iterator;
class ACE_Time_Value;
# 48 "/usr/local/include/ace/Stream.h" 3
template <class _ACE_SYNCH>
class ACE_Stream
{
public:
  friend class ACE_Stream_Iterator<_ACE_SYNCH>;

  enum
  {


    M_DELETE = 3
  };
# 68 "/usr/local/include/ace/Stream.h" 3
  ACE_Stream (void *arg = 0,
              ACE_Module<_ACE_SYNCH> *head = 0,
              ACE_Module<_ACE_SYNCH> *tail = 0);







  virtual int open (void *arg,
                    ACE_Module<_ACE_SYNCH> *head = 0,
                    ACE_Module<_ACE_SYNCH> *tail = 0);


  virtual int close (int flags = M_DELETE);


  virtual ~ACE_Stream (void);






  virtual int push (ACE_Module<_ACE_SYNCH> *mod);




  virtual int pop (int flags = M_DELETE);



  virtual int top (ACE_Module<_ACE_SYNCH> *&mod);


  virtual int insert (const ACE_TCHAR *prev_name,
                      ACE_Module<_ACE_SYNCH> *mod);


  virtual int replace (const ACE_TCHAR *replace_name,
                       ACE_Module<_ACE_SYNCH> *mod,
                       int flags = M_DELETE);



  virtual int remove (const ACE_TCHAR *mod,
                      int flags = M_DELETE);


  virtual ACE_Module<_ACE_SYNCH> *head (void);


  virtual ACE_Module<_ACE_SYNCH> *tail (void);


  virtual ACE_Module<_ACE_SYNCH> *find (const ACE_TCHAR *mod);


  virtual int link (ACE_Stream<_ACE_SYNCH> &);


  virtual int unlink (void);
# 140 "/usr/local/include/ace/Stream.h" 3
  virtual int put (ACE_Message_Block *mb,
                   ACE_Time_Value *timeout = 0);






  virtual int get (ACE_Message_Block *&mb,
                   ACE_Time_Value *timeout = 0);


  virtual int control (ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds cmd,
                       void *args);


  virtual int wait (void);


  virtual void dump (void) const;


  struct __Ace {};

private:


  int unlink_i (void);



  int link_i (ACE_Stream<_ACE_SYNCH> &);


  int push_module (ACE_Module<_ACE_SYNCH> *,
                   ACE_Module<_ACE_SYNCH> * = 0,
                   ACE_Module<_ACE_SYNCH> * = 0);


  ACE_Module<_ACE_SYNCH> *stream_head_;


  ACE_Module<_ACE_SYNCH> *stream_tail_;


  ACE_Stream<_ACE_SYNCH> *linked_us_;



  typename _ACE_SYNCH::MUTEX lock_;


  typename _ACE_SYNCH::CONDITION final_close_;
};






template <class _ACE_SYNCH>
class ACE_Stream_Iterator
{
public:

  ACE_Stream_Iterator (const ACE_Stream<_ACE_SYNCH> &sr);





  int next (const ACE_Module<_ACE_SYNCH> *&next_item);


  int done (void) const;



  int advance (void);

private:

  ACE_Module<_ACE_SYNCH> *next_;
};




# 1 "/usr/local/include/ace/Stream.inl" 1 3






template <class _ACE_SYNCH> inline ACE_Module<_ACE_SYNCH> *
ACE_Stream<_ACE_SYNCH>::head (void)
{
  ;
  return this->stream_head_;
}

template <class _ACE_SYNCH> inline ACE_Module<_ACE_SYNCH> *
ACE_Stream<_ACE_SYNCH>::tail (void)
{
  ;
  return this->stream_tail_;
}

template <class _ACE_SYNCH> inline int
ACE_Stream<_ACE_SYNCH>::wait (void)
{
  ;
  return this->final_close_.wait ();
}

template <class _ACE_SYNCH> inline int
ACE_Stream_Iterator<_ACE_SYNCH>::next (const ACE_Module<_ACE_SYNCH> *&mod)
{
  ;
  mod = this->next_;
  return this->next_ != 0;
}

template <class _ACE_SYNCH> inline int
ACE_Stream_Iterator<_ACE_SYNCH>::done (void) const
{
  ;
  return this->next_ == 0;
}

template <class _ACE_SYNCH> int
ACE_Stream_Iterator<_ACE_SYNCH>::advance (void)
{
  ;
  this->next_ = this->next_->next ();
  return this->next_ != 0;
}


# 229 "/usr/local/include/ace/Stream.h" 2 3



# 1 "/usr/local/include/ace/Stream.cpp" 1 3







# 1 "/usr/local/include/ace/Stream.h" 1 3
# 9 "/usr/local/include/ace/Stream.cpp" 2 3





# 1 "/usr/local/include/ace/Stream_Modules.h" 1 3
# 15 "/usr/local/include/ace/Stream.cpp" 2 3












template <class _ACE_SYNCH> void
ACE_Stream<_ACE_SYNCH>::dump (void) const
{
# 72 "/usr/local/include/ace/Stream.cpp" 3
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::push (ACE_Module<_ACE_SYNCH> *new_top)
{
  ;
  if (this->push_module (new_top,
                          this->stream_head_->next (),
                          this->stream_head_) == -1)
    return -1;
  else
    return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::put (ACE_Message_Block *mb, ACE_Time_Value *tv)
{
  ;
  return this->stream_head_->writer ()->put (mb, tv);
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::get (ACE_Message_Block *&mb, ACE_Time_Value *tv)
{
  ;
  return this->stream_head_->reader ()->getq (mb, tv);
}




template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::top (ACE_Module<_ACE_SYNCH> *&m)
{
  ;
  if (this->stream_head_->next () == this->stream_tail_)
    return -1;
  else
    {
      m = this->stream_head_->next ();
      return 0;
    }
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::insert (const ACE_TCHAR *prev_name,
                                   ACE_Module<_ACE_SYNCH> *mod)
{
  ;

  for (ACE_Module<_ACE_SYNCH> *prev_mod = this->stream_head_;
       prev_mod != 0;
       prev_mod = prev_mod->next ())
    if (ACE_OS::strcmp (prev_mod->name (), prev_name) == 0)
      {
        ACE_Module<_ACE_SYNCH> *next_mod = prev_mod->next ();


        if (next_mod == 0)
          return -1;

        mod->link (next_mod);
        prev_mod->link (mod);

        if (mod->reader ()->open (mod->arg ()) == -1)
          return -1;

        if (mod->writer ()->open (mod->arg ()) == -1)
          return -1;

        return 0;
      }

  return -1;
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::replace (const ACE_TCHAR *replace_name,
                                    ACE_Module<_ACE_SYNCH> *mod,
                                    int flags)
{
  ;
  ACE_Module<_ACE_SYNCH> *prev_mod = 0;

  for (ACE_Module<_ACE_SYNCH> *rep_mod = this->stream_head_;
       rep_mod != 0;
       rep_mod = rep_mod->next ())
    if (ACE_OS::strcmp (rep_mod->name (), replace_name) == 0)
      {
        ACE_Module<_ACE_SYNCH> *next_mod = rep_mod->next ();

        if (next_mod)
          mod->link (next_mod);
        else
          {
            mod->writer ()->next (0);
            mod->next (0);
            this->stream_tail_ = mod;
          }

        if (prev_mod)
          prev_mod->link (mod);
        else
          {
            mod->reader ()->next (0);
            this->stream_head_ = mod;
          }

        if (mod->reader ()->open (mod->arg ()) == -1)
          return -1;

        if (mod->writer ()->open (mod->arg ()) == -1)
          return -1;

        if (flags != ACE_Module<_ACE_SYNCH>::M_DELETE_NONE)
          {
            rep_mod->close (flags);
            delete rep_mod;
          }

        return 0;
      }
    else
      prev_mod = rep_mod;

  return -1;
}




template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::pop (int flags)
{
  ;
  if (this->stream_head_->next () == this->stream_tail_)
    return -1;
  else
    {

      ACE_Module<_ACE_SYNCH> *top_mod = this->stream_head_->next ();
      ACE_Module<_ACE_SYNCH> *new_top = top_mod->next ();

      this->stream_head_->next (new_top);



      top_mod->close (flags);


      if (flags != ACE_Module<_ACE_SYNCH>::M_DELETE_NONE)
        delete top_mod;

      this->stream_head_->writer ()->next (new_top->writer ());
      new_top->reader ()->next (this->stream_head_->reader ());
      return 0;
    }
}




template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::remove (const ACE_TCHAR *name,
                                   int flags)
{
  ;
  ACE_Module<_ACE_SYNCH> *prev = 0;

  for (ACE_Module<_ACE_SYNCH> *mod = this->stream_head_;
       mod != 0;
       mod = mod->next ())
    if (ACE_OS::strcmp (mod->name (), name) == 0)
      {
        if (prev == 0)
          this->stream_head_->link (mod->next ());
        else
          prev->link (mod->next ());


        if (flags != ACE_Module<_ACE_SYNCH>::M_DELETE_NONE)
          {

            mod->close (flags);
            delete mod;
          }

        return 0;
      }
    else
      prev = mod;

  return -1;
}

template <class _ACE_SYNCH> ACE_Module<_ACE_SYNCH> *
ACE_Stream<_ACE_SYNCH>::find (const ACE_TCHAR *name)
{
  ;
  for (ACE_Module<_ACE_SYNCH> *mod = this->stream_head_;
       mod != 0;
       mod = mod->next ())
    if (ACE_OS::strcmp (mod->name (), name) == 0)
        return mod;

  return 0;
}



template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::push_module (ACE_Module<_ACE_SYNCH> *new_top,
                                        ACE_Module<_ACE_SYNCH> *current_top,
                                        ACE_Module<_ACE_SYNCH> *head)
{
  ;
  ACE_Task<_ACE_SYNCH> *nt_reader = new_top->reader ();
  ACE_Task<_ACE_SYNCH> *nt_writer = new_top->writer ();
  ACE_Task<_ACE_SYNCH> *ct_reader = 0;
  ACE_Task<_ACE_SYNCH> *ct_writer = 0;

  if (current_top)
    {
      ct_reader = current_top->reader ();
      ct_writer = current_top->writer ();
      ct_reader->next (nt_reader);
    }

  nt_writer->next (ct_writer);

  if (head)
    {
      if (head != new_top)
        head->link (new_top);
    }
  else
    nt_reader->next (0);

  new_top->next (current_top);

  if (nt_reader->open (new_top->arg ()) == -1)
    return -1;

  if (nt_writer->open (new_top->arg ()) == -1)
    return -1;
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::open (void *a,
                                 ACE_Module<_ACE_SYNCH> *head,
                                 ACE_Module<_ACE_SYNCH> *tail)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  ACE_Task<_ACE_SYNCH> *h1 = 0, *h2 = 0;
  ACE_Task<_ACE_SYNCH> *t1 = 0, *t2 = 0;

  if (head == 0)
    {
      do { h1 = new (::std::nothrow) ACE_Stream_Head<_ACE_SYNCH>; if (h1 == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      do { h2 = new (::std::nothrow) ACE_Stream_Head<_ACE_SYNCH>; if (h2 == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      do { head = new (::std::nothrow) ACE_Module<_ACE_SYNCH> ("ACE_Stream_Head", h1, h2, a, M_DELETE); if (head == 0) { (*__errno_location ()) = 12; return -1; } } while (0);





    }

  if (tail == 0)
    {
      do { t1 = new (::std::nothrow) ACE_Stream_Tail<_ACE_SYNCH>; if (t1 == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      do { t2 = new (::std::nothrow) ACE_Stream_Tail<_ACE_SYNCH>; if (t2 == 0) { (*__errno_location ()) = 12; return -1; } } while (0);


      do { tail = new (::std::nothrow) ACE_Module<_ACE_SYNCH> ("ACE_Stream_Tail", t1, t2, a, M_DELETE); if (tail == 0) { (*__errno_location ()) = 12; return -1; } } while (0);





    }


  if ((head == 0 && (h1 == 0 || h2 == 0))
      || (tail == 0 && (t1 == 0 || t2 == 0)))
    {
      delete h1;
      delete h2;
      delete t1;
      delete t2;
      delete head;
      delete tail;
      (*__errno_location ()) = 12;
      return -1;
    }

  this->stream_head_ = head;
  this->stream_tail_ = tail;

  if (this->push_module (this->stream_tail_) == -1)
    return -1;
  else if (this->push_module (this->stream_head_,
                              this->stream_tail_,
                              this->stream_head_) == -1)
    return -1;

  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::close (int flags)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  if (this->stream_head_ != 0
      && this->stream_tail_ != 0)
    {

      this->unlink_i ();

      int result = 0;



      while (this->stream_head_->next () != this->stream_tail_)
        if (this->pop (flags) == -1)
          result = -1;


      if (this->stream_head_->close (flags) == -1)
        result = -1;
      if (this->stream_tail_->close (flags) == -1)
        result = -1;


      delete this->stream_head_;
      delete this->stream_tail_;

      this->stream_head_ = 0;
      this->stream_tail_ = 0;


      this->final_close_.broadcast ();
      return result;
    }
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::control (ACE_IO_Cntl_Msg::ACE_IO_Cntl_Cmds cmd,
                                    void *a)
{
  ;
  ACE_IO_Cntl_Msg ioc (cmd);

  ACE_Message_Block *db;


  do { db = new (::std::nothrow) ACE_Message_Block (sizeof (int), ACE_Message_Block::MB_IOCTL, 0, (char *) a); if (db == 0) { (*__errno_location ()) = 12; return -1; } } while (0);
# 449 "/usr/local/include/ace/Stream.cpp" 3
  ACE_Message_Block *cb = 0;

  do { cb = new (::std::nothrow) ACE_Message_Block (sizeof ioc, ACE_Message_Block::MB_IOCTL, db, (char *) &ioc); if (cb == 0) { (*__errno_location ()) = 12; return -1; } } while (0);
# 463 "/usr/local/include/ace/Stream.cpp" 3
  if (cb == 0)
    {
      db->release ();
      (*__errno_location ()) = 12;
      return -1;
    }

  int result;

  if (this->stream_head_->writer ()->put (cb) == -1)
    result = -1;
  else if (this->stream_head_->reader ()->getq (cb) == -1)
    result = -1;
  else
    result = ((ACE_IO_Cntl_Msg *) cb->rd_ptr ())->rval ();


  cb->release ();

  return result;
}






template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::link_i (ACE_Stream<_ACE_SYNCH> &us)
{
  ;
  this->linked_us_ = &us;

  us.linked_us_ = this;

  ACE_Module<_ACE_SYNCH> *my_tail = this->stream_head_;

  if (my_tail == 0)
    return -1;


  while (my_tail->next () != this->stream_tail_)
    my_tail = my_tail->next ();

  ACE_Module<_ACE_SYNCH> *other_tail = us.stream_head_;

  if (other_tail == 0)
    return -1;


  while (other_tail->next () != us.stream_tail_)
    other_tail = other_tail->next ();


  my_tail->writer ()->next (other_tail->reader ());
  other_tail->writer ()->next (my_tail->reader ());
  return 0;
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::link (ACE_Stream<_ACE_SYNCH> &us)
{
  ;

  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };

  return this->link_i (us);
}



template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::unlink_i (void)
{
  ;



  if (this->linked_us_ != 0)
    {
      ACE_Module<_ACE_SYNCH> *my_tail = this->stream_head_;


      if (my_tail)
        {

          while (my_tail->next () != this->stream_tail_)
            my_tail = my_tail->next ();


          my_tail->writer ()->next (this->stream_tail_->writer ());
        }

      ACE_Module<_ACE_SYNCH> *other_tail =
        this->linked_us_->stream_head_;


      if (other_tail != 0)
        {
          while (other_tail->next () != this->linked_us_->stream_tail_)
            other_tail = other_tail->next ();

          other_tail->writer ()->next (this->linked_us_->stream_tail_->writer ());

        }


      this->linked_us_->linked_us_ = 0;

      this->linked_us_ = 0;
      return 0;
    }
  else
    return -1;
}

template <class _ACE_SYNCH> int
ACE_Stream<_ACE_SYNCH>::unlink (void)
{
  ;
  ACE_Guard< typename _ACE_SYNCH::MUTEX > ace_mon (this->lock_); if (ace_mon.locked () != 0) { ;; } else { return -1; };
  return this->unlink_i ();
}

template <class _ACE_SYNCH>
ACE_Stream<_ACE_SYNCH>::ACE_Stream (void * a,
                                       ACE_Module<_ACE_SYNCH> *head,
                                       ACE_Module<_ACE_SYNCH> *tail)
  : linked_us_ (0),
    final_close_ (lock_)
{
  ;
  if (this->open (a, head, tail) == -1)
    do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("/usr/local/include/ace/Stream.cpp", 598, -1, __ace_error); ace___->log (LM_ERROR, "ACE_Stream<ACE_SYNCH_USE>::open (%s, %s)\n", head->name (), tail->name ()); } while (0);


}

template <class _ACE_SYNCH>
ACE_Stream<_ACE_SYNCH>::~ACE_Stream (void)
{
  ;

  if (this->stream_head_ != 0)
    this->close ();
}

template <class _ACE_SYNCH>
ACE_Stream_Iterator<_ACE_SYNCH>::ACE_Stream_Iterator (const ACE_Stream<_ACE_SYNCH> &sr)
  : next_ (sr.stream_head_)
{
  ;
}


# 233 "/usr/local/include/ace/Stream.h" 2 3






# 1 "/usr/local/include/ace/post.h" 1 3
# 240 "/usr/local/include/ace/Stream.h" 2 3
# 6 "../../Gadget.h" 2


# 1 "../../GadgetContainerMessage.h" 1





template <class T> class GadgetContainerMessage : public ACE_Message_Block
{
  typedef ACE_Message_Block base;

public:
  GadgetContainerMessage()
    : base(sizeof(T))
    , content_(0)
  {

    content_ = new (this->wr_ptr()) T;


    this->wr_ptr(sizeof(T));
  }

  virtual ~GadgetContainerMessage()
  {

    if (content_) content_->~T();


  }

  T* getObjectPtr()
  {
    return content_;
  }

protected:
  T* content_;

};
# 9 "../../Gadget.h" 2

class Gadget : public ACE_Task<ACE_MT_SYNCH>
{

public:
  typedef ACE_Task<ACE_MT_SYNCH> inherited;

  enum
  {
    GADGET_MESSAGE_CONFIG = (ACE_Message_Block::USER_FLAGS << 1)
  };

  Gadget()
    : inherited()
    , desired_threads_(1)
  {
    ;
  }

  virtual int init(void)
  {
    ;
    return 0;
  }

  virtual int open(void* = 0)
  {
    ;

    return this->activate( 0x00000002 | 0x00010000,
      this->desired_threads() );
  }

  int put(ACE_Message_Block *m, ACE_Time_Value* timeout = 0)
  {
    ;

    return this->putq(m, timeout);
  }

  virtual unsigned int desired_threads()
  {
    ;

    return desired_threads_;
  }

  virtual void desired_threads(unsigned int t)
  {
    ;

    desired_threads_ = t;
  }

  virtual int close(unsigned long flags)
  {
    ;

    int rval = 0;
    if (flags == 1) {
      ACE_Message_Block *hangup = new ACE_Message_Block();
      hangup->msg_type( ACE_Message_Block::MB_HANGUP );
      if (this->putq(hangup) == -1) {
 hangup->release();
 do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 76, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "Gadget::close, putq"); return -1; } while (0);



      }
      rval = this->wait();
    }
    return rval;
  }

  virtual int svc(void)
  {
    ;

    for (ACE_Message_Block *m = 0; ;) {

      if (this->getq(m) == -1) {
 do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 92, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "Gadget::getq"); return -1; } while (0);


      }


      if (m->msg_type() == ACE_Message_Block::MB_HANGUP) {
 if (this->putq(m) == -1) {
   do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 101, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "Gadget::svc, putq"); return -1; } while (0);



 }
 break;
      }



      if (m->flags() & GADGET_MESSAGE_CONFIG) {
 if (this->process_config(m) == -1) {
   m->release();
   do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 114, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "Gadget::svc, process_config"); return -1; } while (0);




 }


 if (this->next()) {
   if (this->next()->putq(m) == -1) {
     m->release();
     do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 125, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "Gadget::svc, passing config on to next gadget"); return -1; } while (0);



   }
 }
 continue;
      }

      if (this->process(m) == -1) {
 m->release();
 do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 136, -1, __ace_error); ace___->log (LM_ERROR, "%p\n", "Gadget::svc, process"); return -1; } while (0);



      }

    }
    return 0;
  }


protected:
  virtual int next_step(ACE_Message_Block *m)
  {
    return this->put_next(m);
  }

  virtual int process(ACE_Message_Block * m) = 0;

  virtual int process_config(ACE_Message_Block * m) {
    return 0;
  }

  unsigned int desired_threads_;
};


class EndGadget : public Gadget
{
protected:
  virtual int process(ACE_Message_Block *m)
  {
    ;

    return 0;
  }

  virtual int next_step(ACE_Message_Block *m)
  {
    ;
    m->release();
    return 0;
  }

  virtual int process_config(ACE_Message_Block * m) {
    m->release();
    return 0;
  }

};

template <class P1> class Gadget1 : public Gadget
{

protected:
  int process(ACE_Message_Block* mb)
  {
    GadgetContainerMessage<P1>* m = dynamic_cast< GadgetContainerMessage<P1>* >(mb);

    if (!m) {
      do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 195, -1, __ace_error); ace___->log ( LM_ERROR, "%p\n", "Gadget1::process, dynamic cast failed"); return -1; } while (0);


    }

    process(m);

    return 0;
  }

  virtual int process(GadgetContainerMessage<P1>* m) = 0;

};

template <class P1, class P2> class Gadget2 : public Gadget
{

protected:
  int process(ACE_Message_Block* mb)
  {

    GadgetContainerMessage<P1>* m1 = dynamic_cast< GadgetContainerMessage<P1>* >(mb);

    if (!m1) {
      do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 223, 0, __ace_error); ace___->log (LM_ERROR, "%s -> %s, %s, %s, %@, %@\n", this->module()->name(), "Gadget2::process, dynamic cast failed (arg 0)", typeid(GadgetContainerMessage<P1>*).name(), typeid(m1).name(), mb, m1); } while (0);







      return -1;
    }

    if (!m1->cont()) {
      do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 231, -1, __ace_error); ace___->log ( LM_ERROR, "%p\n", "Gadget2::process, missing argument"); return -1; } while (0);


    }

    GadgetContainerMessage<P2>* m2 = dynamic_cast< GadgetContainerMessage<P2>* >(m1->cont());

    if (!m2) {
      do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("../../Gadget.h", 240, -1, __ace_error); ace___->log ( LM_ERROR, "%s\n", this->module()->name(), "Gadget2::process, dynamic cast failed (arg 1)"); return -1; } while (0);



    }

    return this->process(m1,m2);
  }

  virtual int process(GadgetContainerMessage<P1>* m1, GadgetContainerMessage<P2>* m2) = 0;

};
# 7 "../../Gadgetron.h" 2
# 7 "GPUCGGadget.h" 2
# 1 "../../inc/NDArray.h" 1




# 1 "/usr/include/c++/4.4/vector" 1 3
# 59 "/usr/include/c++/4.4/vector" 3
       
# 60 "/usr/include/c++/4.4/vector" 3





# 1 "/usr/include/c++/4.4/bits/stl_vector.h" 1 3
# 65 "/usr/include/c++/4.4/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {


  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
# 131 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 169 "/usr/include/c++/4.4/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 226 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 241 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 296 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 324 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 373 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 389 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 416 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 531 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 551 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
 else
   insert(end(), __new_size - size(), __x);
      }





      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 594 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 609 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 624 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 649 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 667 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 713 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      pointer
      data()
      { return pointer(this->_M_impl._M_start); }

      const_pointer
      data() const
      { return const_pointer(this->_M_impl._M_start); }
# 732 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }
# 763 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 799 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 849 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 867 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 892 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 913 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 925 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void



      swap(vector& __x)

      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 984 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1048 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1088 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_insert_aux(iterator __position, const value_type& __x);







      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1166 "/usr/include/c++/4.4/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1183 "/usr/include/c++/4.4/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }
# 1231 "/usr/include/c++/4.4/bits/stl_vector.h" 3
}
# 66 "/usr/include/c++/4.4/vector" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_bvector.h" 1 3
# 62 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }
# 429 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };

}




namespace std __attribute__ ((__visibility__ ("default"))) {
# 473 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;

  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
# 538 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }
# 586 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }







    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }
# 654 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void



    swap(vector& __x)

    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }






    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }

    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };

}
# 67 "/usr/include/c++/4.4/vector" 2 3


# 1 "/usr/include/c++/4.4/bits/vector.tcc" 1 3
# 60 "/usr/include/c++/4.4/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   (this->_M_impl._M_start),
   (this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }
# 104 "/usr/include/c++/4.4/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {
# 126 "/usr/include/c++/4.4/bits/vector.tcc" 3
     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__last != end())
 std::copy(__last, end(), __first);
      _M_erase_at_end(__first.base() + (end() - __last));
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }
# 293 "/usr/include/c++/4.4/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)

    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      (*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;

   _Tp __x_copy = __x;

   std::copy_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);



   *__position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       this->_M_impl.construct(__new_start + __elems_before,



                               __x);

       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

}
# 70 "/usr/include/c++/4.4/vector" 2 3
# 6 "../../inc/NDArray.h" 2
# 1 "/usr/include/c++/4.4/iostream" 1 3
# 37 "/usr/include/c++/4.4/iostream" 3
       
# 38 "/usr/include/c++/4.4/iostream" 3





namespace std __attribute__ ((__visibility__ ("default"))) {
# 58 "/usr/include/c++/4.4/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;

}
# 7 "../../inc/NDArray.h" 2

template <class T> class NDArray
{
 public:
  NDArray ()
    : data_(0)
    , elements_(0)
  {

  }

  ~NDArray() {
    deallocate_memory();
  }

  T* create(std::vector<int>& dimensions) {
    dimensions_ = dimensions;
    allocate_memory();
    return get_data_ptr();
  }


  NDArray(const NDArray<T>& a) {
    data_ = 0;
    dimensions_ = a.dimensions_;
    if (allocate_memory() == 0) {
      memcpy( data_, a.data_, elements_*sizeof(T) );
    }
  }

  T& operator[] (long int i);
  NDArray<T>& operator=(const NDArray<T> &a);

  int get_number_of_dimensions() {
    return dimensions_.size();
  }

  int get_size(unsigned int dimension) {
    if (dimension >= dimensions_.size() || dimension < 0) {
      return 1;
    } else {
      return dimensions_[dimension];
    }
  }

  std::vector<int> get_dimensions() {
    return dimensions_;
  }

  unsigned long int get_number_of_elements() {
    return elements_;
  }

  int clear() {
    if (data_ == 0) {
      return -1;
    }

    memset(data_, 0, elements_*sizeof(T));
    return 0;
  }

  T* get_data_ptr() { return data_; }

 private:
  std::vector<int> dimensions_;
  T* data_;
  long int elements_;

  int allocate_memory()
  {
    deallocate_memory();

    elements_ = 1;
    for (unsigned int i = 0; i < dimensions_.size(); i++) {
      elements_ *= dimensions_[i];
    }

    try {
      data_ = new T[elements_];
    } catch (std::bad_alloc&) {
      std::cout << "NDArray<>::allocate memory failed" << std::endl;
      return -1;
    }

    clear();
    return 0;
  }

  int deallocate_memory() {
    if (data_) {
      delete [] data_;
      data_ = 0;
    }

    return 0;
  }

};
# 8 "GPUCGGadget.h" 2
# 1 "../../gadgetheaders.h" 1



# 1 "/usr/local/include/ace/Basic_Types.h" 1 3
# 5 "../../gadgetheaders.h" 2
# 15 "../../gadgetheaders.h"
enum GadgetMessageID {
  GADGET_MESSAGE_ID_MIN = 0,
  GADGET_MESSAGE_ACQUISITION,
  GADGET_MESSAGE_CONFIGURATION,
  GADGET_MESSAGE_NEW_MEASUREMENT,
  GADGET_MESSAGE_END_OF_SCAN,
  GADGET_MESSAGE_IMAGE,
  GADGET_MESSAGE_EMPTY,
  GADGET_MESSAGE_ID_MAX
};

struct GadgetMessageIdentifier
{
  ACE_UINT16 id;
};

struct GadgetMessageConfigurator
{
  char configurator_lib[1024];
  char configurator_name[1024];
  ACE_UINT32 configuration_length;
};


struct LoopCounters {
  ACE_UINT16 line;
  ACE_UINT16 acquisition;
  ACE_UINT16 slice;
  ACE_UINT16 partition;
  ACE_UINT16 echo;
  ACE_UINT16 phase;
  ACE_UINT16 repetition;
  ACE_UINT16 set;
  ACE_UINT16 segment;
  ACE_UINT16 channel;
};


struct GadgetMessageAcquisition
{
  ACE_UINT32 flags;
  ACE_UINT32 meas_uid;
  ACE_UINT32 scan_counter;
  ACE_UINT32 time_stamp;
  ACE_UINT16 samples;
  ACE_UINT16 channels;
  float position[3];
  float quarternion[4];
  LoopCounters idx;
  LoopCounters min_idx;
  LoopCounters max_idx;
};

struct GadgetMessageImage
{
  ACE_UINT16 matrix_size[3];
  ACE_UINT16 channels;
  float position[3];
  float quarternion[4];
  LoopCounters data_idx_min;
  LoopCounters data_idx_max;
  LoopCounters data_idx_current;
};
# 9 "GPUCGGadget.h" 2

class GPUCGGadget :
public Gadget2<GadgetMessageAcquisition, NDArray< std::complex<float> > >
{

 protected:
  virtual
    int process(GadgetContainerMessage<GadgetMessageAcquisition>* m1,
  GadgetContainerMessage< NDArray< std::complex<float> > >* m2);

};
# 2 "GPUCGGadget.cpp" 2

int GPUCGGadget::process(GadgetContainerMessage<GadgetMessageAcquisition>* m1,
     GadgetContainerMessage< NDArray< std::complex<float> > >* m2)
{
  do { int const __ace_error = ACE_Log_Msg::last_error_adapter (); ACE_Log_Msg *ace___ = ACE_Log_Msg::instance (); ace___->conditional_set ("GPUCGGadget.cpp", 6, 0, __ace_error); ace___->log (LM_DEBUG, "[file %N, line %l]", "GPUCGGadget::process\n", ); } while (0);

  return this->next()->putq(m1);
}
