#pragma once

//
// Overloaded operators for float2/3/4
//

#include <vector_functions.h>
#include <cuComplex.h>

inline __host__ __device__ float2 operator *(float2 a, float2 b)
{
	return make_float2(a.x*b.x, a.y*b.y);
}

inline __host__ __device__ float3 operator *(float3 a, float3 b)
{
	return make_float3(a.x*b.x, a.y*b.y, a.z*b.z);
}

inline __host__ __device__ float4 operator *(float4 a, float4 b)
{
	return make_float4(a.x*b.x, a.y*b.y, a.z*b.z, a.w*b.w);
}

inline __host__ __device__ float2 operator *(float f, float2 v)
{
	return make_float2(v.x*f, v.y*f);
}

inline __host__ __device__ float3 operator *(float f, float3 v)
{
	return make_float3(v.x*f, v.y*f, v.z*f);
}

inline __host__ __device__ float4 operator *(float f, float4 v)
{
	return make_float4(v.x*f, v.y*f, v.z*f, v.w*f);
}

inline __host__ __device__ float2 operator *(float2 v, float f)
{
	return make_float2(v.x*f, v.y*f);
}

inline __host__ __device__ float3 operator *(float3 v, float f)
{
	return make_float3(v.x*f, v.y*f, v.z*f);
}

inline __host__ __device__ float4 operator *(float4 v, float f)
{
	return make_float4(v.x*f, v.y*f, v.z*f, v.w*f);
}

inline __host__ __device__ void operator *=(float2 &b, float2 a)
{
	b.x *= a.x;
	b.y *= a.y;
}

inline __host__ __device__ void operator *=(float3 &b, float3 a)
{
	b.x *= a.x;
	b.y *= a.y;
	b.z *= a.z;
}

inline __host__ __device__ void operator *=(float4 &b, float4 a)
{
	b.x *= a.x;
	b.y *= a.y;
	b.z *= a.z;
	b.w *= a.w;
}

inline __host__ __device__ void operator *=(float2 &b, float a)
{
	b.x *= a;
	b.y *= a;
}

inline __host__ __device__ void operator *=(float3 &b, float a)
{
	b.x *= a;
	b.y *= a;
	b.z *= a;
}

inline __host__ __device__ void operator *=(float4 &b, float a)
{
	b.x *= a;
	b.y *= a;
	b.z *= a;
	b.w *= a;
}

inline __host__ __device__ float2 operator +(float2 a, float2 b)
{
	return make_float2(a.x+b.x, a.y+b.y);
}

inline __host__ __device__ float3 operator +(float3 a, float3 b)
{
	return make_float3(a.x+b.x, a.y+b.y, a.z+b.z);
}

inline __host__ __device__ float4 operator +(float4 a, float4 b)
{
	return make_float4(a.x+b.x, a.y+b.y, a.z+b.z, a.w+b.w);
}

inline __host__ __device__ void operator +=(float2 &b, float2 a)
{
	b.x += a.x;
	b.y += a.y;
}

inline __host__ __device__ void operator +=(float3 &b, float3 a)
{
	b.x += a.x;
	b.y += a.y;
	b.z += a.z;
}

inline __host__ __device__ void operator +=(float4 &b, float4 a)
{
	b.x += a.x;
	b.y += a.y;
	b.z += a.z;
	b.w += a.w;
}

inline __host__ __device__ float2 operator -(float2 a, float2 b)
{
	return make_float2(a.x-b.x, a.y-b.y);
}

inline __host__ __device__ float3 operator -(float3 a, float3 b)
{
	return make_float3(a.x-b.x, a.y-b.y, a.z-b.z);
}

inline __host__ __device__ float4 operator -(float4 a, float4 b)
{
	return make_float4(a.x-b.x, a.y-b.y, a.z-b.z, a.w-b.w);
}

inline __host__ __device__ void operator -=(float2 & b, float2 a)
{
	b.x -= a.x;
	b.y -= a.y;
}

inline __host__ __device__ void operator -=(float3 & b, float3 a)
{
	b.x -= a.x;
	b.y -= a.y;
	b.z -= a.z;
}

inline __host__ __device__ void operator -=(float4 & b, float4 a)
{
	b.x -= a.x;
	b.y -= a.y;
	b.z -= a.z;
	b.w -= a.w;
}

inline __host__ __device__ float2 operator /(float2 a, float2 b)
{
	return make_float2(a.x/b.x, a.y/b.y);
}

inline __host__ __device__ float3 operator /(float3 a, float3 b)
{
	return make_float3(a.x/b.x, a.y/b.y, a.z/b.z);
}

inline __host__ __device__ float4 operator /(float4 a, float4 b)
{
	return make_float4(a.x/b.x, a.y/b.y, a.z/b.z, a.w/b.w);
}

inline __host__ __device__ float2 operator /(float2 a, float f)
{
	return make_float2(a.x/f, a.y/f);
}

inline __host__ __device__ float3 operator /(float3 a, float f)
{
	return make_float3(a.x/f, a.y/f, a.z/f);
}

inline __host__ __device__ float4 operator /(float4 a, float f)
{
	return make_float4(a.x/f, a.y/f, a.z/f, a.w/f);
}

inline __host__ __device__ void operator /=(float2 &b, float f)
{
	b.x /= f;
	b.y /= f;
}

inline __host__ __device__ void operator /=(float3 &b, float f)
{
	b.x /= f;
	b.y /= f;
	b.z /= f;
}

inline __host__ __device__ void operator /=(float4 &b, float f)
{
	b.x /= f;
	b.y /= f;
	b.z /= f;
	b.w /= f;
}

__inline__ __host__ __device__ bool operator <(float2 f1, float2 f2)
{
  return f1.x<f2.x && f1.y<f2.y;
}

__inline__ __host__ __device__ bool operator <(float3 f1, float3 f2)
{
  return f1.x<f2.x && f1.y<f2.y && f1.z<f2.z;
}

__inline__ __host__ __device__ bool operator <(float4 f1, float4 f2)
{
  return f1.x<f2.x && f1.y<f2.y && f1.z<f2.z && f1.w<f2.w;
}

__inline__ __host__ __device__ bool operator <=(float2 f1, float2 f2)
{
  return f1.x<=f2.x && f1.y<=f2.y;
}

__inline__ __host__ __device__ bool operator <=(float3 f1, float3 f2)
{
  return f1.x<=f2.x && f1.y<=f2.y && f1.z<=f2.z;
}

__inline__ __host__ __device__ bool operator <=(float4 f1, float4 f2)
{
  return f1.x<=f2.x && f1.y<=f2.y && f1.z<=f2.z && f1.w<=f2.w;
}

__inline__ __host__ __device__ bool operator >(float2 f1, float2 f2)
{
  return f1.x>f2.x && f1.y>f2.y;
}

__inline__ __host__ __device__ bool operator >(float3 f1, float3 f2)
{
  return f1.x>f2.x && f1.y>f2.y && f1.z>f2.z;
}

__inline__ __host__ __device__ bool operator >(float4 f1, float4 f2)
{
  return f1.x>f2.x && f1.y>f2.y && f1.z>f2.z && f1.w>f2.w;
}

__inline__ __host__ __device__ bool operator >=(float2 f1, float2 f2)
{
  return f1.x>=f2.x && f1.y>=f2.y;
}

__inline__ __host__ __device__ bool operator >=(float3 f1, float3 f2)
{
  return f1.x>=f2.x && f1.y>=f2.y && f1.z>=f2.z;
}

__inline__ __host__ __device__ bool operator >=(float4 f1, float4 f2)
{
  return f1.x>=f2.x && f1.y>=f2.y && f1.z>=f2.z && f1.w>=f2.w;
}

__inline__ __host__ __device__ bool operator ==(float2 a, float2 b)
{
  return (a.x==b.x && a.y==b.y);
}

__inline__ __host__ __device__ bool operator ==(float3 a, float3 b)
{
  return (a.x==b.x && a.y==b.y && a.z==b.z );
}

__inline__ __host__ __device__ bool operator ==(float4 a, float4 b)
{
  return (a.x==b.x && a.y==b.y && a.z==b.z && a.w==b.w );
}
