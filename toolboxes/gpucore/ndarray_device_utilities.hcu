#pragma once

#include "cuNDArray.h"
#include "vectord.h"

#include <memory>
#include <vector>

//	
// cuNDArray utilities
//

//
// Utilities overwriting the input
//

// Clear
template<class T> 
void cuNDA_clear( cuNDArray<T> *data );

// Abs
template<class T> 
void cuNDA_abs( cuNDArray<T> *in_out );

// Reciprocal
template<class T> 
void cuNDA_reciprocal( cuNDArray<T> *in_out );

// Normalize (scalar entries)
template<class REAL>
void cuNDA_normalize( cuNDArray<REAL> *in_out, REAL new_max );

// Normalize by RSS
template<class REAL, class T> 
bool cuNDA_rss_normalize( cuNDArray<T> *in_out, unsigned int dim );

// Scale (with constant)
template<class A, class X> 
void cuNDA_scale( A a, cuNDArray<X> *x );

// Scale (component-wise)
template<class A, class X> 
bool cuNDA_scale( cuNDArray<A> *a, cuNDArray<X> *x );

// 'axpy' - for real and complex types
template<class A, class XY> 
bool cuNDA_axpy( A a, cuNDArray<XY> *x, cuNDArray<XY> *y );

// 'axpby' - for real and complex types
template<class A, class B, class XY> 
bool cuNDA_axpby( cuNDArray<A> *a, cuNDArray<XY> *x, cuNDArray<B> *b, cuNDArray<XY> *y );

//
// Utilities returning an auto_ptr to the resulting cuNDArray
//

// Norm
template<class REAL, class T>
std::auto_ptr< cuNDArray<REAL> > cuNDA_norm( cuNDArray<T> *data );

// Norm squared
template<class REAL, class T> 
std::auto_ptr< cuNDArray<REAL> > cuNDA_norm_squared( cuNDArray<T> *data );

// RSS
template<class REAL, class T> 
std::auto_ptr< cuNDArray<REAL> > cuNDA_rss( cuNDArray<T> *data, unsigned int dim );

// Sum
template<class T> 
std::auto_ptr< cuNDArray<T> > cuNDA_sum( cuNDArray<T> *data, unsigned int dim );

// Build correlation matrix
template<class T>
std::auto_ptr< cuNDArray<T> > cuNDA_correlation( cuNDArray<T> *data );

//
// Utilities limited to UINTd instantiation
//

// Crop
template<class T, unsigned int D>
bool cuNDA_crop( vectord<unsigned int,D> offset, cuNDArray<T> *in, cuNDArray<T> *out );

// Expand with zero filling
template<class T, unsigned int D>
bool cuNDA_expand_with_zero_fill( cuNDArray<T> *in, cuNDArray<T> *out );

// Zero fill border (rectangular).
template<class T, unsigned int D> 
bool cuNDA_zero_fill_border( vectord<unsigned int, D> matrix_size, cuNDArray<T> *image );

// Border fill (circular)
template<class REAL, class T, unsigned int D>
bool cuNDA_zero_fill_border( vectord<REAL,D> radius, cuNDArray<T> *image );

//
// Conversion between vector<unsigned int> and UINTd
//

template<unsigned int D> 
std::vector<unsigned int> cuNDA_toVec( vectord<unsigned int,D> dims );

template<unsigned int D> 
bool cuNDA_fromVec( std::vector<unsigned int> from, vectord<unsigned int,D> &to );
